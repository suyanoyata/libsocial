
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Cover
 * 
 */
export type Cover = $Result.DefaultSelection<Prisma.$CoverPayload>
/**
 * Model AgeRestriction
 * 
 */
export type AgeRestriction = $Result.DefaultSelection<Prisma.$AgeRestrictionPayload>
/**
 * Model Genre
 * 
 */
export type Genre = $Result.DefaultSelection<Prisma.$GenrePayload>
/**
 * Model Related
 * 
 */
export type Related = $Result.DefaultSelection<Prisma.$RelatedPayload>
/**
 * Model Background
 * 
 */
export type Background = $Result.DefaultSelection<Prisma.$BackgroundPayload>
/**
 * Model Anime
 * 
 */
export type Anime = $Result.DefaultSelection<Prisma.$AnimePayload>
/**
 * Model Episode
 * 
 */
export type Episode = $Result.DefaultSelection<Prisma.$EpisodePayload>
/**
 * Model Manga
 * 
 */
export type Manga = $Result.DefaultSelection<Prisma.$MangaPayload>
/**
 * Model ItemsCount
 * 
 */
export type ItemsCount = $Result.DefaultSelection<Prisma.$ItemsCountPayload>
/**
 * Model Chapter
 * 
 */
export type Chapter = $Result.DefaultSelection<Prisma.$ChapterPayload>
/**
 * Model MangaPage
 * 
 */
export type MangaPage = $Result.DefaultSelection<Prisma.$MangaPagePayload>
/**
 * Model Bookmark
 * 
 */
export type Bookmark = $Result.DefaultSelection<Prisma.$BookmarkPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Verification
 * 
 */
export type Verification = $Result.DefaultSelection<Prisma.$VerificationPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const BookmarkName: {
  planned: 'planned',
  ongoing: 'ongoing',
  finished: 'finished',
  dropped: 'dropped',
  favorite: 'favorite'
};

export type BookmarkName = (typeof BookmarkName)[keyof typeof BookmarkName]


export const ModelName: {
  manga: 'manga',
  anime: 'anime'
};

export type ModelName = (typeof ModelName)[keyof typeof ModelName]


export const SimilarReason: {
  genres: 'genres',
  script: 'script'
};

export type SimilarReason = (typeof SimilarReason)[keyof typeof SimilarReason]


export const RelatedReason: {
  sequel: 'sequel',
  prequel: 'prequel',
  spinoff: 'spinoff'
};

export type RelatedReason = (typeof RelatedReason)[keyof typeof RelatedReason]

}

export type BookmarkName = $Enums.BookmarkName

export const BookmarkName: typeof $Enums.BookmarkName

export type ModelName = $Enums.ModelName

export const ModelName: typeof $Enums.ModelName

export type SimilarReason = $Enums.SimilarReason

export const SimilarReason: typeof $Enums.SimilarReason

export type RelatedReason = $Enums.RelatedReason

export const RelatedReason: typeof $Enums.RelatedReason

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Covers
 * const covers = await prisma.cover.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Covers
   * const covers = await prisma.cover.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.cover`: Exposes CRUD operations for the **Cover** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Covers
    * const covers = await prisma.cover.findMany()
    * ```
    */
  get cover(): Prisma.CoverDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ageRestriction`: Exposes CRUD operations for the **AgeRestriction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AgeRestrictions
    * const ageRestrictions = await prisma.ageRestriction.findMany()
    * ```
    */
  get ageRestriction(): Prisma.AgeRestrictionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.genre`: Exposes CRUD operations for the **Genre** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Genres
    * const genres = await prisma.genre.findMany()
    * ```
    */
  get genre(): Prisma.GenreDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.related`: Exposes CRUD operations for the **Related** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Relateds
    * const relateds = await prisma.related.findMany()
    * ```
    */
  get related(): Prisma.RelatedDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.background`: Exposes CRUD operations for the **Background** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Backgrounds
    * const backgrounds = await prisma.background.findMany()
    * ```
    */
  get background(): Prisma.BackgroundDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.anime`: Exposes CRUD operations for the **Anime** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Anime
    * const anime = await prisma.anime.findMany()
    * ```
    */
  get anime(): Prisma.AnimeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.episode`: Exposes CRUD operations for the **Episode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Episodes
    * const episodes = await prisma.episode.findMany()
    * ```
    */
  get episode(): Prisma.EpisodeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.manga`: Exposes CRUD operations for the **Manga** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Manga
    * const manga = await prisma.manga.findMany()
    * ```
    */
  get manga(): Prisma.MangaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.itemsCount`: Exposes CRUD operations for the **ItemsCount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ItemsCounts
    * const itemsCounts = await prisma.itemsCount.findMany()
    * ```
    */
  get itemsCount(): Prisma.ItemsCountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chapter`: Exposes CRUD operations for the **Chapter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chapters
    * const chapters = await prisma.chapter.findMany()
    * ```
    */
  get chapter(): Prisma.ChapterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mangaPage`: Exposes CRUD operations for the **MangaPage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MangaPages
    * const mangaPages = await prisma.mangaPage.findMany()
    * ```
    */
  get mangaPage(): Prisma.MangaPageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bookmark`: Exposes CRUD operations for the **Bookmark** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bookmarks
    * const bookmarks = await prisma.bookmark.findMany()
    * ```
    */
  get bookmark(): Prisma.BookmarkDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verification`: Exposes CRUD operations for the **Verification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Verifications
    * const verifications = await prisma.verification.findMany()
    * ```
    */
  get verification(): Prisma.VerificationDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Cover: 'Cover',
    AgeRestriction: 'AgeRestriction',
    Genre: 'Genre',
    Related: 'Related',
    Background: 'Background',
    Anime: 'Anime',
    Episode: 'Episode',
    Manga: 'Manga',
    ItemsCount: 'ItemsCount',
    Chapter: 'Chapter',
    MangaPage: 'MangaPage',
    Bookmark: 'Bookmark',
    User: 'User',
    Session: 'Session',
    Account: 'Account',
    Verification: 'Verification'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "cover" | "ageRestriction" | "genre" | "related" | "background" | "anime" | "episode" | "manga" | "itemsCount" | "chapter" | "mangaPage" | "bookmark" | "user" | "session" | "account" | "verification"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Cover: {
        payload: Prisma.$CoverPayload<ExtArgs>
        fields: Prisma.CoverFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoverFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoverPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoverFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoverPayload>
          }
          findFirst: {
            args: Prisma.CoverFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoverPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoverFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoverPayload>
          }
          findMany: {
            args: Prisma.CoverFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoverPayload>[]
          }
          create: {
            args: Prisma.CoverCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoverPayload>
          }
          createMany: {
            args: Prisma.CoverCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CoverCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoverPayload>[]
          }
          delete: {
            args: Prisma.CoverDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoverPayload>
          }
          update: {
            args: Prisma.CoverUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoverPayload>
          }
          deleteMany: {
            args: Prisma.CoverDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CoverUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CoverUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoverPayload>[]
          }
          upsert: {
            args: Prisma.CoverUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoverPayload>
          }
          aggregate: {
            args: Prisma.CoverAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCover>
          }
          groupBy: {
            args: Prisma.CoverGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoverGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoverCountArgs<ExtArgs>
            result: $Utils.Optional<CoverCountAggregateOutputType> | number
          }
        }
      }
      AgeRestriction: {
        payload: Prisma.$AgeRestrictionPayload<ExtArgs>
        fields: Prisma.AgeRestrictionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgeRestrictionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgeRestrictionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgeRestrictionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgeRestrictionPayload>
          }
          findFirst: {
            args: Prisma.AgeRestrictionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgeRestrictionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgeRestrictionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgeRestrictionPayload>
          }
          findMany: {
            args: Prisma.AgeRestrictionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgeRestrictionPayload>[]
          }
          create: {
            args: Prisma.AgeRestrictionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgeRestrictionPayload>
          }
          createMany: {
            args: Prisma.AgeRestrictionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AgeRestrictionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgeRestrictionPayload>[]
          }
          delete: {
            args: Prisma.AgeRestrictionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgeRestrictionPayload>
          }
          update: {
            args: Prisma.AgeRestrictionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgeRestrictionPayload>
          }
          deleteMany: {
            args: Prisma.AgeRestrictionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgeRestrictionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AgeRestrictionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgeRestrictionPayload>[]
          }
          upsert: {
            args: Prisma.AgeRestrictionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgeRestrictionPayload>
          }
          aggregate: {
            args: Prisma.AgeRestrictionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgeRestriction>
          }
          groupBy: {
            args: Prisma.AgeRestrictionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgeRestrictionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgeRestrictionCountArgs<ExtArgs>
            result: $Utils.Optional<AgeRestrictionCountAggregateOutputType> | number
          }
        }
      }
      Genre: {
        payload: Prisma.$GenrePayload<ExtArgs>
        fields: Prisma.GenreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GenreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GenreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>
          }
          findFirst: {
            args: Prisma.GenreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GenreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>
          }
          findMany: {
            args: Prisma.GenreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>[]
          }
          create: {
            args: Prisma.GenreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>
          }
          createMany: {
            args: Prisma.GenreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GenreCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>[]
          }
          delete: {
            args: Prisma.GenreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>
          }
          update: {
            args: Prisma.GenreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>
          }
          deleteMany: {
            args: Prisma.GenreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GenreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GenreUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>[]
          }
          upsert: {
            args: Prisma.GenreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>
          }
          aggregate: {
            args: Prisma.GenreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGenre>
          }
          groupBy: {
            args: Prisma.GenreGroupByArgs<ExtArgs>
            result: $Utils.Optional<GenreGroupByOutputType>[]
          }
          count: {
            args: Prisma.GenreCountArgs<ExtArgs>
            result: $Utils.Optional<GenreCountAggregateOutputType> | number
          }
        }
      }
      Related: {
        payload: Prisma.$RelatedPayload<ExtArgs>
        fields: Prisma.RelatedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RelatedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RelatedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedPayload>
          }
          findFirst: {
            args: Prisma.RelatedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RelatedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedPayload>
          }
          findMany: {
            args: Prisma.RelatedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedPayload>[]
          }
          create: {
            args: Prisma.RelatedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedPayload>
          }
          createMany: {
            args: Prisma.RelatedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RelatedCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedPayload>[]
          }
          delete: {
            args: Prisma.RelatedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedPayload>
          }
          update: {
            args: Prisma.RelatedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedPayload>
          }
          deleteMany: {
            args: Prisma.RelatedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RelatedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RelatedUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedPayload>[]
          }
          upsert: {
            args: Prisma.RelatedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedPayload>
          }
          aggregate: {
            args: Prisma.RelatedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRelated>
          }
          groupBy: {
            args: Prisma.RelatedGroupByArgs<ExtArgs>
            result: $Utils.Optional<RelatedGroupByOutputType>[]
          }
          count: {
            args: Prisma.RelatedCountArgs<ExtArgs>
            result: $Utils.Optional<RelatedCountAggregateOutputType> | number
          }
        }
      }
      Background: {
        payload: Prisma.$BackgroundPayload<ExtArgs>
        fields: Prisma.BackgroundFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BackgroundFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BackgroundPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BackgroundFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BackgroundPayload>
          }
          findFirst: {
            args: Prisma.BackgroundFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BackgroundPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BackgroundFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BackgroundPayload>
          }
          findMany: {
            args: Prisma.BackgroundFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BackgroundPayload>[]
          }
          create: {
            args: Prisma.BackgroundCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BackgroundPayload>
          }
          createMany: {
            args: Prisma.BackgroundCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BackgroundCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BackgroundPayload>[]
          }
          delete: {
            args: Prisma.BackgroundDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BackgroundPayload>
          }
          update: {
            args: Prisma.BackgroundUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BackgroundPayload>
          }
          deleteMany: {
            args: Prisma.BackgroundDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BackgroundUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BackgroundUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BackgroundPayload>[]
          }
          upsert: {
            args: Prisma.BackgroundUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BackgroundPayload>
          }
          aggregate: {
            args: Prisma.BackgroundAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBackground>
          }
          groupBy: {
            args: Prisma.BackgroundGroupByArgs<ExtArgs>
            result: $Utils.Optional<BackgroundGroupByOutputType>[]
          }
          count: {
            args: Prisma.BackgroundCountArgs<ExtArgs>
            result: $Utils.Optional<BackgroundCountAggregateOutputType> | number
          }
        }
      }
      Anime: {
        payload: Prisma.$AnimePayload<ExtArgs>
        fields: Prisma.AnimeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnimeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnimeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePayload>
          }
          findFirst: {
            args: Prisma.AnimeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnimeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePayload>
          }
          findMany: {
            args: Prisma.AnimeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePayload>[]
          }
          create: {
            args: Prisma.AnimeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePayload>
          }
          createMany: {
            args: Prisma.AnimeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnimeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePayload>[]
          }
          delete: {
            args: Prisma.AnimeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePayload>
          }
          update: {
            args: Prisma.AnimeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePayload>
          }
          deleteMany: {
            args: Prisma.AnimeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnimeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnimeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePayload>[]
          }
          upsert: {
            args: Prisma.AnimeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePayload>
          }
          aggregate: {
            args: Prisma.AnimeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnime>
          }
          groupBy: {
            args: Prisma.AnimeGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnimeGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnimeCountArgs<ExtArgs>
            result: $Utils.Optional<AnimeCountAggregateOutputType> | number
          }
        }
      }
      Episode: {
        payload: Prisma.$EpisodePayload<ExtArgs>
        fields: Prisma.EpisodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EpisodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EpisodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EpisodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EpisodePayload>
          }
          findFirst: {
            args: Prisma.EpisodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EpisodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EpisodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EpisodePayload>
          }
          findMany: {
            args: Prisma.EpisodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EpisodePayload>[]
          }
          create: {
            args: Prisma.EpisodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EpisodePayload>
          }
          createMany: {
            args: Prisma.EpisodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EpisodeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EpisodePayload>[]
          }
          delete: {
            args: Prisma.EpisodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EpisodePayload>
          }
          update: {
            args: Prisma.EpisodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EpisodePayload>
          }
          deleteMany: {
            args: Prisma.EpisodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EpisodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EpisodeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EpisodePayload>[]
          }
          upsert: {
            args: Prisma.EpisodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EpisodePayload>
          }
          aggregate: {
            args: Prisma.EpisodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEpisode>
          }
          groupBy: {
            args: Prisma.EpisodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EpisodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EpisodeCountArgs<ExtArgs>
            result: $Utils.Optional<EpisodeCountAggregateOutputType> | number
          }
        }
      }
      Manga: {
        payload: Prisma.$MangaPayload<ExtArgs>
        fields: Prisma.MangaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MangaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MangaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MangaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MangaPayload>
          }
          findFirst: {
            args: Prisma.MangaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MangaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MangaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MangaPayload>
          }
          findMany: {
            args: Prisma.MangaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MangaPayload>[]
          }
          create: {
            args: Prisma.MangaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MangaPayload>
          }
          createMany: {
            args: Prisma.MangaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MangaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MangaPayload>[]
          }
          delete: {
            args: Prisma.MangaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MangaPayload>
          }
          update: {
            args: Prisma.MangaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MangaPayload>
          }
          deleteMany: {
            args: Prisma.MangaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MangaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MangaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MangaPayload>[]
          }
          upsert: {
            args: Prisma.MangaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MangaPayload>
          }
          aggregate: {
            args: Prisma.MangaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateManga>
          }
          groupBy: {
            args: Prisma.MangaGroupByArgs<ExtArgs>
            result: $Utils.Optional<MangaGroupByOutputType>[]
          }
          count: {
            args: Prisma.MangaCountArgs<ExtArgs>
            result: $Utils.Optional<MangaCountAggregateOutputType> | number
          }
        }
      }
      ItemsCount: {
        payload: Prisma.$ItemsCountPayload<ExtArgs>
        fields: Prisma.ItemsCountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ItemsCountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsCountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ItemsCountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsCountPayload>
          }
          findFirst: {
            args: Prisma.ItemsCountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsCountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ItemsCountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsCountPayload>
          }
          findMany: {
            args: Prisma.ItemsCountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsCountPayload>[]
          }
          create: {
            args: Prisma.ItemsCountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsCountPayload>
          }
          createMany: {
            args: Prisma.ItemsCountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ItemsCountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsCountPayload>[]
          }
          delete: {
            args: Prisma.ItemsCountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsCountPayload>
          }
          update: {
            args: Prisma.ItemsCountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsCountPayload>
          }
          deleteMany: {
            args: Prisma.ItemsCountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ItemsCountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ItemsCountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsCountPayload>[]
          }
          upsert: {
            args: Prisma.ItemsCountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsCountPayload>
          }
          aggregate: {
            args: Prisma.ItemsCountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateItemsCount>
          }
          groupBy: {
            args: Prisma.ItemsCountGroupByArgs<ExtArgs>
            result: $Utils.Optional<ItemsCountGroupByOutputType>[]
          }
          count: {
            args: Prisma.ItemsCountCountArgs<ExtArgs>
            result: $Utils.Optional<ItemsCountCountAggregateOutputType> | number
          }
        }
      }
      Chapter: {
        payload: Prisma.$ChapterPayload<ExtArgs>
        fields: Prisma.ChapterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChapterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChapterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          findFirst: {
            args: Prisma.ChapterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChapterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          findMany: {
            args: Prisma.ChapterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>[]
          }
          create: {
            args: Prisma.ChapterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          createMany: {
            args: Prisma.ChapterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChapterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>[]
          }
          delete: {
            args: Prisma.ChapterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          update: {
            args: Prisma.ChapterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          deleteMany: {
            args: Prisma.ChapterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChapterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChapterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>[]
          }
          upsert: {
            args: Prisma.ChapterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          aggregate: {
            args: Prisma.ChapterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChapter>
          }
          groupBy: {
            args: Prisma.ChapterGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChapterGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChapterCountArgs<ExtArgs>
            result: $Utils.Optional<ChapterCountAggregateOutputType> | number
          }
        }
      }
      MangaPage: {
        payload: Prisma.$MangaPagePayload<ExtArgs>
        fields: Prisma.MangaPageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MangaPageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MangaPagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MangaPageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MangaPagePayload>
          }
          findFirst: {
            args: Prisma.MangaPageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MangaPagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MangaPageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MangaPagePayload>
          }
          findMany: {
            args: Prisma.MangaPageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MangaPagePayload>[]
          }
          create: {
            args: Prisma.MangaPageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MangaPagePayload>
          }
          createMany: {
            args: Prisma.MangaPageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MangaPageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MangaPagePayload>[]
          }
          delete: {
            args: Prisma.MangaPageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MangaPagePayload>
          }
          update: {
            args: Prisma.MangaPageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MangaPagePayload>
          }
          deleteMany: {
            args: Prisma.MangaPageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MangaPageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MangaPageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MangaPagePayload>[]
          }
          upsert: {
            args: Prisma.MangaPageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MangaPagePayload>
          }
          aggregate: {
            args: Prisma.MangaPageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMangaPage>
          }
          groupBy: {
            args: Prisma.MangaPageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MangaPageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MangaPageCountArgs<ExtArgs>
            result: $Utils.Optional<MangaPageCountAggregateOutputType> | number
          }
        }
      }
      Bookmark: {
        payload: Prisma.$BookmarkPayload<ExtArgs>
        fields: Prisma.BookmarkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookmarkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookmarkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          findFirst: {
            args: Prisma.BookmarkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookmarkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          findMany: {
            args: Prisma.BookmarkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>[]
          }
          create: {
            args: Prisma.BookmarkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          createMany: {
            args: Prisma.BookmarkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BookmarkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>[]
          }
          delete: {
            args: Prisma.BookmarkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          update: {
            args: Prisma.BookmarkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          deleteMany: {
            args: Prisma.BookmarkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookmarkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BookmarkUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>[]
          }
          upsert: {
            args: Prisma.BookmarkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          aggregate: {
            args: Prisma.BookmarkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBookmark>
          }
          groupBy: {
            args: Prisma.BookmarkGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookmarkGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookmarkCountArgs<ExtArgs>
            result: $Utils.Optional<BookmarkCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Verification: {
        payload: Prisma.$VerificationPayload<ExtArgs>
        fields: Prisma.VerificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findFirst: {
            args: Prisma.VerificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findMany: {
            args: Prisma.VerificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          create: {
            args: Prisma.VerificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          createMany: {
            args: Prisma.VerificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          delete: {
            args: Prisma.VerificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          update: {
            args: Prisma.VerificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          deleteMany: {
            args: Prisma.VerificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          upsert: {
            args: Prisma.VerificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          aggregate: {
            args: Prisma.VerificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerification>
          }
          groupBy: {
            args: Prisma.VerificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    cover?: CoverOmit
    ageRestriction?: AgeRestrictionOmit
    genre?: GenreOmit
    related?: RelatedOmit
    background?: BackgroundOmit
    anime?: AnimeOmit
    episode?: EpisodeOmit
    manga?: MangaOmit
    itemsCount?: ItemsCountOmit
    chapter?: ChapterOmit
    mangaPage?: MangaPageOmit
    bookmark?: BookmarkOmit
    user?: UserOmit
    session?: SessionOmit
    account?: AccountOmit
    verification?: VerificationOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CoverCountOutputType
   */

  export type CoverCountOutputType = {
    Manga: number
    Anime: number
  }

  export type CoverCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Manga?: boolean | CoverCountOutputTypeCountMangaArgs
    Anime?: boolean | CoverCountOutputTypeCountAnimeArgs
  }

  // Custom InputTypes
  /**
   * CoverCountOutputType without action
   */
  export type CoverCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoverCountOutputType
     */
    select?: CoverCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CoverCountOutputType without action
   */
  export type CoverCountOutputTypeCountMangaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MangaWhereInput
  }

  /**
   * CoverCountOutputType without action
   */
  export type CoverCountOutputTypeCountAnimeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeWhereInput
  }


  /**
   * Count Type AgeRestrictionCountOutputType
   */

  export type AgeRestrictionCountOutputType = {
    Manga: number
    Anime: number
  }

  export type AgeRestrictionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Manga?: boolean | AgeRestrictionCountOutputTypeCountMangaArgs
    Anime?: boolean | AgeRestrictionCountOutputTypeCountAnimeArgs
  }

  // Custom InputTypes
  /**
   * AgeRestrictionCountOutputType without action
   */
  export type AgeRestrictionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgeRestrictionCountOutputType
     */
    select?: AgeRestrictionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AgeRestrictionCountOutputType without action
   */
  export type AgeRestrictionCountOutputTypeCountMangaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MangaWhereInput
  }

  /**
   * AgeRestrictionCountOutputType without action
   */
  export type AgeRestrictionCountOutputTypeCountAnimeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeWhereInput
  }


  /**
   * Count Type GenreCountOutputType
   */

  export type GenreCountOutputType = {
    Manga: number
    Anime: number
  }

  export type GenreCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Manga?: boolean | GenreCountOutputTypeCountMangaArgs
    Anime?: boolean | GenreCountOutputTypeCountAnimeArgs
  }

  // Custom InputTypes
  /**
   * GenreCountOutputType without action
   */
  export type GenreCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenreCountOutputType
     */
    select?: GenreCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GenreCountOutputType without action
   */
  export type GenreCountOutputTypeCountMangaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MangaWhereInput
  }

  /**
   * GenreCountOutputType without action
   */
  export type GenreCountOutputTypeCountAnimeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeWhereInput
  }


  /**
   * Count Type BackgroundCountOutputType
   */

  export type BackgroundCountOutputType = {
    Manga: number
    Anime: number
  }

  export type BackgroundCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Manga?: boolean | BackgroundCountOutputTypeCountMangaArgs
    Anime?: boolean | BackgroundCountOutputTypeCountAnimeArgs
  }

  // Custom InputTypes
  /**
   * BackgroundCountOutputType without action
   */
  export type BackgroundCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BackgroundCountOutputType
     */
    select?: BackgroundCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BackgroundCountOutputType without action
   */
  export type BackgroundCountOutputTypeCountMangaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MangaWhereInput
  }

  /**
   * BackgroundCountOutputType without action
   */
  export type BackgroundCountOutputTypeCountAnimeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeWhereInput
  }


  /**
   * Count Type AnimeCountOutputType
   */

  export type AnimeCountOutputType = {
    genres: number
    Episode: number
    relatedFrom: number
    relatedTo: number
    Bookmark: number
  }

  export type AnimeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    genres?: boolean | AnimeCountOutputTypeCountGenresArgs
    Episode?: boolean | AnimeCountOutputTypeCountEpisodeArgs
    relatedFrom?: boolean | AnimeCountOutputTypeCountRelatedFromArgs
    relatedTo?: boolean | AnimeCountOutputTypeCountRelatedToArgs
    Bookmark?: boolean | AnimeCountOutputTypeCountBookmarkArgs
  }

  // Custom InputTypes
  /**
   * AnimeCountOutputType without action
   */
  export type AnimeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCountOutputType
     */
    select?: AnimeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AnimeCountOutputType without action
   */
  export type AnimeCountOutputTypeCountGenresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GenreWhereInput
  }

  /**
   * AnimeCountOutputType without action
   */
  export type AnimeCountOutputTypeCountEpisodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EpisodeWhereInput
  }

  /**
   * AnimeCountOutputType without action
   */
  export type AnimeCountOutputTypeCountRelatedFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelatedWhereInput
  }

  /**
   * AnimeCountOutputType without action
   */
  export type AnimeCountOutputTypeCountRelatedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelatedWhereInput
  }

  /**
   * AnimeCountOutputType without action
   */
  export type AnimeCountOutputTypeCountBookmarkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkWhereInput
  }


  /**
   * Count Type EpisodeCountOutputType
   */

  export type EpisodeCountOutputType = {
    Bookmark: number
  }

  export type EpisodeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Bookmark?: boolean | EpisodeCountOutputTypeCountBookmarkArgs
  }

  // Custom InputTypes
  /**
   * EpisodeCountOutputType without action
   */
  export type EpisodeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EpisodeCountOutputType
     */
    select?: EpisodeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EpisodeCountOutputType without action
   */
  export type EpisodeCountOutputTypeCountBookmarkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkWhereInput
  }


  /**
   * Count Type MangaCountOutputType
   */

  export type MangaCountOutputType = {
    genres: number
    Chapter: number
    relatedFrom: number
    relatedTo: number
    Bookmark: number
  }

  export type MangaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    genres?: boolean | MangaCountOutputTypeCountGenresArgs
    Chapter?: boolean | MangaCountOutputTypeCountChapterArgs
    relatedFrom?: boolean | MangaCountOutputTypeCountRelatedFromArgs
    relatedTo?: boolean | MangaCountOutputTypeCountRelatedToArgs
    Bookmark?: boolean | MangaCountOutputTypeCountBookmarkArgs
  }

  // Custom InputTypes
  /**
   * MangaCountOutputType without action
   */
  export type MangaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MangaCountOutputType
     */
    select?: MangaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MangaCountOutputType without action
   */
  export type MangaCountOutputTypeCountGenresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GenreWhereInput
  }

  /**
   * MangaCountOutputType without action
   */
  export type MangaCountOutputTypeCountChapterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChapterWhereInput
  }

  /**
   * MangaCountOutputType without action
   */
  export type MangaCountOutputTypeCountRelatedFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelatedWhereInput
  }

  /**
   * MangaCountOutputType without action
   */
  export type MangaCountOutputTypeCountRelatedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelatedWhereInput
  }

  /**
   * MangaCountOutputType without action
   */
  export type MangaCountOutputTypeCountBookmarkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkWhereInput
  }


  /**
   * Count Type ItemsCountCountOutputType
   */

  export type ItemsCountCountOutputType = {
    Manga: number
  }

  export type ItemsCountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Manga?: boolean | ItemsCountCountOutputTypeCountMangaArgs
  }

  // Custom InputTypes
  /**
   * ItemsCountCountOutputType without action
   */
  export type ItemsCountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemsCountCountOutputType
     */
    select?: ItemsCountCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ItemsCountCountOutputType without action
   */
  export type ItemsCountCountOutputTypeCountMangaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MangaWhereInput
  }


  /**
   * Count Type ChapterCountOutputType
   */

  export type ChapterCountOutputType = {
    pages: number
    Bookmark: number
  }

  export type ChapterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pages?: boolean | ChapterCountOutputTypeCountPagesArgs
    Bookmark?: boolean | ChapterCountOutputTypeCountBookmarkArgs
  }

  // Custom InputTypes
  /**
   * ChapterCountOutputType without action
   */
  export type ChapterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterCountOutputType
     */
    select?: ChapterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChapterCountOutputType without action
   */
  export type ChapterCountOutputTypeCountPagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MangaPageWhereInput
  }

  /**
   * ChapterCountOutputType without action
   */
  export type ChapterCountOutputTypeCountBookmarkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    sessions: number
    accounts: number
    Bookmark: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    Bookmark?: boolean | UserCountOutputTypeCountBookmarkArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBookmarkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Cover
   */

  export type AggregateCover = {
    _count: CoverCountAggregateOutputType | null
    _avg: CoverAvgAggregateOutputType | null
    _sum: CoverSumAggregateOutputType | null
    _min: CoverMinAggregateOutputType | null
    _max: CoverMaxAggregateOutputType | null
  }

  export type CoverAvgAggregateOutputType = {
    id: number | null
  }

  export type CoverSumAggregateOutputType = {
    id: number | null
  }

  export type CoverMinAggregateOutputType = {
    id: number | null
    thumbnail: string | null
    default: string | null
  }

  export type CoverMaxAggregateOutputType = {
    id: number | null
    thumbnail: string | null
    default: string | null
  }

  export type CoverCountAggregateOutputType = {
    id: number
    thumbnail: number
    default: number
    _all: number
  }


  export type CoverAvgAggregateInputType = {
    id?: true
  }

  export type CoverSumAggregateInputType = {
    id?: true
  }

  export type CoverMinAggregateInputType = {
    id?: true
    thumbnail?: true
    default?: true
  }

  export type CoverMaxAggregateInputType = {
    id?: true
    thumbnail?: true
    default?: true
  }

  export type CoverCountAggregateInputType = {
    id?: true
    thumbnail?: true
    default?: true
    _all?: true
  }

  export type CoverAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cover to aggregate.
     */
    where?: CoverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Covers to fetch.
     */
    orderBy?: CoverOrderByWithRelationInput | CoverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Covers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Covers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Covers
    **/
    _count?: true | CoverCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoverAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoverSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoverMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoverMaxAggregateInputType
  }

  export type GetCoverAggregateType<T extends CoverAggregateArgs> = {
        [P in keyof T & keyof AggregateCover]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCover[P]>
      : GetScalarType<T[P], AggregateCover[P]>
  }




  export type CoverGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoverWhereInput
    orderBy?: CoverOrderByWithAggregationInput | CoverOrderByWithAggregationInput[]
    by: CoverScalarFieldEnum[] | CoverScalarFieldEnum
    having?: CoverScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoverCountAggregateInputType | true
    _avg?: CoverAvgAggregateInputType
    _sum?: CoverSumAggregateInputType
    _min?: CoverMinAggregateInputType
    _max?: CoverMaxAggregateInputType
  }

  export type CoverGroupByOutputType = {
    id: number
    thumbnail: string
    default: string
    _count: CoverCountAggregateOutputType | null
    _avg: CoverAvgAggregateOutputType | null
    _sum: CoverSumAggregateOutputType | null
    _min: CoverMinAggregateOutputType | null
    _max: CoverMaxAggregateOutputType | null
  }

  type GetCoverGroupByPayload<T extends CoverGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoverGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoverGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoverGroupByOutputType[P]>
            : GetScalarType<T[P], CoverGroupByOutputType[P]>
        }
      >
    >


  export type CoverSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    thumbnail?: boolean
    default?: boolean
    Manga?: boolean | Cover$MangaArgs<ExtArgs>
    Anime?: boolean | Cover$AnimeArgs<ExtArgs>
    _count?: boolean | CoverCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cover"]>

  export type CoverSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    thumbnail?: boolean
    default?: boolean
  }, ExtArgs["result"]["cover"]>

  export type CoverSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    thumbnail?: boolean
    default?: boolean
  }, ExtArgs["result"]["cover"]>

  export type CoverSelectScalar = {
    id?: boolean
    thumbnail?: boolean
    default?: boolean
  }

  export type CoverOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "thumbnail" | "default", ExtArgs["result"]["cover"]>
  export type CoverInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Manga?: boolean | Cover$MangaArgs<ExtArgs>
    Anime?: boolean | Cover$AnimeArgs<ExtArgs>
    _count?: boolean | CoverCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CoverIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CoverIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CoverPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cover"
    objects: {
      Manga: Prisma.$MangaPayload<ExtArgs>[]
      Anime: Prisma.$AnimePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      thumbnail: string
      default: string
    }, ExtArgs["result"]["cover"]>
    composites: {}
  }

  type CoverGetPayload<S extends boolean | null | undefined | CoverDefaultArgs> = $Result.GetResult<Prisma.$CoverPayload, S>

  type CoverCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CoverFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CoverCountAggregateInputType | true
    }

  export interface CoverDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cover'], meta: { name: 'Cover' } }
    /**
     * Find zero or one Cover that matches the filter.
     * @param {CoverFindUniqueArgs} args - Arguments to find a Cover
     * @example
     * // Get one Cover
     * const cover = await prisma.cover.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CoverFindUniqueArgs>(args: SelectSubset<T, CoverFindUniqueArgs<ExtArgs>>): Prisma__CoverClient<$Result.GetResult<Prisma.$CoverPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cover that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CoverFindUniqueOrThrowArgs} args - Arguments to find a Cover
     * @example
     * // Get one Cover
     * const cover = await prisma.cover.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CoverFindUniqueOrThrowArgs>(args: SelectSubset<T, CoverFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CoverClient<$Result.GetResult<Prisma.$CoverPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cover that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoverFindFirstArgs} args - Arguments to find a Cover
     * @example
     * // Get one Cover
     * const cover = await prisma.cover.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CoverFindFirstArgs>(args?: SelectSubset<T, CoverFindFirstArgs<ExtArgs>>): Prisma__CoverClient<$Result.GetResult<Prisma.$CoverPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cover that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoverFindFirstOrThrowArgs} args - Arguments to find a Cover
     * @example
     * // Get one Cover
     * const cover = await prisma.cover.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CoverFindFirstOrThrowArgs>(args?: SelectSubset<T, CoverFindFirstOrThrowArgs<ExtArgs>>): Prisma__CoverClient<$Result.GetResult<Prisma.$CoverPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Covers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoverFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Covers
     * const covers = await prisma.cover.findMany()
     * 
     * // Get first 10 Covers
     * const covers = await prisma.cover.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coverWithIdOnly = await prisma.cover.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CoverFindManyArgs>(args?: SelectSubset<T, CoverFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoverPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cover.
     * @param {CoverCreateArgs} args - Arguments to create a Cover.
     * @example
     * // Create one Cover
     * const Cover = await prisma.cover.create({
     *   data: {
     *     // ... data to create a Cover
     *   }
     * })
     * 
     */
    create<T extends CoverCreateArgs>(args: SelectSubset<T, CoverCreateArgs<ExtArgs>>): Prisma__CoverClient<$Result.GetResult<Prisma.$CoverPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Covers.
     * @param {CoverCreateManyArgs} args - Arguments to create many Covers.
     * @example
     * // Create many Covers
     * const cover = await prisma.cover.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CoverCreateManyArgs>(args?: SelectSubset<T, CoverCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Covers and returns the data saved in the database.
     * @param {CoverCreateManyAndReturnArgs} args - Arguments to create many Covers.
     * @example
     * // Create many Covers
     * const cover = await prisma.cover.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Covers and only return the `id`
     * const coverWithIdOnly = await prisma.cover.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CoverCreateManyAndReturnArgs>(args?: SelectSubset<T, CoverCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoverPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Cover.
     * @param {CoverDeleteArgs} args - Arguments to delete one Cover.
     * @example
     * // Delete one Cover
     * const Cover = await prisma.cover.delete({
     *   where: {
     *     // ... filter to delete one Cover
     *   }
     * })
     * 
     */
    delete<T extends CoverDeleteArgs>(args: SelectSubset<T, CoverDeleteArgs<ExtArgs>>): Prisma__CoverClient<$Result.GetResult<Prisma.$CoverPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cover.
     * @param {CoverUpdateArgs} args - Arguments to update one Cover.
     * @example
     * // Update one Cover
     * const cover = await prisma.cover.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CoverUpdateArgs>(args: SelectSubset<T, CoverUpdateArgs<ExtArgs>>): Prisma__CoverClient<$Result.GetResult<Prisma.$CoverPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Covers.
     * @param {CoverDeleteManyArgs} args - Arguments to filter Covers to delete.
     * @example
     * // Delete a few Covers
     * const { count } = await prisma.cover.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CoverDeleteManyArgs>(args?: SelectSubset<T, CoverDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Covers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoverUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Covers
     * const cover = await prisma.cover.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CoverUpdateManyArgs>(args: SelectSubset<T, CoverUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Covers and returns the data updated in the database.
     * @param {CoverUpdateManyAndReturnArgs} args - Arguments to update many Covers.
     * @example
     * // Update many Covers
     * const cover = await prisma.cover.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Covers and only return the `id`
     * const coverWithIdOnly = await prisma.cover.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CoverUpdateManyAndReturnArgs>(args: SelectSubset<T, CoverUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoverPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Cover.
     * @param {CoverUpsertArgs} args - Arguments to update or create a Cover.
     * @example
     * // Update or create a Cover
     * const cover = await prisma.cover.upsert({
     *   create: {
     *     // ... data to create a Cover
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cover we want to update
     *   }
     * })
     */
    upsert<T extends CoverUpsertArgs>(args: SelectSubset<T, CoverUpsertArgs<ExtArgs>>): Prisma__CoverClient<$Result.GetResult<Prisma.$CoverPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Covers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoverCountArgs} args - Arguments to filter Covers to count.
     * @example
     * // Count the number of Covers
     * const count = await prisma.cover.count({
     *   where: {
     *     // ... the filter for the Covers we want to count
     *   }
     * })
    **/
    count<T extends CoverCountArgs>(
      args?: Subset<T, CoverCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoverCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cover.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoverAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoverAggregateArgs>(args: Subset<T, CoverAggregateArgs>): Prisma.PrismaPromise<GetCoverAggregateType<T>>

    /**
     * Group by Cover.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoverGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoverGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoverGroupByArgs['orderBy'] }
        : { orderBy?: CoverGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoverGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoverGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cover model
   */
  readonly fields: CoverFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cover.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoverClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Manga<T extends Cover$MangaArgs<ExtArgs> = {}>(args?: Subset<T, Cover$MangaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Anime<T extends Cover$AnimeArgs<ExtArgs> = {}>(args?: Subset<T, Cover$AnimeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cover model
   */
  interface CoverFieldRefs {
    readonly id: FieldRef<"Cover", 'Int'>
    readonly thumbnail: FieldRef<"Cover", 'String'>
    readonly default: FieldRef<"Cover", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Cover findUnique
   */
  export type CoverFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cover
     */
    select?: CoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cover
     */
    omit?: CoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverInclude<ExtArgs> | null
    /**
     * Filter, which Cover to fetch.
     */
    where: CoverWhereUniqueInput
  }

  /**
   * Cover findUniqueOrThrow
   */
  export type CoverFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cover
     */
    select?: CoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cover
     */
    omit?: CoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverInclude<ExtArgs> | null
    /**
     * Filter, which Cover to fetch.
     */
    where: CoverWhereUniqueInput
  }

  /**
   * Cover findFirst
   */
  export type CoverFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cover
     */
    select?: CoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cover
     */
    omit?: CoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverInclude<ExtArgs> | null
    /**
     * Filter, which Cover to fetch.
     */
    where?: CoverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Covers to fetch.
     */
    orderBy?: CoverOrderByWithRelationInput | CoverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Covers.
     */
    cursor?: CoverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Covers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Covers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Covers.
     */
    distinct?: CoverScalarFieldEnum | CoverScalarFieldEnum[]
  }

  /**
   * Cover findFirstOrThrow
   */
  export type CoverFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cover
     */
    select?: CoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cover
     */
    omit?: CoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverInclude<ExtArgs> | null
    /**
     * Filter, which Cover to fetch.
     */
    where?: CoverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Covers to fetch.
     */
    orderBy?: CoverOrderByWithRelationInput | CoverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Covers.
     */
    cursor?: CoverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Covers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Covers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Covers.
     */
    distinct?: CoverScalarFieldEnum | CoverScalarFieldEnum[]
  }

  /**
   * Cover findMany
   */
  export type CoverFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cover
     */
    select?: CoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cover
     */
    omit?: CoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverInclude<ExtArgs> | null
    /**
     * Filter, which Covers to fetch.
     */
    where?: CoverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Covers to fetch.
     */
    orderBy?: CoverOrderByWithRelationInput | CoverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Covers.
     */
    cursor?: CoverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Covers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Covers.
     */
    skip?: number
    distinct?: CoverScalarFieldEnum | CoverScalarFieldEnum[]
  }

  /**
   * Cover create
   */
  export type CoverCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cover
     */
    select?: CoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cover
     */
    omit?: CoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverInclude<ExtArgs> | null
    /**
     * The data needed to create a Cover.
     */
    data: XOR<CoverCreateInput, CoverUncheckedCreateInput>
  }

  /**
   * Cover createMany
   */
  export type CoverCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Covers.
     */
    data: CoverCreateManyInput | CoverCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cover createManyAndReturn
   */
  export type CoverCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cover
     */
    select?: CoverSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cover
     */
    omit?: CoverOmit<ExtArgs> | null
    /**
     * The data used to create many Covers.
     */
    data: CoverCreateManyInput | CoverCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cover update
   */
  export type CoverUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cover
     */
    select?: CoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cover
     */
    omit?: CoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverInclude<ExtArgs> | null
    /**
     * The data needed to update a Cover.
     */
    data: XOR<CoverUpdateInput, CoverUncheckedUpdateInput>
    /**
     * Choose, which Cover to update.
     */
    where: CoverWhereUniqueInput
  }

  /**
   * Cover updateMany
   */
  export type CoverUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Covers.
     */
    data: XOR<CoverUpdateManyMutationInput, CoverUncheckedUpdateManyInput>
    /**
     * Filter which Covers to update
     */
    where?: CoverWhereInput
    /**
     * Limit how many Covers to update.
     */
    limit?: number
  }

  /**
   * Cover updateManyAndReturn
   */
  export type CoverUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cover
     */
    select?: CoverSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cover
     */
    omit?: CoverOmit<ExtArgs> | null
    /**
     * The data used to update Covers.
     */
    data: XOR<CoverUpdateManyMutationInput, CoverUncheckedUpdateManyInput>
    /**
     * Filter which Covers to update
     */
    where?: CoverWhereInput
    /**
     * Limit how many Covers to update.
     */
    limit?: number
  }

  /**
   * Cover upsert
   */
  export type CoverUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cover
     */
    select?: CoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cover
     */
    omit?: CoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverInclude<ExtArgs> | null
    /**
     * The filter to search for the Cover to update in case it exists.
     */
    where: CoverWhereUniqueInput
    /**
     * In case the Cover found by the `where` argument doesn't exist, create a new Cover with this data.
     */
    create: XOR<CoverCreateInput, CoverUncheckedCreateInput>
    /**
     * In case the Cover was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoverUpdateInput, CoverUncheckedUpdateInput>
  }

  /**
   * Cover delete
   */
  export type CoverDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cover
     */
    select?: CoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cover
     */
    omit?: CoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverInclude<ExtArgs> | null
    /**
     * Filter which Cover to delete.
     */
    where: CoverWhereUniqueInput
  }

  /**
   * Cover deleteMany
   */
  export type CoverDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Covers to delete
     */
    where?: CoverWhereInput
    /**
     * Limit how many Covers to delete.
     */
    limit?: number
  }

  /**
   * Cover.Manga
   */
  export type Cover$MangaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manga
     */
    select?: MangaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Manga
     */
    omit?: MangaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaInclude<ExtArgs> | null
    where?: MangaWhereInput
    orderBy?: MangaOrderByWithRelationInput | MangaOrderByWithRelationInput[]
    cursor?: MangaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MangaScalarFieldEnum | MangaScalarFieldEnum[]
  }

  /**
   * Cover.Anime
   */
  export type Cover$AnimeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    where?: AnimeWhereInput
    orderBy?: AnimeOrderByWithRelationInput | AnimeOrderByWithRelationInput[]
    cursor?: AnimeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimeScalarFieldEnum | AnimeScalarFieldEnum[]
  }

  /**
   * Cover without action
   */
  export type CoverDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cover
     */
    select?: CoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cover
     */
    omit?: CoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverInclude<ExtArgs> | null
  }


  /**
   * Model AgeRestriction
   */

  export type AggregateAgeRestriction = {
    _count: AgeRestrictionCountAggregateOutputType | null
    _avg: AgeRestrictionAvgAggregateOutputType | null
    _sum: AgeRestrictionSumAggregateOutputType | null
    _min: AgeRestrictionMinAggregateOutputType | null
    _max: AgeRestrictionMaxAggregateOutputType | null
  }

  export type AgeRestrictionAvgAggregateOutputType = {
    id: number | null
    site_ids: number | null
  }

  export type AgeRestrictionSumAggregateOutputType = {
    id: number | null
    site_ids: number[]
  }

  export type AgeRestrictionMinAggregateOutputType = {
    id: number | null
    label: string | null
  }

  export type AgeRestrictionMaxAggregateOutputType = {
    id: number | null
    label: string | null
  }

  export type AgeRestrictionCountAggregateOutputType = {
    id: number
    label: number
    site_ids: number
    _all: number
  }


  export type AgeRestrictionAvgAggregateInputType = {
    id?: true
    site_ids?: true
  }

  export type AgeRestrictionSumAggregateInputType = {
    id?: true
    site_ids?: true
  }

  export type AgeRestrictionMinAggregateInputType = {
    id?: true
    label?: true
  }

  export type AgeRestrictionMaxAggregateInputType = {
    id?: true
    label?: true
  }

  export type AgeRestrictionCountAggregateInputType = {
    id?: true
    label?: true
    site_ids?: true
    _all?: true
  }

  export type AgeRestrictionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgeRestriction to aggregate.
     */
    where?: AgeRestrictionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgeRestrictions to fetch.
     */
    orderBy?: AgeRestrictionOrderByWithRelationInput | AgeRestrictionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgeRestrictionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgeRestrictions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgeRestrictions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AgeRestrictions
    **/
    _count?: true | AgeRestrictionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgeRestrictionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgeRestrictionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgeRestrictionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgeRestrictionMaxAggregateInputType
  }

  export type GetAgeRestrictionAggregateType<T extends AgeRestrictionAggregateArgs> = {
        [P in keyof T & keyof AggregateAgeRestriction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgeRestriction[P]>
      : GetScalarType<T[P], AggregateAgeRestriction[P]>
  }




  export type AgeRestrictionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgeRestrictionWhereInput
    orderBy?: AgeRestrictionOrderByWithAggregationInput | AgeRestrictionOrderByWithAggregationInput[]
    by: AgeRestrictionScalarFieldEnum[] | AgeRestrictionScalarFieldEnum
    having?: AgeRestrictionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgeRestrictionCountAggregateInputType | true
    _avg?: AgeRestrictionAvgAggregateInputType
    _sum?: AgeRestrictionSumAggregateInputType
    _min?: AgeRestrictionMinAggregateInputType
    _max?: AgeRestrictionMaxAggregateInputType
  }

  export type AgeRestrictionGroupByOutputType = {
    id: number
    label: string
    site_ids: number[]
    _count: AgeRestrictionCountAggregateOutputType | null
    _avg: AgeRestrictionAvgAggregateOutputType | null
    _sum: AgeRestrictionSumAggregateOutputType | null
    _min: AgeRestrictionMinAggregateOutputType | null
    _max: AgeRestrictionMaxAggregateOutputType | null
  }

  type GetAgeRestrictionGroupByPayload<T extends AgeRestrictionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgeRestrictionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgeRestrictionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgeRestrictionGroupByOutputType[P]>
            : GetScalarType<T[P], AgeRestrictionGroupByOutputType[P]>
        }
      >
    >


  export type AgeRestrictionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    site_ids?: boolean
    Manga?: boolean | AgeRestriction$MangaArgs<ExtArgs>
    Anime?: boolean | AgeRestriction$AnimeArgs<ExtArgs>
    _count?: boolean | AgeRestrictionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ageRestriction"]>

  export type AgeRestrictionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    site_ids?: boolean
  }, ExtArgs["result"]["ageRestriction"]>

  export type AgeRestrictionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    site_ids?: boolean
  }, ExtArgs["result"]["ageRestriction"]>

  export type AgeRestrictionSelectScalar = {
    id?: boolean
    label?: boolean
    site_ids?: boolean
  }

  export type AgeRestrictionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "label" | "site_ids", ExtArgs["result"]["ageRestriction"]>
  export type AgeRestrictionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Manga?: boolean | AgeRestriction$MangaArgs<ExtArgs>
    Anime?: boolean | AgeRestriction$AnimeArgs<ExtArgs>
    _count?: boolean | AgeRestrictionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AgeRestrictionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AgeRestrictionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AgeRestrictionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AgeRestriction"
    objects: {
      Manga: Prisma.$MangaPayload<ExtArgs>[]
      Anime: Prisma.$AnimePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      label: string
      site_ids: number[]
    }, ExtArgs["result"]["ageRestriction"]>
    composites: {}
  }

  type AgeRestrictionGetPayload<S extends boolean | null | undefined | AgeRestrictionDefaultArgs> = $Result.GetResult<Prisma.$AgeRestrictionPayload, S>

  type AgeRestrictionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AgeRestrictionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AgeRestrictionCountAggregateInputType | true
    }

  export interface AgeRestrictionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AgeRestriction'], meta: { name: 'AgeRestriction' } }
    /**
     * Find zero or one AgeRestriction that matches the filter.
     * @param {AgeRestrictionFindUniqueArgs} args - Arguments to find a AgeRestriction
     * @example
     * // Get one AgeRestriction
     * const ageRestriction = await prisma.ageRestriction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgeRestrictionFindUniqueArgs>(args: SelectSubset<T, AgeRestrictionFindUniqueArgs<ExtArgs>>): Prisma__AgeRestrictionClient<$Result.GetResult<Prisma.$AgeRestrictionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AgeRestriction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AgeRestrictionFindUniqueOrThrowArgs} args - Arguments to find a AgeRestriction
     * @example
     * // Get one AgeRestriction
     * const ageRestriction = await prisma.ageRestriction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgeRestrictionFindUniqueOrThrowArgs>(args: SelectSubset<T, AgeRestrictionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgeRestrictionClient<$Result.GetResult<Prisma.$AgeRestrictionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AgeRestriction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgeRestrictionFindFirstArgs} args - Arguments to find a AgeRestriction
     * @example
     * // Get one AgeRestriction
     * const ageRestriction = await prisma.ageRestriction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgeRestrictionFindFirstArgs>(args?: SelectSubset<T, AgeRestrictionFindFirstArgs<ExtArgs>>): Prisma__AgeRestrictionClient<$Result.GetResult<Prisma.$AgeRestrictionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AgeRestriction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgeRestrictionFindFirstOrThrowArgs} args - Arguments to find a AgeRestriction
     * @example
     * // Get one AgeRestriction
     * const ageRestriction = await prisma.ageRestriction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgeRestrictionFindFirstOrThrowArgs>(args?: SelectSubset<T, AgeRestrictionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgeRestrictionClient<$Result.GetResult<Prisma.$AgeRestrictionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AgeRestrictions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgeRestrictionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AgeRestrictions
     * const ageRestrictions = await prisma.ageRestriction.findMany()
     * 
     * // Get first 10 AgeRestrictions
     * const ageRestrictions = await prisma.ageRestriction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ageRestrictionWithIdOnly = await prisma.ageRestriction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgeRestrictionFindManyArgs>(args?: SelectSubset<T, AgeRestrictionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgeRestrictionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AgeRestriction.
     * @param {AgeRestrictionCreateArgs} args - Arguments to create a AgeRestriction.
     * @example
     * // Create one AgeRestriction
     * const AgeRestriction = await prisma.ageRestriction.create({
     *   data: {
     *     // ... data to create a AgeRestriction
     *   }
     * })
     * 
     */
    create<T extends AgeRestrictionCreateArgs>(args: SelectSubset<T, AgeRestrictionCreateArgs<ExtArgs>>): Prisma__AgeRestrictionClient<$Result.GetResult<Prisma.$AgeRestrictionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AgeRestrictions.
     * @param {AgeRestrictionCreateManyArgs} args - Arguments to create many AgeRestrictions.
     * @example
     * // Create many AgeRestrictions
     * const ageRestriction = await prisma.ageRestriction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgeRestrictionCreateManyArgs>(args?: SelectSubset<T, AgeRestrictionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AgeRestrictions and returns the data saved in the database.
     * @param {AgeRestrictionCreateManyAndReturnArgs} args - Arguments to create many AgeRestrictions.
     * @example
     * // Create many AgeRestrictions
     * const ageRestriction = await prisma.ageRestriction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AgeRestrictions and only return the `id`
     * const ageRestrictionWithIdOnly = await prisma.ageRestriction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AgeRestrictionCreateManyAndReturnArgs>(args?: SelectSubset<T, AgeRestrictionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgeRestrictionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AgeRestriction.
     * @param {AgeRestrictionDeleteArgs} args - Arguments to delete one AgeRestriction.
     * @example
     * // Delete one AgeRestriction
     * const AgeRestriction = await prisma.ageRestriction.delete({
     *   where: {
     *     // ... filter to delete one AgeRestriction
     *   }
     * })
     * 
     */
    delete<T extends AgeRestrictionDeleteArgs>(args: SelectSubset<T, AgeRestrictionDeleteArgs<ExtArgs>>): Prisma__AgeRestrictionClient<$Result.GetResult<Prisma.$AgeRestrictionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AgeRestriction.
     * @param {AgeRestrictionUpdateArgs} args - Arguments to update one AgeRestriction.
     * @example
     * // Update one AgeRestriction
     * const ageRestriction = await prisma.ageRestriction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgeRestrictionUpdateArgs>(args: SelectSubset<T, AgeRestrictionUpdateArgs<ExtArgs>>): Prisma__AgeRestrictionClient<$Result.GetResult<Prisma.$AgeRestrictionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AgeRestrictions.
     * @param {AgeRestrictionDeleteManyArgs} args - Arguments to filter AgeRestrictions to delete.
     * @example
     * // Delete a few AgeRestrictions
     * const { count } = await prisma.ageRestriction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgeRestrictionDeleteManyArgs>(args?: SelectSubset<T, AgeRestrictionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgeRestrictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgeRestrictionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AgeRestrictions
     * const ageRestriction = await prisma.ageRestriction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgeRestrictionUpdateManyArgs>(args: SelectSubset<T, AgeRestrictionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgeRestrictions and returns the data updated in the database.
     * @param {AgeRestrictionUpdateManyAndReturnArgs} args - Arguments to update many AgeRestrictions.
     * @example
     * // Update many AgeRestrictions
     * const ageRestriction = await prisma.ageRestriction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AgeRestrictions and only return the `id`
     * const ageRestrictionWithIdOnly = await prisma.ageRestriction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AgeRestrictionUpdateManyAndReturnArgs>(args: SelectSubset<T, AgeRestrictionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgeRestrictionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AgeRestriction.
     * @param {AgeRestrictionUpsertArgs} args - Arguments to update or create a AgeRestriction.
     * @example
     * // Update or create a AgeRestriction
     * const ageRestriction = await prisma.ageRestriction.upsert({
     *   create: {
     *     // ... data to create a AgeRestriction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AgeRestriction we want to update
     *   }
     * })
     */
    upsert<T extends AgeRestrictionUpsertArgs>(args: SelectSubset<T, AgeRestrictionUpsertArgs<ExtArgs>>): Prisma__AgeRestrictionClient<$Result.GetResult<Prisma.$AgeRestrictionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AgeRestrictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgeRestrictionCountArgs} args - Arguments to filter AgeRestrictions to count.
     * @example
     * // Count the number of AgeRestrictions
     * const count = await prisma.ageRestriction.count({
     *   where: {
     *     // ... the filter for the AgeRestrictions we want to count
     *   }
     * })
    **/
    count<T extends AgeRestrictionCountArgs>(
      args?: Subset<T, AgeRestrictionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgeRestrictionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AgeRestriction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgeRestrictionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgeRestrictionAggregateArgs>(args: Subset<T, AgeRestrictionAggregateArgs>): Prisma.PrismaPromise<GetAgeRestrictionAggregateType<T>>

    /**
     * Group by AgeRestriction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgeRestrictionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgeRestrictionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgeRestrictionGroupByArgs['orderBy'] }
        : { orderBy?: AgeRestrictionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgeRestrictionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgeRestrictionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AgeRestriction model
   */
  readonly fields: AgeRestrictionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AgeRestriction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgeRestrictionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Manga<T extends AgeRestriction$MangaArgs<ExtArgs> = {}>(args?: Subset<T, AgeRestriction$MangaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Anime<T extends AgeRestriction$AnimeArgs<ExtArgs> = {}>(args?: Subset<T, AgeRestriction$AnimeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AgeRestriction model
   */
  interface AgeRestrictionFieldRefs {
    readonly id: FieldRef<"AgeRestriction", 'Int'>
    readonly label: FieldRef<"AgeRestriction", 'String'>
    readonly site_ids: FieldRef<"AgeRestriction", 'Int[]'>
  }
    

  // Custom InputTypes
  /**
   * AgeRestriction findUnique
   */
  export type AgeRestrictionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgeRestriction
     */
    select?: AgeRestrictionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgeRestriction
     */
    omit?: AgeRestrictionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgeRestrictionInclude<ExtArgs> | null
    /**
     * Filter, which AgeRestriction to fetch.
     */
    where: AgeRestrictionWhereUniqueInput
  }

  /**
   * AgeRestriction findUniqueOrThrow
   */
  export type AgeRestrictionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgeRestriction
     */
    select?: AgeRestrictionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgeRestriction
     */
    omit?: AgeRestrictionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgeRestrictionInclude<ExtArgs> | null
    /**
     * Filter, which AgeRestriction to fetch.
     */
    where: AgeRestrictionWhereUniqueInput
  }

  /**
   * AgeRestriction findFirst
   */
  export type AgeRestrictionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgeRestriction
     */
    select?: AgeRestrictionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgeRestriction
     */
    omit?: AgeRestrictionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgeRestrictionInclude<ExtArgs> | null
    /**
     * Filter, which AgeRestriction to fetch.
     */
    where?: AgeRestrictionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgeRestrictions to fetch.
     */
    orderBy?: AgeRestrictionOrderByWithRelationInput | AgeRestrictionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgeRestrictions.
     */
    cursor?: AgeRestrictionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgeRestrictions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgeRestrictions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgeRestrictions.
     */
    distinct?: AgeRestrictionScalarFieldEnum | AgeRestrictionScalarFieldEnum[]
  }

  /**
   * AgeRestriction findFirstOrThrow
   */
  export type AgeRestrictionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgeRestriction
     */
    select?: AgeRestrictionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgeRestriction
     */
    omit?: AgeRestrictionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgeRestrictionInclude<ExtArgs> | null
    /**
     * Filter, which AgeRestriction to fetch.
     */
    where?: AgeRestrictionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgeRestrictions to fetch.
     */
    orderBy?: AgeRestrictionOrderByWithRelationInput | AgeRestrictionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgeRestrictions.
     */
    cursor?: AgeRestrictionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgeRestrictions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgeRestrictions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgeRestrictions.
     */
    distinct?: AgeRestrictionScalarFieldEnum | AgeRestrictionScalarFieldEnum[]
  }

  /**
   * AgeRestriction findMany
   */
  export type AgeRestrictionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgeRestriction
     */
    select?: AgeRestrictionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgeRestriction
     */
    omit?: AgeRestrictionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgeRestrictionInclude<ExtArgs> | null
    /**
     * Filter, which AgeRestrictions to fetch.
     */
    where?: AgeRestrictionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgeRestrictions to fetch.
     */
    orderBy?: AgeRestrictionOrderByWithRelationInput | AgeRestrictionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AgeRestrictions.
     */
    cursor?: AgeRestrictionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgeRestrictions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgeRestrictions.
     */
    skip?: number
    distinct?: AgeRestrictionScalarFieldEnum | AgeRestrictionScalarFieldEnum[]
  }

  /**
   * AgeRestriction create
   */
  export type AgeRestrictionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgeRestriction
     */
    select?: AgeRestrictionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgeRestriction
     */
    omit?: AgeRestrictionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgeRestrictionInclude<ExtArgs> | null
    /**
     * The data needed to create a AgeRestriction.
     */
    data: XOR<AgeRestrictionCreateInput, AgeRestrictionUncheckedCreateInput>
  }

  /**
   * AgeRestriction createMany
   */
  export type AgeRestrictionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AgeRestrictions.
     */
    data: AgeRestrictionCreateManyInput | AgeRestrictionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AgeRestriction createManyAndReturn
   */
  export type AgeRestrictionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgeRestriction
     */
    select?: AgeRestrictionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AgeRestriction
     */
    omit?: AgeRestrictionOmit<ExtArgs> | null
    /**
     * The data used to create many AgeRestrictions.
     */
    data: AgeRestrictionCreateManyInput | AgeRestrictionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AgeRestriction update
   */
  export type AgeRestrictionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgeRestriction
     */
    select?: AgeRestrictionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgeRestriction
     */
    omit?: AgeRestrictionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgeRestrictionInclude<ExtArgs> | null
    /**
     * The data needed to update a AgeRestriction.
     */
    data: XOR<AgeRestrictionUpdateInput, AgeRestrictionUncheckedUpdateInput>
    /**
     * Choose, which AgeRestriction to update.
     */
    where: AgeRestrictionWhereUniqueInput
  }

  /**
   * AgeRestriction updateMany
   */
  export type AgeRestrictionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AgeRestrictions.
     */
    data: XOR<AgeRestrictionUpdateManyMutationInput, AgeRestrictionUncheckedUpdateManyInput>
    /**
     * Filter which AgeRestrictions to update
     */
    where?: AgeRestrictionWhereInput
    /**
     * Limit how many AgeRestrictions to update.
     */
    limit?: number
  }

  /**
   * AgeRestriction updateManyAndReturn
   */
  export type AgeRestrictionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgeRestriction
     */
    select?: AgeRestrictionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AgeRestriction
     */
    omit?: AgeRestrictionOmit<ExtArgs> | null
    /**
     * The data used to update AgeRestrictions.
     */
    data: XOR<AgeRestrictionUpdateManyMutationInput, AgeRestrictionUncheckedUpdateManyInput>
    /**
     * Filter which AgeRestrictions to update
     */
    where?: AgeRestrictionWhereInput
    /**
     * Limit how many AgeRestrictions to update.
     */
    limit?: number
  }

  /**
   * AgeRestriction upsert
   */
  export type AgeRestrictionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgeRestriction
     */
    select?: AgeRestrictionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgeRestriction
     */
    omit?: AgeRestrictionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgeRestrictionInclude<ExtArgs> | null
    /**
     * The filter to search for the AgeRestriction to update in case it exists.
     */
    where: AgeRestrictionWhereUniqueInput
    /**
     * In case the AgeRestriction found by the `where` argument doesn't exist, create a new AgeRestriction with this data.
     */
    create: XOR<AgeRestrictionCreateInput, AgeRestrictionUncheckedCreateInput>
    /**
     * In case the AgeRestriction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgeRestrictionUpdateInput, AgeRestrictionUncheckedUpdateInput>
  }

  /**
   * AgeRestriction delete
   */
  export type AgeRestrictionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgeRestriction
     */
    select?: AgeRestrictionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgeRestriction
     */
    omit?: AgeRestrictionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgeRestrictionInclude<ExtArgs> | null
    /**
     * Filter which AgeRestriction to delete.
     */
    where: AgeRestrictionWhereUniqueInput
  }

  /**
   * AgeRestriction deleteMany
   */
  export type AgeRestrictionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgeRestrictions to delete
     */
    where?: AgeRestrictionWhereInput
    /**
     * Limit how many AgeRestrictions to delete.
     */
    limit?: number
  }

  /**
   * AgeRestriction.Manga
   */
  export type AgeRestriction$MangaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manga
     */
    select?: MangaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Manga
     */
    omit?: MangaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaInclude<ExtArgs> | null
    where?: MangaWhereInput
    orderBy?: MangaOrderByWithRelationInput | MangaOrderByWithRelationInput[]
    cursor?: MangaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MangaScalarFieldEnum | MangaScalarFieldEnum[]
  }

  /**
   * AgeRestriction.Anime
   */
  export type AgeRestriction$AnimeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    where?: AnimeWhereInput
    orderBy?: AnimeOrderByWithRelationInput | AnimeOrderByWithRelationInput[]
    cursor?: AnimeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimeScalarFieldEnum | AnimeScalarFieldEnum[]
  }

  /**
   * AgeRestriction without action
   */
  export type AgeRestrictionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgeRestriction
     */
    select?: AgeRestrictionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgeRestriction
     */
    omit?: AgeRestrictionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgeRestrictionInclude<ExtArgs> | null
  }


  /**
   * Model Genre
   */

  export type AggregateGenre = {
    _count: GenreCountAggregateOutputType | null
    _avg: GenreAvgAggregateOutputType | null
    _sum: GenreSumAggregateOutputType | null
    _min: GenreMinAggregateOutputType | null
    _max: GenreMaxAggregateOutputType | null
  }

  export type GenreAvgAggregateOutputType = {
    id: number | null
    site_ids: number | null
  }

  export type GenreSumAggregateOutputType = {
    id: number | null
    site_ids: number[]
  }

  export type GenreMinAggregateOutputType = {
    id: number | null
    adult: boolean | null
    name: string | null
  }

  export type GenreMaxAggregateOutputType = {
    id: number | null
    adult: boolean | null
    name: string | null
  }

  export type GenreCountAggregateOutputType = {
    id: number
    adult: number
    name: number
    site_ids: number
    _all: number
  }


  export type GenreAvgAggregateInputType = {
    id?: true
    site_ids?: true
  }

  export type GenreSumAggregateInputType = {
    id?: true
    site_ids?: true
  }

  export type GenreMinAggregateInputType = {
    id?: true
    adult?: true
    name?: true
  }

  export type GenreMaxAggregateInputType = {
    id?: true
    adult?: true
    name?: true
  }

  export type GenreCountAggregateInputType = {
    id?: true
    adult?: true
    name?: true
    site_ids?: true
    _all?: true
  }

  export type GenreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Genre to aggregate.
     */
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     */
    orderBy?: GenreOrderByWithRelationInput | GenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Genres
    **/
    _count?: true | GenreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GenreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GenreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GenreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GenreMaxAggregateInputType
  }

  export type GetGenreAggregateType<T extends GenreAggregateArgs> = {
        [P in keyof T & keyof AggregateGenre]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGenre[P]>
      : GetScalarType<T[P], AggregateGenre[P]>
  }




  export type GenreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GenreWhereInput
    orderBy?: GenreOrderByWithAggregationInput | GenreOrderByWithAggregationInput[]
    by: GenreScalarFieldEnum[] | GenreScalarFieldEnum
    having?: GenreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GenreCountAggregateInputType | true
    _avg?: GenreAvgAggregateInputType
    _sum?: GenreSumAggregateInputType
    _min?: GenreMinAggregateInputType
    _max?: GenreMaxAggregateInputType
  }

  export type GenreGroupByOutputType = {
    id: number
    adult: boolean
    name: string
    site_ids: number[]
    _count: GenreCountAggregateOutputType | null
    _avg: GenreAvgAggregateOutputType | null
    _sum: GenreSumAggregateOutputType | null
    _min: GenreMinAggregateOutputType | null
    _max: GenreMaxAggregateOutputType | null
  }

  type GetGenreGroupByPayload<T extends GenreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GenreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GenreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GenreGroupByOutputType[P]>
            : GetScalarType<T[P], GenreGroupByOutputType[P]>
        }
      >
    >


  export type GenreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adult?: boolean
    name?: boolean
    site_ids?: boolean
    Manga?: boolean | Genre$MangaArgs<ExtArgs>
    Anime?: boolean | Genre$AnimeArgs<ExtArgs>
    _count?: boolean | GenreCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["genre"]>

  export type GenreSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adult?: boolean
    name?: boolean
    site_ids?: boolean
  }, ExtArgs["result"]["genre"]>

  export type GenreSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adult?: boolean
    name?: boolean
    site_ids?: boolean
  }, ExtArgs["result"]["genre"]>

  export type GenreSelectScalar = {
    id?: boolean
    adult?: boolean
    name?: boolean
    site_ids?: boolean
  }

  export type GenreOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "adult" | "name" | "site_ids", ExtArgs["result"]["genre"]>
  export type GenreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Manga?: boolean | Genre$MangaArgs<ExtArgs>
    Anime?: boolean | Genre$AnimeArgs<ExtArgs>
    _count?: boolean | GenreCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GenreIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type GenreIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GenrePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Genre"
    objects: {
      Manga: Prisma.$MangaPayload<ExtArgs>[]
      Anime: Prisma.$AnimePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      adult: boolean
      name: string
      site_ids: number[]
    }, ExtArgs["result"]["genre"]>
    composites: {}
  }

  type GenreGetPayload<S extends boolean | null | undefined | GenreDefaultArgs> = $Result.GetResult<Prisma.$GenrePayload, S>

  type GenreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GenreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GenreCountAggregateInputType | true
    }

  export interface GenreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Genre'], meta: { name: 'Genre' } }
    /**
     * Find zero or one Genre that matches the filter.
     * @param {GenreFindUniqueArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GenreFindUniqueArgs>(args: SelectSubset<T, GenreFindUniqueArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Genre that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GenreFindUniqueOrThrowArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GenreFindUniqueOrThrowArgs>(args: SelectSubset<T, GenreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Genre that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreFindFirstArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GenreFindFirstArgs>(args?: SelectSubset<T, GenreFindFirstArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Genre that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreFindFirstOrThrowArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GenreFindFirstOrThrowArgs>(args?: SelectSubset<T, GenreFindFirstOrThrowArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Genres that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Genres
     * const genres = await prisma.genre.findMany()
     * 
     * // Get first 10 Genres
     * const genres = await prisma.genre.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const genreWithIdOnly = await prisma.genre.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GenreFindManyArgs>(args?: SelectSubset<T, GenreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Genre.
     * @param {GenreCreateArgs} args - Arguments to create a Genre.
     * @example
     * // Create one Genre
     * const Genre = await prisma.genre.create({
     *   data: {
     *     // ... data to create a Genre
     *   }
     * })
     * 
     */
    create<T extends GenreCreateArgs>(args: SelectSubset<T, GenreCreateArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Genres.
     * @param {GenreCreateManyArgs} args - Arguments to create many Genres.
     * @example
     * // Create many Genres
     * const genre = await prisma.genre.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GenreCreateManyArgs>(args?: SelectSubset<T, GenreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Genres and returns the data saved in the database.
     * @param {GenreCreateManyAndReturnArgs} args - Arguments to create many Genres.
     * @example
     * // Create many Genres
     * const genre = await prisma.genre.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Genres and only return the `id`
     * const genreWithIdOnly = await prisma.genre.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GenreCreateManyAndReturnArgs>(args?: SelectSubset<T, GenreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Genre.
     * @param {GenreDeleteArgs} args - Arguments to delete one Genre.
     * @example
     * // Delete one Genre
     * const Genre = await prisma.genre.delete({
     *   where: {
     *     // ... filter to delete one Genre
     *   }
     * })
     * 
     */
    delete<T extends GenreDeleteArgs>(args: SelectSubset<T, GenreDeleteArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Genre.
     * @param {GenreUpdateArgs} args - Arguments to update one Genre.
     * @example
     * // Update one Genre
     * const genre = await prisma.genre.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GenreUpdateArgs>(args: SelectSubset<T, GenreUpdateArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Genres.
     * @param {GenreDeleteManyArgs} args - Arguments to filter Genres to delete.
     * @example
     * // Delete a few Genres
     * const { count } = await prisma.genre.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GenreDeleteManyArgs>(args?: SelectSubset<T, GenreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Genres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Genres
     * const genre = await prisma.genre.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GenreUpdateManyArgs>(args: SelectSubset<T, GenreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Genres and returns the data updated in the database.
     * @param {GenreUpdateManyAndReturnArgs} args - Arguments to update many Genres.
     * @example
     * // Update many Genres
     * const genre = await prisma.genre.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Genres and only return the `id`
     * const genreWithIdOnly = await prisma.genre.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GenreUpdateManyAndReturnArgs>(args: SelectSubset<T, GenreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Genre.
     * @param {GenreUpsertArgs} args - Arguments to update or create a Genre.
     * @example
     * // Update or create a Genre
     * const genre = await prisma.genre.upsert({
     *   create: {
     *     // ... data to create a Genre
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Genre we want to update
     *   }
     * })
     */
    upsert<T extends GenreUpsertArgs>(args: SelectSubset<T, GenreUpsertArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Genres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreCountArgs} args - Arguments to filter Genres to count.
     * @example
     * // Count the number of Genres
     * const count = await prisma.genre.count({
     *   where: {
     *     // ... the filter for the Genres we want to count
     *   }
     * })
    **/
    count<T extends GenreCountArgs>(
      args?: Subset<T, GenreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GenreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Genre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GenreAggregateArgs>(args: Subset<T, GenreAggregateArgs>): Prisma.PrismaPromise<GetGenreAggregateType<T>>

    /**
     * Group by Genre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GenreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GenreGroupByArgs['orderBy'] }
        : { orderBy?: GenreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GenreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGenreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Genre model
   */
  readonly fields: GenreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Genre.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GenreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Manga<T extends Genre$MangaArgs<ExtArgs> = {}>(args?: Subset<T, Genre$MangaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Anime<T extends Genre$AnimeArgs<ExtArgs> = {}>(args?: Subset<T, Genre$AnimeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Genre model
   */
  interface GenreFieldRefs {
    readonly id: FieldRef<"Genre", 'Int'>
    readonly adult: FieldRef<"Genre", 'Boolean'>
    readonly name: FieldRef<"Genre", 'String'>
    readonly site_ids: FieldRef<"Genre", 'Int[]'>
  }
    

  // Custom InputTypes
  /**
   * Genre findUnique
   */
  export type GenreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * Filter, which Genre to fetch.
     */
    where: GenreWhereUniqueInput
  }

  /**
   * Genre findUniqueOrThrow
   */
  export type GenreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * Filter, which Genre to fetch.
     */
    where: GenreWhereUniqueInput
  }

  /**
   * Genre findFirst
   */
  export type GenreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * Filter, which Genre to fetch.
     */
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     */
    orderBy?: GenreOrderByWithRelationInput | GenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Genres.
     */
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Genres.
     */
    distinct?: GenreScalarFieldEnum | GenreScalarFieldEnum[]
  }

  /**
   * Genre findFirstOrThrow
   */
  export type GenreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * Filter, which Genre to fetch.
     */
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     */
    orderBy?: GenreOrderByWithRelationInput | GenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Genres.
     */
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Genres.
     */
    distinct?: GenreScalarFieldEnum | GenreScalarFieldEnum[]
  }

  /**
   * Genre findMany
   */
  export type GenreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * Filter, which Genres to fetch.
     */
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     */
    orderBy?: GenreOrderByWithRelationInput | GenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Genres.
     */
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     */
    skip?: number
    distinct?: GenreScalarFieldEnum | GenreScalarFieldEnum[]
  }

  /**
   * Genre create
   */
  export type GenreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * The data needed to create a Genre.
     */
    data: XOR<GenreCreateInput, GenreUncheckedCreateInput>
  }

  /**
   * Genre createMany
   */
  export type GenreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Genres.
     */
    data: GenreCreateManyInput | GenreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Genre createManyAndReturn
   */
  export type GenreCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * The data used to create many Genres.
     */
    data: GenreCreateManyInput | GenreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Genre update
   */
  export type GenreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * The data needed to update a Genre.
     */
    data: XOR<GenreUpdateInput, GenreUncheckedUpdateInput>
    /**
     * Choose, which Genre to update.
     */
    where: GenreWhereUniqueInput
  }

  /**
   * Genre updateMany
   */
  export type GenreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Genres.
     */
    data: XOR<GenreUpdateManyMutationInput, GenreUncheckedUpdateManyInput>
    /**
     * Filter which Genres to update
     */
    where?: GenreWhereInput
    /**
     * Limit how many Genres to update.
     */
    limit?: number
  }

  /**
   * Genre updateManyAndReturn
   */
  export type GenreUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * The data used to update Genres.
     */
    data: XOR<GenreUpdateManyMutationInput, GenreUncheckedUpdateManyInput>
    /**
     * Filter which Genres to update
     */
    where?: GenreWhereInput
    /**
     * Limit how many Genres to update.
     */
    limit?: number
  }

  /**
   * Genre upsert
   */
  export type GenreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * The filter to search for the Genre to update in case it exists.
     */
    where: GenreWhereUniqueInput
    /**
     * In case the Genre found by the `where` argument doesn't exist, create a new Genre with this data.
     */
    create: XOR<GenreCreateInput, GenreUncheckedCreateInput>
    /**
     * In case the Genre was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GenreUpdateInput, GenreUncheckedUpdateInput>
  }

  /**
   * Genre delete
   */
  export type GenreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * Filter which Genre to delete.
     */
    where: GenreWhereUniqueInput
  }

  /**
   * Genre deleteMany
   */
  export type GenreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Genres to delete
     */
    where?: GenreWhereInput
    /**
     * Limit how many Genres to delete.
     */
    limit?: number
  }

  /**
   * Genre.Manga
   */
  export type Genre$MangaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manga
     */
    select?: MangaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Manga
     */
    omit?: MangaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaInclude<ExtArgs> | null
    where?: MangaWhereInput
    orderBy?: MangaOrderByWithRelationInput | MangaOrderByWithRelationInput[]
    cursor?: MangaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MangaScalarFieldEnum | MangaScalarFieldEnum[]
  }

  /**
   * Genre.Anime
   */
  export type Genre$AnimeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    where?: AnimeWhereInput
    orderBy?: AnimeOrderByWithRelationInput | AnimeOrderByWithRelationInput[]
    cursor?: AnimeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimeScalarFieldEnum | AnimeScalarFieldEnum[]
  }

  /**
   * Genre without action
   */
  export type GenreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
  }


  /**
   * Model Related
   */

  export type AggregateRelated = {
    _count: RelatedCountAggregateOutputType | null
    _avg: RelatedAvgAggregateOutputType | null
    _sum: RelatedSumAggregateOutputType | null
    _min: RelatedMinAggregateOutputType | null
    _max: RelatedMaxAggregateOutputType | null
  }

  export type RelatedAvgAggregateOutputType = {
    id: number | null
  }

  export type RelatedSumAggregateOutputType = {
    id: number | null
  }

  export type RelatedMinAggregateOutputType = {
    id: number | null
    reason: $Enums.RelatedReason | null
    anime_slug: string | null
    manga_slug: string | null
    relatedAnimeSlug: string | null
    relatedMangaSlug: string | null
  }

  export type RelatedMaxAggregateOutputType = {
    id: number | null
    reason: $Enums.RelatedReason | null
    anime_slug: string | null
    manga_slug: string | null
    relatedAnimeSlug: string | null
    relatedMangaSlug: string | null
  }

  export type RelatedCountAggregateOutputType = {
    id: number
    reason: number
    anime_slug: number
    manga_slug: number
    relatedAnimeSlug: number
    relatedMangaSlug: number
    _all: number
  }


  export type RelatedAvgAggregateInputType = {
    id?: true
  }

  export type RelatedSumAggregateInputType = {
    id?: true
  }

  export type RelatedMinAggregateInputType = {
    id?: true
    reason?: true
    anime_slug?: true
    manga_slug?: true
    relatedAnimeSlug?: true
    relatedMangaSlug?: true
  }

  export type RelatedMaxAggregateInputType = {
    id?: true
    reason?: true
    anime_slug?: true
    manga_slug?: true
    relatedAnimeSlug?: true
    relatedMangaSlug?: true
  }

  export type RelatedCountAggregateInputType = {
    id?: true
    reason?: true
    anime_slug?: true
    manga_slug?: true
    relatedAnimeSlug?: true
    relatedMangaSlug?: true
    _all?: true
  }

  export type RelatedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Related to aggregate.
     */
    where?: RelatedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Relateds to fetch.
     */
    orderBy?: RelatedOrderByWithRelationInput | RelatedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RelatedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Relateds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Relateds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Relateds
    **/
    _count?: true | RelatedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RelatedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RelatedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RelatedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RelatedMaxAggregateInputType
  }

  export type GetRelatedAggregateType<T extends RelatedAggregateArgs> = {
        [P in keyof T & keyof AggregateRelated]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRelated[P]>
      : GetScalarType<T[P], AggregateRelated[P]>
  }




  export type RelatedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelatedWhereInput
    orderBy?: RelatedOrderByWithAggregationInput | RelatedOrderByWithAggregationInput[]
    by: RelatedScalarFieldEnum[] | RelatedScalarFieldEnum
    having?: RelatedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RelatedCountAggregateInputType | true
    _avg?: RelatedAvgAggregateInputType
    _sum?: RelatedSumAggregateInputType
    _min?: RelatedMinAggregateInputType
    _max?: RelatedMaxAggregateInputType
  }

  export type RelatedGroupByOutputType = {
    id: number
    reason: $Enums.RelatedReason
    anime_slug: string | null
    manga_slug: string | null
    relatedAnimeSlug: string | null
    relatedMangaSlug: string | null
    _count: RelatedCountAggregateOutputType | null
    _avg: RelatedAvgAggregateOutputType | null
    _sum: RelatedSumAggregateOutputType | null
    _min: RelatedMinAggregateOutputType | null
    _max: RelatedMaxAggregateOutputType | null
  }

  type GetRelatedGroupByPayload<T extends RelatedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RelatedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RelatedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RelatedGroupByOutputType[P]>
            : GetScalarType<T[P], RelatedGroupByOutputType[P]>
        }
      >
    >


  export type RelatedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reason?: boolean
    anime_slug?: boolean
    manga_slug?: boolean
    relatedAnimeSlug?: boolean
    relatedMangaSlug?: boolean
    anime?: boolean | Related$animeArgs<ExtArgs>
    manga?: boolean | Related$mangaArgs<ExtArgs>
    relatedAnime?: boolean | Related$relatedAnimeArgs<ExtArgs>
    relatedManga?: boolean | Related$relatedMangaArgs<ExtArgs>
  }, ExtArgs["result"]["related"]>

  export type RelatedSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reason?: boolean
    anime_slug?: boolean
    manga_slug?: boolean
    relatedAnimeSlug?: boolean
    relatedMangaSlug?: boolean
    anime?: boolean | Related$animeArgs<ExtArgs>
    manga?: boolean | Related$mangaArgs<ExtArgs>
    relatedAnime?: boolean | Related$relatedAnimeArgs<ExtArgs>
    relatedManga?: boolean | Related$relatedMangaArgs<ExtArgs>
  }, ExtArgs["result"]["related"]>

  export type RelatedSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reason?: boolean
    anime_slug?: boolean
    manga_slug?: boolean
    relatedAnimeSlug?: boolean
    relatedMangaSlug?: boolean
    anime?: boolean | Related$animeArgs<ExtArgs>
    manga?: boolean | Related$mangaArgs<ExtArgs>
    relatedAnime?: boolean | Related$relatedAnimeArgs<ExtArgs>
    relatedManga?: boolean | Related$relatedMangaArgs<ExtArgs>
  }, ExtArgs["result"]["related"]>

  export type RelatedSelectScalar = {
    id?: boolean
    reason?: boolean
    anime_slug?: boolean
    manga_slug?: boolean
    relatedAnimeSlug?: boolean
    relatedMangaSlug?: boolean
  }

  export type RelatedOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "reason" | "anime_slug" | "manga_slug" | "relatedAnimeSlug" | "relatedMangaSlug", ExtArgs["result"]["related"]>
  export type RelatedInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | Related$animeArgs<ExtArgs>
    manga?: boolean | Related$mangaArgs<ExtArgs>
    relatedAnime?: boolean | Related$relatedAnimeArgs<ExtArgs>
    relatedManga?: boolean | Related$relatedMangaArgs<ExtArgs>
  }
  export type RelatedIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | Related$animeArgs<ExtArgs>
    manga?: boolean | Related$mangaArgs<ExtArgs>
    relatedAnime?: boolean | Related$relatedAnimeArgs<ExtArgs>
    relatedManga?: boolean | Related$relatedMangaArgs<ExtArgs>
  }
  export type RelatedIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | Related$animeArgs<ExtArgs>
    manga?: boolean | Related$mangaArgs<ExtArgs>
    relatedAnime?: boolean | Related$relatedAnimeArgs<ExtArgs>
    relatedManga?: boolean | Related$relatedMangaArgs<ExtArgs>
  }

  export type $RelatedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Related"
    objects: {
      anime: Prisma.$AnimePayload<ExtArgs> | null
      manga: Prisma.$MangaPayload<ExtArgs> | null
      relatedAnime: Prisma.$AnimePayload<ExtArgs> | null
      relatedManga: Prisma.$MangaPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      reason: $Enums.RelatedReason
      anime_slug: string | null
      manga_slug: string | null
      relatedAnimeSlug: string | null
      relatedMangaSlug: string | null
    }, ExtArgs["result"]["related"]>
    composites: {}
  }

  type RelatedGetPayload<S extends boolean | null | undefined | RelatedDefaultArgs> = $Result.GetResult<Prisma.$RelatedPayload, S>

  type RelatedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RelatedFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RelatedCountAggregateInputType | true
    }

  export interface RelatedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Related'], meta: { name: 'Related' } }
    /**
     * Find zero or one Related that matches the filter.
     * @param {RelatedFindUniqueArgs} args - Arguments to find a Related
     * @example
     * // Get one Related
     * const related = await prisma.related.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RelatedFindUniqueArgs>(args: SelectSubset<T, RelatedFindUniqueArgs<ExtArgs>>): Prisma__RelatedClient<$Result.GetResult<Prisma.$RelatedPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Related that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RelatedFindUniqueOrThrowArgs} args - Arguments to find a Related
     * @example
     * // Get one Related
     * const related = await prisma.related.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RelatedFindUniqueOrThrowArgs>(args: SelectSubset<T, RelatedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RelatedClient<$Result.GetResult<Prisma.$RelatedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Related that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedFindFirstArgs} args - Arguments to find a Related
     * @example
     * // Get one Related
     * const related = await prisma.related.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RelatedFindFirstArgs>(args?: SelectSubset<T, RelatedFindFirstArgs<ExtArgs>>): Prisma__RelatedClient<$Result.GetResult<Prisma.$RelatedPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Related that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedFindFirstOrThrowArgs} args - Arguments to find a Related
     * @example
     * // Get one Related
     * const related = await prisma.related.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RelatedFindFirstOrThrowArgs>(args?: SelectSubset<T, RelatedFindFirstOrThrowArgs<ExtArgs>>): Prisma__RelatedClient<$Result.GetResult<Prisma.$RelatedPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Relateds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Relateds
     * const relateds = await prisma.related.findMany()
     * 
     * // Get first 10 Relateds
     * const relateds = await prisma.related.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const relatedWithIdOnly = await prisma.related.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RelatedFindManyArgs>(args?: SelectSubset<T, RelatedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Related.
     * @param {RelatedCreateArgs} args - Arguments to create a Related.
     * @example
     * // Create one Related
     * const Related = await prisma.related.create({
     *   data: {
     *     // ... data to create a Related
     *   }
     * })
     * 
     */
    create<T extends RelatedCreateArgs>(args: SelectSubset<T, RelatedCreateArgs<ExtArgs>>): Prisma__RelatedClient<$Result.GetResult<Prisma.$RelatedPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Relateds.
     * @param {RelatedCreateManyArgs} args - Arguments to create many Relateds.
     * @example
     * // Create many Relateds
     * const related = await prisma.related.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RelatedCreateManyArgs>(args?: SelectSubset<T, RelatedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Relateds and returns the data saved in the database.
     * @param {RelatedCreateManyAndReturnArgs} args - Arguments to create many Relateds.
     * @example
     * // Create many Relateds
     * const related = await prisma.related.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Relateds and only return the `id`
     * const relatedWithIdOnly = await prisma.related.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RelatedCreateManyAndReturnArgs>(args?: SelectSubset<T, RelatedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatedPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Related.
     * @param {RelatedDeleteArgs} args - Arguments to delete one Related.
     * @example
     * // Delete one Related
     * const Related = await prisma.related.delete({
     *   where: {
     *     // ... filter to delete one Related
     *   }
     * })
     * 
     */
    delete<T extends RelatedDeleteArgs>(args: SelectSubset<T, RelatedDeleteArgs<ExtArgs>>): Prisma__RelatedClient<$Result.GetResult<Prisma.$RelatedPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Related.
     * @param {RelatedUpdateArgs} args - Arguments to update one Related.
     * @example
     * // Update one Related
     * const related = await prisma.related.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RelatedUpdateArgs>(args: SelectSubset<T, RelatedUpdateArgs<ExtArgs>>): Prisma__RelatedClient<$Result.GetResult<Prisma.$RelatedPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Relateds.
     * @param {RelatedDeleteManyArgs} args - Arguments to filter Relateds to delete.
     * @example
     * // Delete a few Relateds
     * const { count } = await prisma.related.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RelatedDeleteManyArgs>(args?: SelectSubset<T, RelatedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Relateds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Relateds
     * const related = await prisma.related.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RelatedUpdateManyArgs>(args: SelectSubset<T, RelatedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Relateds and returns the data updated in the database.
     * @param {RelatedUpdateManyAndReturnArgs} args - Arguments to update many Relateds.
     * @example
     * // Update many Relateds
     * const related = await prisma.related.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Relateds and only return the `id`
     * const relatedWithIdOnly = await prisma.related.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RelatedUpdateManyAndReturnArgs>(args: SelectSubset<T, RelatedUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatedPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Related.
     * @param {RelatedUpsertArgs} args - Arguments to update or create a Related.
     * @example
     * // Update or create a Related
     * const related = await prisma.related.upsert({
     *   create: {
     *     // ... data to create a Related
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Related we want to update
     *   }
     * })
     */
    upsert<T extends RelatedUpsertArgs>(args: SelectSubset<T, RelatedUpsertArgs<ExtArgs>>): Prisma__RelatedClient<$Result.GetResult<Prisma.$RelatedPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Relateds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedCountArgs} args - Arguments to filter Relateds to count.
     * @example
     * // Count the number of Relateds
     * const count = await prisma.related.count({
     *   where: {
     *     // ... the filter for the Relateds we want to count
     *   }
     * })
    **/
    count<T extends RelatedCountArgs>(
      args?: Subset<T, RelatedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RelatedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Related.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RelatedAggregateArgs>(args: Subset<T, RelatedAggregateArgs>): Prisma.PrismaPromise<GetRelatedAggregateType<T>>

    /**
     * Group by Related.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RelatedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RelatedGroupByArgs['orderBy'] }
        : { orderBy?: RelatedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RelatedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRelatedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Related model
   */
  readonly fields: RelatedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Related.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RelatedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    anime<T extends Related$animeArgs<ExtArgs> = {}>(args?: Subset<T, Related$animeArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    manga<T extends Related$mangaArgs<ExtArgs> = {}>(args?: Subset<T, Related$mangaArgs<ExtArgs>>): Prisma__MangaClient<$Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    relatedAnime<T extends Related$relatedAnimeArgs<ExtArgs> = {}>(args?: Subset<T, Related$relatedAnimeArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    relatedManga<T extends Related$relatedMangaArgs<ExtArgs> = {}>(args?: Subset<T, Related$relatedMangaArgs<ExtArgs>>): Prisma__MangaClient<$Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Related model
   */
  interface RelatedFieldRefs {
    readonly id: FieldRef<"Related", 'Int'>
    readonly reason: FieldRef<"Related", 'RelatedReason'>
    readonly anime_slug: FieldRef<"Related", 'String'>
    readonly manga_slug: FieldRef<"Related", 'String'>
    readonly relatedAnimeSlug: FieldRef<"Related", 'String'>
    readonly relatedMangaSlug: FieldRef<"Related", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Related findUnique
   */
  export type RelatedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Related
     */
    select?: RelatedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Related
     */
    omit?: RelatedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedInclude<ExtArgs> | null
    /**
     * Filter, which Related to fetch.
     */
    where: RelatedWhereUniqueInput
  }

  /**
   * Related findUniqueOrThrow
   */
  export type RelatedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Related
     */
    select?: RelatedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Related
     */
    omit?: RelatedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedInclude<ExtArgs> | null
    /**
     * Filter, which Related to fetch.
     */
    where: RelatedWhereUniqueInput
  }

  /**
   * Related findFirst
   */
  export type RelatedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Related
     */
    select?: RelatedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Related
     */
    omit?: RelatedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedInclude<ExtArgs> | null
    /**
     * Filter, which Related to fetch.
     */
    where?: RelatedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Relateds to fetch.
     */
    orderBy?: RelatedOrderByWithRelationInput | RelatedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Relateds.
     */
    cursor?: RelatedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Relateds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Relateds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Relateds.
     */
    distinct?: RelatedScalarFieldEnum | RelatedScalarFieldEnum[]
  }

  /**
   * Related findFirstOrThrow
   */
  export type RelatedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Related
     */
    select?: RelatedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Related
     */
    omit?: RelatedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedInclude<ExtArgs> | null
    /**
     * Filter, which Related to fetch.
     */
    where?: RelatedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Relateds to fetch.
     */
    orderBy?: RelatedOrderByWithRelationInput | RelatedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Relateds.
     */
    cursor?: RelatedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Relateds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Relateds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Relateds.
     */
    distinct?: RelatedScalarFieldEnum | RelatedScalarFieldEnum[]
  }

  /**
   * Related findMany
   */
  export type RelatedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Related
     */
    select?: RelatedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Related
     */
    omit?: RelatedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedInclude<ExtArgs> | null
    /**
     * Filter, which Relateds to fetch.
     */
    where?: RelatedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Relateds to fetch.
     */
    orderBy?: RelatedOrderByWithRelationInput | RelatedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Relateds.
     */
    cursor?: RelatedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Relateds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Relateds.
     */
    skip?: number
    distinct?: RelatedScalarFieldEnum | RelatedScalarFieldEnum[]
  }

  /**
   * Related create
   */
  export type RelatedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Related
     */
    select?: RelatedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Related
     */
    omit?: RelatedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedInclude<ExtArgs> | null
    /**
     * The data needed to create a Related.
     */
    data: XOR<RelatedCreateInput, RelatedUncheckedCreateInput>
  }

  /**
   * Related createMany
   */
  export type RelatedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Relateds.
     */
    data: RelatedCreateManyInput | RelatedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Related createManyAndReturn
   */
  export type RelatedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Related
     */
    select?: RelatedSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Related
     */
    omit?: RelatedOmit<ExtArgs> | null
    /**
     * The data used to create many Relateds.
     */
    data: RelatedCreateManyInput | RelatedCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Related update
   */
  export type RelatedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Related
     */
    select?: RelatedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Related
     */
    omit?: RelatedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedInclude<ExtArgs> | null
    /**
     * The data needed to update a Related.
     */
    data: XOR<RelatedUpdateInput, RelatedUncheckedUpdateInput>
    /**
     * Choose, which Related to update.
     */
    where: RelatedWhereUniqueInput
  }

  /**
   * Related updateMany
   */
  export type RelatedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Relateds.
     */
    data: XOR<RelatedUpdateManyMutationInput, RelatedUncheckedUpdateManyInput>
    /**
     * Filter which Relateds to update
     */
    where?: RelatedWhereInput
    /**
     * Limit how many Relateds to update.
     */
    limit?: number
  }

  /**
   * Related updateManyAndReturn
   */
  export type RelatedUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Related
     */
    select?: RelatedSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Related
     */
    omit?: RelatedOmit<ExtArgs> | null
    /**
     * The data used to update Relateds.
     */
    data: XOR<RelatedUpdateManyMutationInput, RelatedUncheckedUpdateManyInput>
    /**
     * Filter which Relateds to update
     */
    where?: RelatedWhereInput
    /**
     * Limit how many Relateds to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Related upsert
   */
  export type RelatedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Related
     */
    select?: RelatedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Related
     */
    omit?: RelatedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedInclude<ExtArgs> | null
    /**
     * The filter to search for the Related to update in case it exists.
     */
    where: RelatedWhereUniqueInput
    /**
     * In case the Related found by the `where` argument doesn't exist, create a new Related with this data.
     */
    create: XOR<RelatedCreateInput, RelatedUncheckedCreateInput>
    /**
     * In case the Related was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RelatedUpdateInput, RelatedUncheckedUpdateInput>
  }

  /**
   * Related delete
   */
  export type RelatedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Related
     */
    select?: RelatedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Related
     */
    omit?: RelatedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedInclude<ExtArgs> | null
    /**
     * Filter which Related to delete.
     */
    where: RelatedWhereUniqueInput
  }

  /**
   * Related deleteMany
   */
  export type RelatedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Relateds to delete
     */
    where?: RelatedWhereInput
    /**
     * Limit how many Relateds to delete.
     */
    limit?: number
  }

  /**
   * Related.anime
   */
  export type Related$animeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    where?: AnimeWhereInput
  }

  /**
   * Related.manga
   */
  export type Related$mangaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manga
     */
    select?: MangaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Manga
     */
    omit?: MangaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaInclude<ExtArgs> | null
    where?: MangaWhereInput
  }

  /**
   * Related.relatedAnime
   */
  export type Related$relatedAnimeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    where?: AnimeWhereInput
  }

  /**
   * Related.relatedManga
   */
  export type Related$relatedMangaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manga
     */
    select?: MangaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Manga
     */
    omit?: MangaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaInclude<ExtArgs> | null
    where?: MangaWhereInput
  }

  /**
   * Related without action
   */
  export type RelatedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Related
     */
    select?: RelatedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Related
     */
    omit?: RelatedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedInclude<ExtArgs> | null
  }


  /**
   * Model Background
   */

  export type AggregateBackground = {
    _count: BackgroundCountAggregateOutputType | null
    _avg: BackgroundAvgAggregateOutputType | null
    _sum: BackgroundSumAggregateOutputType | null
    _min: BackgroundMinAggregateOutputType | null
    _max: BackgroundMaxAggregateOutputType | null
  }

  export type BackgroundAvgAggregateOutputType = {
    id: number | null
  }

  export type BackgroundSumAggregateOutputType = {
    id: number | null
  }

  export type BackgroundMinAggregateOutputType = {
    id: number | null
    url: string | null
  }

  export type BackgroundMaxAggregateOutputType = {
    id: number | null
    url: string | null
  }

  export type BackgroundCountAggregateOutputType = {
    id: number
    url: number
    _all: number
  }


  export type BackgroundAvgAggregateInputType = {
    id?: true
  }

  export type BackgroundSumAggregateInputType = {
    id?: true
  }

  export type BackgroundMinAggregateInputType = {
    id?: true
    url?: true
  }

  export type BackgroundMaxAggregateInputType = {
    id?: true
    url?: true
  }

  export type BackgroundCountAggregateInputType = {
    id?: true
    url?: true
    _all?: true
  }

  export type BackgroundAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Background to aggregate.
     */
    where?: BackgroundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Backgrounds to fetch.
     */
    orderBy?: BackgroundOrderByWithRelationInput | BackgroundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BackgroundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Backgrounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Backgrounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Backgrounds
    **/
    _count?: true | BackgroundCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BackgroundAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BackgroundSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BackgroundMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BackgroundMaxAggregateInputType
  }

  export type GetBackgroundAggregateType<T extends BackgroundAggregateArgs> = {
        [P in keyof T & keyof AggregateBackground]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBackground[P]>
      : GetScalarType<T[P], AggregateBackground[P]>
  }




  export type BackgroundGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BackgroundWhereInput
    orderBy?: BackgroundOrderByWithAggregationInput | BackgroundOrderByWithAggregationInput[]
    by: BackgroundScalarFieldEnum[] | BackgroundScalarFieldEnum
    having?: BackgroundScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BackgroundCountAggregateInputType | true
    _avg?: BackgroundAvgAggregateInputType
    _sum?: BackgroundSumAggregateInputType
    _min?: BackgroundMinAggregateInputType
    _max?: BackgroundMaxAggregateInputType
  }

  export type BackgroundGroupByOutputType = {
    id: number
    url: string
    _count: BackgroundCountAggregateOutputType | null
    _avg: BackgroundAvgAggregateOutputType | null
    _sum: BackgroundSumAggregateOutputType | null
    _min: BackgroundMinAggregateOutputType | null
    _max: BackgroundMaxAggregateOutputType | null
  }

  type GetBackgroundGroupByPayload<T extends BackgroundGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BackgroundGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BackgroundGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BackgroundGroupByOutputType[P]>
            : GetScalarType<T[P], BackgroundGroupByOutputType[P]>
        }
      >
    >


  export type BackgroundSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    Manga?: boolean | Background$MangaArgs<ExtArgs>
    Anime?: boolean | Background$AnimeArgs<ExtArgs>
    _count?: boolean | BackgroundCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["background"]>

  export type BackgroundSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
  }, ExtArgs["result"]["background"]>

  export type BackgroundSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
  }, ExtArgs["result"]["background"]>

  export type BackgroundSelectScalar = {
    id?: boolean
    url?: boolean
  }

  export type BackgroundOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "url", ExtArgs["result"]["background"]>
  export type BackgroundInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Manga?: boolean | Background$MangaArgs<ExtArgs>
    Anime?: boolean | Background$AnimeArgs<ExtArgs>
    _count?: boolean | BackgroundCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BackgroundIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type BackgroundIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BackgroundPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Background"
    objects: {
      Manga: Prisma.$MangaPayload<ExtArgs>[]
      Anime: Prisma.$AnimePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      url: string
    }, ExtArgs["result"]["background"]>
    composites: {}
  }

  type BackgroundGetPayload<S extends boolean | null | undefined | BackgroundDefaultArgs> = $Result.GetResult<Prisma.$BackgroundPayload, S>

  type BackgroundCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BackgroundFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BackgroundCountAggregateInputType | true
    }

  export interface BackgroundDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Background'], meta: { name: 'Background' } }
    /**
     * Find zero or one Background that matches the filter.
     * @param {BackgroundFindUniqueArgs} args - Arguments to find a Background
     * @example
     * // Get one Background
     * const background = await prisma.background.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BackgroundFindUniqueArgs>(args: SelectSubset<T, BackgroundFindUniqueArgs<ExtArgs>>): Prisma__BackgroundClient<$Result.GetResult<Prisma.$BackgroundPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Background that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BackgroundFindUniqueOrThrowArgs} args - Arguments to find a Background
     * @example
     * // Get one Background
     * const background = await prisma.background.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BackgroundFindUniqueOrThrowArgs>(args: SelectSubset<T, BackgroundFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BackgroundClient<$Result.GetResult<Prisma.$BackgroundPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Background that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackgroundFindFirstArgs} args - Arguments to find a Background
     * @example
     * // Get one Background
     * const background = await prisma.background.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BackgroundFindFirstArgs>(args?: SelectSubset<T, BackgroundFindFirstArgs<ExtArgs>>): Prisma__BackgroundClient<$Result.GetResult<Prisma.$BackgroundPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Background that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackgroundFindFirstOrThrowArgs} args - Arguments to find a Background
     * @example
     * // Get one Background
     * const background = await prisma.background.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BackgroundFindFirstOrThrowArgs>(args?: SelectSubset<T, BackgroundFindFirstOrThrowArgs<ExtArgs>>): Prisma__BackgroundClient<$Result.GetResult<Prisma.$BackgroundPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Backgrounds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackgroundFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Backgrounds
     * const backgrounds = await prisma.background.findMany()
     * 
     * // Get first 10 Backgrounds
     * const backgrounds = await prisma.background.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const backgroundWithIdOnly = await prisma.background.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BackgroundFindManyArgs>(args?: SelectSubset<T, BackgroundFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BackgroundPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Background.
     * @param {BackgroundCreateArgs} args - Arguments to create a Background.
     * @example
     * // Create one Background
     * const Background = await prisma.background.create({
     *   data: {
     *     // ... data to create a Background
     *   }
     * })
     * 
     */
    create<T extends BackgroundCreateArgs>(args: SelectSubset<T, BackgroundCreateArgs<ExtArgs>>): Prisma__BackgroundClient<$Result.GetResult<Prisma.$BackgroundPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Backgrounds.
     * @param {BackgroundCreateManyArgs} args - Arguments to create many Backgrounds.
     * @example
     * // Create many Backgrounds
     * const background = await prisma.background.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BackgroundCreateManyArgs>(args?: SelectSubset<T, BackgroundCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Backgrounds and returns the data saved in the database.
     * @param {BackgroundCreateManyAndReturnArgs} args - Arguments to create many Backgrounds.
     * @example
     * // Create many Backgrounds
     * const background = await prisma.background.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Backgrounds and only return the `id`
     * const backgroundWithIdOnly = await prisma.background.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BackgroundCreateManyAndReturnArgs>(args?: SelectSubset<T, BackgroundCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BackgroundPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Background.
     * @param {BackgroundDeleteArgs} args - Arguments to delete one Background.
     * @example
     * // Delete one Background
     * const Background = await prisma.background.delete({
     *   where: {
     *     // ... filter to delete one Background
     *   }
     * })
     * 
     */
    delete<T extends BackgroundDeleteArgs>(args: SelectSubset<T, BackgroundDeleteArgs<ExtArgs>>): Prisma__BackgroundClient<$Result.GetResult<Prisma.$BackgroundPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Background.
     * @param {BackgroundUpdateArgs} args - Arguments to update one Background.
     * @example
     * // Update one Background
     * const background = await prisma.background.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BackgroundUpdateArgs>(args: SelectSubset<T, BackgroundUpdateArgs<ExtArgs>>): Prisma__BackgroundClient<$Result.GetResult<Prisma.$BackgroundPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Backgrounds.
     * @param {BackgroundDeleteManyArgs} args - Arguments to filter Backgrounds to delete.
     * @example
     * // Delete a few Backgrounds
     * const { count } = await prisma.background.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BackgroundDeleteManyArgs>(args?: SelectSubset<T, BackgroundDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Backgrounds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackgroundUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Backgrounds
     * const background = await prisma.background.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BackgroundUpdateManyArgs>(args: SelectSubset<T, BackgroundUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Backgrounds and returns the data updated in the database.
     * @param {BackgroundUpdateManyAndReturnArgs} args - Arguments to update many Backgrounds.
     * @example
     * // Update many Backgrounds
     * const background = await prisma.background.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Backgrounds and only return the `id`
     * const backgroundWithIdOnly = await prisma.background.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BackgroundUpdateManyAndReturnArgs>(args: SelectSubset<T, BackgroundUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BackgroundPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Background.
     * @param {BackgroundUpsertArgs} args - Arguments to update or create a Background.
     * @example
     * // Update or create a Background
     * const background = await prisma.background.upsert({
     *   create: {
     *     // ... data to create a Background
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Background we want to update
     *   }
     * })
     */
    upsert<T extends BackgroundUpsertArgs>(args: SelectSubset<T, BackgroundUpsertArgs<ExtArgs>>): Prisma__BackgroundClient<$Result.GetResult<Prisma.$BackgroundPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Backgrounds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackgroundCountArgs} args - Arguments to filter Backgrounds to count.
     * @example
     * // Count the number of Backgrounds
     * const count = await prisma.background.count({
     *   where: {
     *     // ... the filter for the Backgrounds we want to count
     *   }
     * })
    **/
    count<T extends BackgroundCountArgs>(
      args?: Subset<T, BackgroundCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BackgroundCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Background.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackgroundAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BackgroundAggregateArgs>(args: Subset<T, BackgroundAggregateArgs>): Prisma.PrismaPromise<GetBackgroundAggregateType<T>>

    /**
     * Group by Background.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackgroundGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BackgroundGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BackgroundGroupByArgs['orderBy'] }
        : { orderBy?: BackgroundGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BackgroundGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBackgroundGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Background model
   */
  readonly fields: BackgroundFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Background.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BackgroundClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Manga<T extends Background$MangaArgs<ExtArgs> = {}>(args?: Subset<T, Background$MangaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Anime<T extends Background$AnimeArgs<ExtArgs> = {}>(args?: Subset<T, Background$AnimeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Background model
   */
  interface BackgroundFieldRefs {
    readonly id: FieldRef<"Background", 'Int'>
    readonly url: FieldRef<"Background", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Background findUnique
   */
  export type BackgroundFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Background
     */
    select?: BackgroundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Background
     */
    omit?: BackgroundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BackgroundInclude<ExtArgs> | null
    /**
     * Filter, which Background to fetch.
     */
    where: BackgroundWhereUniqueInput
  }

  /**
   * Background findUniqueOrThrow
   */
  export type BackgroundFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Background
     */
    select?: BackgroundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Background
     */
    omit?: BackgroundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BackgroundInclude<ExtArgs> | null
    /**
     * Filter, which Background to fetch.
     */
    where: BackgroundWhereUniqueInput
  }

  /**
   * Background findFirst
   */
  export type BackgroundFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Background
     */
    select?: BackgroundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Background
     */
    omit?: BackgroundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BackgroundInclude<ExtArgs> | null
    /**
     * Filter, which Background to fetch.
     */
    where?: BackgroundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Backgrounds to fetch.
     */
    orderBy?: BackgroundOrderByWithRelationInput | BackgroundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Backgrounds.
     */
    cursor?: BackgroundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Backgrounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Backgrounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Backgrounds.
     */
    distinct?: BackgroundScalarFieldEnum | BackgroundScalarFieldEnum[]
  }

  /**
   * Background findFirstOrThrow
   */
  export type BackgroundFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Background
     */
    select?: BackgroundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Background
     */
    omit?: BackgroundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BackgroundInclude<ExtArgs> | null
    /**
     * Filter, which Background to fetch.
     */
    where?: BackgroundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Backgrounds to fetch.
     */
    orderBy?: BackgroundOrderByWithRelationInput | BackgroundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Backgrounds.
     */
    cursor?: BackgroundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Backgrounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Backgrounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Backgrounds.
     */
    distinct?: BackgroundScalarFieldEnum | BackgroundScalarFieldEnum[]
  }

  /**
   * Background findMany
   */
  export type BackgroundFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Background
     */
    select?: BackgroundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Background
     */
    omit?: BackgroundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BackgroundInclude<ExtArgs> | null
    /**
     * Filter, which Backgrounds to fetch.
     */
    where?: BackgroundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Backgrounds to fetch.
     */
    orderBy?: BackgroundOrderByWithRelationInput | BackgroundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Backgrounds.
     */
    cursor?: BackgroundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Backgrounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Backgrounds.
     */
    skip?: number
    distinct?: BackgroundScalarFieldEnum | BackgroundScalarFieldEnum[]
  }

  /**
   * Background create
   */
  export type BackgroundCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Background
     */
    select?: BackgroundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Background
     */
    omit?: BackgroundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BackgroundInclude<ExtArgs> | null
    /**
     * The data needed to create a Background.
     */
    data: XOR<BackgroundCreateInput, BackgroundUncheckedCreateInput>
  }

  /**
   * Background createMany
   */
  export type BackgroundCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Backgrounds.
     */
    data: BackgroundCreateManyInput | BackgroundCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Background createManyAndReturn
   */
  export type BackgroundCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Background
     */
    select?: BackgroundSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Background
     */
    omit?: BackgroundOmit<ExtArgs> | null
    /**
     * The data used to create many Backgrounds.
     */
    data: BackgroundCreateManyInput | BackgroundCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Background update
   */
  export type BackgroundUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Background
     */
    select?: BackgroundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Background
     */
    omit?: BackgroundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BackgroundInclude<ExtArgs> | null
    /**
     * The data needed to update a Background.
     */
    data: XOR<BackgroundUpdateInput, BackgroundUncheckedUpdateInput>
    /**
     * Choose, which Background to update.
     */
    where: BackgroundWhereUniqueInput
  }

  /**
   * Background updateMany
   */
  export type BackgroundUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Backgrounds.
     */
    data: XOR<BackgroundUpdateManyMutationInput, BackgroundUncheckedUpdateManyInput>
    /**
     * Filter which Backgrounds to update
     */
    where?: BackgroundWhereInput
    /**
     * Limit how many Backgrounds to update.
     */
    limit?: number
  }

  /**
   * Background updateManyAndReturn
   */
  export type BackgroundUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Background
     */
    select?: BackgroundSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Background
     */
    omit?: BackgroundOmit<ExtArgs> | null
    /**
     * The data used to update Backgrounds.
     */
    data: XOR<BackgroundUpdateManyMutationInput, BackgroundUncheckedUpdateManyInput>
    /**
     * Filter which Backgrounds to update
     */
    where?: BackgroundWhereInput
    /**
     * Limit how many Backgrounds to update.
     */
    limit?: number
  }

  /**
   * Background upsert
   */
  export type BackgroundUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Background
     */
    select?: BackgroundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Background
     */
    omit?: BackgroundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BackgroundInclude<ExtArgs> | null
    /**
     * The filter to search for the Background to update in case it exists.
     */
    where: BackgroundWhereUniqueInput
    /**
     * In case the Background found by the `where` argument doesn't exist, create a new Background with this data.
     */
    create: XOR<BackgroundCreateInput, BackgroundUncheckedCreateInput>
    /**
     * In case the Background was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BackgroundUpdateInput, BackgroundUncheckedUpdateInput>
  }

  /**
   * Background delete
   */
  export type BackgroundDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Background
     */
    select?: BackgroundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Background
     */
    omit?: BackgroundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BackgroundInclude<ExtArgs> | null
    /**
     * Filter which Background to delete.
     */
    where: BackgroundWhereUniqueInput
  }

  /**
   * Background deleteMany
   */
  export type BackgroundDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Backgrounds to delete
     */
    where?: BackgroundWhereInput
    /**
     * Limit how many Backgrounds to delete.
     */
    limit?: number
  }

  /**
   * Background.Manga
   */
  export type Background$MangaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manga
     */
    select?: MangaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Manga
     */
    omit?: MangaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaInclude<ExtArgs> | null
    where?: MangaWhereInput
    orderBy?: MangaOrderByWithRelationInput | MangaOrderByWithRelationInput[]
    cursor?: MangaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MangaScalarFieldEnum | MangaScalarFieldEnum[]
  }

  /**
   * Background.Anime
   */
  export type Background$AnimeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    where?: AnimeWhereInput
    orderBy?: AnimeOrderByWithRelationInput | AnimeOrderByWithRelationInput[]
    cursor?: AnimeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimeScalarFieldEnum | AnimeScalarFieldEnum[]
  }

  /**
   * Background without action
   */
  export type BackgroundDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Background
     */
    select?: BackgroundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Background
     */
    omit?: BackgroundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BackgroundInclude<ExtArgs> | null
  }


  /**
   * Model Anime
   */

  export type AggregateAnime = {
    _count: AnimeCountAggregateOutputType | null
    _avg: AnimeAvgAggregateOutputType | null
    _sum: AnimeSumAggregateOutputType | null
    _min: AnimeMinAggregateOutputType | null
    _max: AnimeMaxAggregateOutputType | null
  }

  export type AnimeAvgAggregateOutputType = {
    id: number | null
    site: number | null
    coverId: number | null
    ageRestrictionId: number | null
    backgroundId: number | null
  }

  export type AnimeSumAggregateOutputType = {
    id: number | null
    site: number | null
    coverId: number | null
    ageRestrictionId: number | null
    backgroundId: number | null
  }

  export type AnimeMinAggregateOutputType = {
    id: number | null
    name: string | null
    eng_name: string | null
    slug_url: string | null
    summary: string | null
    model: $Enums.ModelName | null
    site: number | null
    coverId: number | null
    ageRestrictionId: number | null
    backgroundId: number | null
  }

  export type AnimeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    eng_name: string | null
    slug_url: string | null
    summary: string | null
    model: $Enums.ModelName | null
    site: number | null
    coverId: number | null
    ageRestrictionId: number | null
    backgroundId: number | null
  }

  export type AnimeCountAggregateOutputType = {
    id: number
    name: number
    eng_name: number
    slug_url: number
    otherNames: number
    summary: number
    model: number
    site: number
    coverId: number
    ageRestrictionId: number
    backgroundId: number
    _all: number
  }


  export type AnimeAvgAggregateInputType = {
    id?: true
    site?: true
    coverId?: true
    ageRestrictionId?: true
    backgroundId?: true
  }

  export type AnimeSumAggregateInputType = {
    id?: true
    site?: true
    coverId?: true
    ageRestrictionId?: true
    backgroundId?: true
  }

  export type AnimeMinAggregateInputType = {
    id?: true
    name?: true
    eng_name?: true
    slug_url?: true
    summary?: true
    model?: true
    site?: true
    coverId?: true
    ageRestrictionId?: true
    backgroundId?: true
  }

  export type AnimeMaxAggregateInputType = {
    id?: true
    name?: true
    eng_name?: true
    slug_url?: true
    summary?: true
    model?: true
    site?: true
    coverId?: true
    ageRestrictionId?: true
    backgroundId?: true
  }

  export type AnimeCountAggregateInputType = {
    id?: true
    name?: true
    eng_name?: true
    slug_url?: true
    otherNames?: true
    summary?: true
    model?: true
    site?: true
    coverId?: true
    ageRestrictionId?: true
    backgroundId?: true
    _all?: true
  }

  export type AnimeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Anime to aggregate.
     */
    where?: AnimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime to fetch.
     */
    orderBy?: AnimeOrderByWithRelationInput | AnimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Anime
    **/
    _count?: true | AnimeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnimeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnimeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnimeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnimeMaxAggregateInputType
  }

  export type GetAnimeAggregateType<T extends AnimeAggregateArgs> = {
        [P in keyof T & keyof AggregateAnime]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnime[P]>
      : GetScalarType<T[P], AggregateAnime[P]>
  }




  export type AnimeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeWhereInput
    orderBy?: AnimeOrderByWithAggregationInput | AnimeOrderByWithAggregationInput[]
    by: AnimeScalarFieldEnum[] | AnimeScalarFieldEnum
    having?: AnimeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnimeCountAggregateInputType | true
    _avg?: AnimeAvgAggregateInputType
    _sum?: AnimeSumAggregateInputType
    _min?: AnimeMinAggregateInputType
    _max?: AnimeMaxAggregateInputType
  }

  export type AnimeGroupByOutputType = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames: string[]
    summary: string | null
    model: $Enums.ModelName
    site: number
    coverId: number
    ageRestrictionId: number
    backgroundId: number
    _count: AnimeCountAggregateOutputType | null
    _avg: AnimeAvgAggregateOutputType | null
    _sum: AnimeSumAggregateOutputType | null
    _min: AnimeMinAggregateOutputType | null
    _max: AnimeMaxAggregateOutputType | null
  }

  type GetAnimeGroupByPayload<T extends AnimeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnimeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnimeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnimeGroupByOutputType[P]>
            : GetScalarType<T[P], AnimeGroupByOutputType[P]>
        }
      >
    >


  export type AnimeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    eng_name?: boolean
    slug_url?: boolean
    otherNames?: boolean
    summary?: boolean
    model?: boolean
    site?: boolean
    coverId?: boolean
    ageRestrictionId?: boolean
    backgroundId?: boolean
    cover?: boolean | CoverDefaultArgs<ExtArgs>
    ageRestriction?: boolean | AgeRestrictionDefaultArgs<ExtArgs>
    genres?: boolean | Anime$genresArgs<ExtArgs>
    background?: boolean | BackgroundDefaultArgs<ExtArgs>
    Episode?: boolean | Anime$EpisodeArgs<ExtArgs>
    relatedFrom?: boolean | Anime$relatedFromArgs<ExtArgs>
    relatedTo?: boolean | Anime$relatedToArgs<ExtArgs>
    Bookmark?: boolean | Anime$BookmarkArgs<ExtArgs>
    _count?: boolean | AnimeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["anime"]>

  export type AnimeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    eng_name?: boolean
    slug_url?: boolean
    otherNames?: boolean
    summary?: boolean
    model?: boolean
    site?: boolean
    coverId?: boolean
    ageRestrictionId?: boolean
    backgroundId?: boolean
    cover?: boolean | CoverDefaultArgs<ExtArgs>
    ageRestriction?: boolean | AgeRestrictionDefaultArgs<ExtArgs>
    background?: boolean | BackgroundDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["anime"]>

  export type AnimeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    eng_name?: boolean
    slug_url?: boolean
    otherNames?: boolean
    summary?: boolean
    model?: boolean
    site?: boolean
    coverId?: boolean
    ageRestrictionId?: boolean
    backgroundId?: boolean
    cover?: boolean | CoverDefaultArgs<ExtArgs>
    ageRestriction?: boolean | AgeRestrictionDefaultArgs<ExtArgs>
    background?: boolean | BackgroundDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["anime"]>

  export type AnimeSelectScalar = {
    id?: boolean
    name?: boolean
    eng_name?: boolean
    slug_url?: boolean
    otherNames?: boolean
    summary?: boolean
    model?: boolean
    site?: boolean
    coverId?: boolean
    ageRestrictionId?: boolean
    backgroundId?: boolean
  }

  export type AnimeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "eng_name" | "slug_url" | "otherNames" | "summary" | "model" | "site" | "coverId" | "ageRestrictionId" | "backgroundId", ExtArgs["result"]["anime"]>
  export type AnimeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cover?: boolean | CoverDefaultArgs<ExtArgs>
    ageRestriction?: boolean | AgeRestrictionDefaultArgs<ExtArgs>
    genres?: boolean | Anime$genresArgs<ExtArgs>
    background?: boolean | BackgroundDefaultArgs<ExtArgs>
    Episode?: boolean | Anime$EpisodeArgs<ExtArgs>
    relatedFrom?: boolean | Anime$relatedFromArgs<ExtArgs>
    relatedTo?: boolean | Anime$relatedToArgs<ExtArgs>
    Bookmark?: boolean | Anime$BookmarkArgs<ExtArgs>
    _count?: boolean | AnimeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AnimeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cover?: boolean | CoverDefaultArgs<ExtArgs>
    ageRestriction?: boolean | AgeRestrictionDefaultArgs<ExtArgs>
    background?: boolean | BackgroundDefaultArgs<ExtArgs>
  }
  export type AnimeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cover?: boolean | CoverDefaultArgs<ExtArgs>
    ageRestriction?: boolean | AgeRestrictionDefaultArgs<ExtArgs>
    background?: boolean | BackgroundDefaultArgs<ExtArgs>
  }

  export type $AnimePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Anime"
    objects: {
      cover: Prisma.$CoverPayload<ExtArgs>
      ageRestriction: Prisma.$AgeRestrictionPayload<ExtArgs>
      genres: Prisma.$GenrePayload<ExtArgs>[]
      background: Prisma.$BackgroundPayload<ExtArgs>
      Episode: Prisma.$EpisodePayload<ExtArgs>[]
      relatedFrom: Prisma.$RelatedPayload<ExtArgs>[]
      relatedTo: Prisma.$RelatedPayload<ExtArgs>[]
      Bookmark: Prisma.$BookmarkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      eng_name: string
      slug_url: string
      otherNames: string[]
      summary: string | null
      model: $Enums.ModelName
      site: number
      coverId: number
      ageRestrictionId: number
      backgroundId: number
    }, ExtArgs["result"]["anime"]>
    composites: {}
  }

  type AnimeGetPayload<S extends boolean | null | undefined | AnimeDefaultArgs> = $Result.GetResult<Prisma.$AnimePayload, S>

  type AnimeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnimeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnimeCountAggregateInputType | true
    }

  export interface AnimeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Anime'], meta: { name: 'Anime' } }
    /**
     * Find zero or one Anime that matches the filter.
     * @param {AnimeFindUniqueArgs} args - Arguments to find a Anime
     * @example
     * // Get one Anime
     * const anime = await prisma.anime.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnimeFindUniqueArgs>(args: SelectSubset<T, AnimeFindUniqueArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Anime that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnimeFindUniqueOrThrowArgs} args - Arguments to find a Anime
     * @example
     * // Get one Anime
     * const anime = await prisma.anime.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnimeFindUniqueOrThrowArgs>(args: SelectSubset<T, AnimeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Anime that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeFindFirstArgs} args - Arguments to find a Anime
     * @example
     * // Get one Anime
     * const anime = await prisma.anime.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnimeFindFirstArgs>(args?: SelectSubset<T, AnimeFindFirstArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Anime that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeFindFirstOrThrowArgs} args - Arguments to find a Anime
     * @example
     * // Get one Anime
     * const anime = await prisma.anime.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnimeFindFirstOrThrowArgs>(args?: SelectSubset<T, AnimeFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Anime that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Anime
     * const anime = await prisma.anime.findMany()
     * 
     * // Get first 10 Anime
     * const anime = await prisma.anime.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const animeWithIdOnly = await prisma.anime.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AnimeFindManyArgs>(args?: SelectSubset<T, AnimeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Anime.
     * @param {AnimeCreateArgs} args - Arguments to create a Anime.
     * @example
     * // Create one Anime
     * const Anime = await prisma.anime.create({
     *   data: {
     *     // ... data to create a Anime
     *   }
     * })
     * 
     */
    create<T extends AnimeCreateArgs>(args: SelectSubset<T, AnimeCreateArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Anime.
     * @param {AnimeCreateManyArgs} args - Arguments to create many Anime.
     * @example
     * // Create many Anime
     * const anime = await prisma.anime.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnimeCreateManyArgs>(args?: SelectSubset<T, AnimeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Anime and returns the data saved in the database.
     * @param {AnimeCreateManyAndReturnArgs} args - Arguments to create many Anime.
     * @example
     * // Create many Anime
     * const anime = await prisma.anime.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Anime and only return the `id`
     * const animeWithIdOnly = await prisma.anime.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnimeCreateManyAndReturnArgs>(args?: SelectSubset<T, AnimeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Anime.
     * @param {AnimeDeleteArgs} args - Arguments to delete one Anime.
     * @example
     * // Delete one Anime
     * const Anime = await prisma.anime.delete({
     *   where: {
     *     // ... filter to delete one Anime
     *   }
     * })
     * 
     */
    delete<T extends AnimeDeleteArgs>(args: SelectSubset<T, AnimeDeleteArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Anime.
     * @param {AnimeUpdateArgs} args - Arguments to update one Anime.
     * @example
     * // Update one Anime
     * const anime = await prisma.anime.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnimeUpdateArgs>(args: SelectSubset<T, AnimeUpdateArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Anime.
     * @param {AnimeDeleteManyArgs} args - Arguments to filter Anime to delete.
     * @example
     * // Delete a few Anime
     * const { count } = await prisma.anime.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnimeDeleteManyArgs>(args?: SelectSubset<T, AnimeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Anime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Anime
     * const anime = await prisma.anime.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnimeUpdateManyArgs>(args: SelectSubset<T, AnimeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Anime and returns the data updated in the database.
     * @param {AnimeUpdateManyAndReturnArgs} args - Arguments to update many Anime.
     * @example
     * // Update many Anime
     * const anime = await prisma.anime.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Anime and only return the `id`
     * const animeWithIdOnly = await prisma.anime.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnimeUpdateManyAndReturnArgs>(args: SelectSubset<T, AnimeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Anime.
     * @param {AnimeUpsertArgs} args - Arguments to update or create a Anime.
     * @example
     * // Update or create a Anime
     * const anime = await prisma.anime.upsert({
     *   create: {
     *     // ... data to create a Anime
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Anime we want to update
     *   }
     * })
     */
    upsert<T extends AnimeUpsertArgs>(args: SelectSubset<T, AnimeUpsertArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Anime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeCountArgs} args - Arguments to filter Anime to count.
     * @example
     * // Count the number of Anime
     * const count = await prisma.anime.count({
     *   where: {
     *     // ... the filter for the Anime we want to count
     *   }
     * })
    **/
    count<T extends AnimeCountArgs>(
      args?: Subset<T, AnimeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnimeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Anime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnimeAggregateArgs>(args: Subset<T, AnimeAggregateArgs>): Prisma.PrismaPromise<GetAnimeAggregateType<T>>

    /**
     * Group by Anime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnimeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnimeGroupByArgs['orderBy'] }
        : { orderBy?: AnimeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnimeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnimeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Anime model
   */
  readonly fields: AnimeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Anime.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnimeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cover<T extends CoverDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoverDefaultArgs<ExtArgs>>): Prisma__CoverClient<$Result.GetResult<Prisma.$CoverPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ageRestriction<T extends AgeRestrictionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgeRestrictionDefaultArgs<ExtArgs>>): Prisma__AgeRestrictionClient<$Result.GetResult<Prisma.$AgeRestrictionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    genres<T extends Anime$genresArgs<ExtArgs> = {}>(args?: Subset<T, Anime$genresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    background<T extends BackgroundDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BackgroundDefaultArgs<ExtArgs>>): Prisma__BackgroundClient<$Result.GetResult<Prisma.$BackgroundPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Episode<T extends Anime$EpisodeArgs<ExtArgs> = {}>(args?: Subset<T, Anime$EpisodeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    relatedFrom<T extends Anime$relatedFromArgs<ExtArgs> = {}>(args?: Subset<T, Anime$relatedFromArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    relatedTo<T extends Anime$relatedToArgs<ExtArgs> = {}>(args?: Subset<T, Anime$relatedToArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Bookmark<T extends Anime$BookmarkArgs<ExtArgs> = {}>(args?: Subset<T, Anime$BookmarkArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Anime model
   */
  interface AnimeFieldRefs {
    readonly id: FieldRef<"Anime", 'Int'>
    readonly name: FieldRef<"Anime", 'String'>
    readonly eng_name: FieldRef<"Anime", 'String'>
    readonly slug_url: FieldRef<"Anime", 'String'>
    readonly otherNames: FieldRef<"Anime", 'String[]'>
    readonly summary: FieldRef<"Anime", 'String'>
    readonly model: FieldRef<"Anime", 'ModelName'>
    readonly site: FieldRef<"Anime", 'Int'>
    readonly coverId: FieldRef<"Anime", 'Int'>
    readonly ageRestrictionId: FieldRef<"Anime", 'Int'>
    readonly backgroundId: FieldRef<"Anime", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Anime findUnique
   */
  export type AnimeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    /**
     * Filter, which Anime to fetch.
     */
    where: AnimeWhereUniqueInput
  }

  /**
   * Anime findUniqueOrThrow
   */
  export type AnimeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    /**
     * Filter, which Anime to fetch.
     */
    where: AnimeWhereUniqueInput
  }

  /**
   * Anime findFirst
   */
  export type AnimeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    /**
     * Filter, which Anime to fetch.
     */
    where?: AnimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime to fetch.
     */
    orderBy?: AnimeOrderByWithRelationInput | AnimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Anime.
     */
    cursor?: AnimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Anime.
     */
    distinct?: AnimeScalarFieldEnum | AnimeScalarFieldEnum[]
  }

  /**
   * Anime findFirstOrThrow
   */
  export type AnimeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    /**
     * Filter, which Anime to fetch.
     */
    where?: AnimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime to fetch.
     */
    orderBy?: AnimeOrderByWithRelationInput | AnimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Anime.
     */
    cursor?: AnimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Anime.
     */
    distinct?: AnimeScalarFieldEnum | AnimeScalarFieldEnum[]
  }

  /**
   * Anime findMany
   */
  export type AnimeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    /**
     * Filter, which Anime to fetch.
     */
    where?: AnimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime to fetch.
     */
    orderBy?: AnimeOrderByWithRelationInput | AnimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Anime.
     */
    cursor?: AnimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime.
     */
    skip?: number
    distinct?: AnimeScalarFieldEnum | AnimeScalarFieldEnum[]
  }

  /**
   * Anime create
   */
  export type AnimeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    /**
     * The data needed to create a Anime.
     */
    data: XOR<AnimeCreateInput, AnimeUncheckedCreateInput>
  }

  /**
   * Anime createMany
   */
  export type AnimeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Anime.
     */
    data: AnimeCreateManyInput | AnimeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Anime createManyAndReturn
   */
  export type AnimeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * The data used to create many Anime.
     */
    data: AnimeCreateManyInput | AnimeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Anime update
   */
  export type AnimeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    /**
     * The data needed to update a Anime.
     */
    data: XOR<AnimeUpdateInput, AnimeUncheckedUpdateInput>
    /**
     * Choose, which Anime to update.
     */
    where: AnimeWhereUniqueInput
  }

  /**
   * Anime updateMany
   */
  export type AnimeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Anime.
     */
    data: XOR<AnimeUpdateManyMutationInput, AnimeUncheckedUpdateManyInput>
    /**
     * Filter which Anime to update
     */
    where?: AnimeWhereInput
    /**
     * Limit how many Anime to update.
     */
    limit?: number
  }

  /**
   * Anime updateManyAndReturn
   */
  export type AnimeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * The data used to update Anime.
     */
    data: XOR<AnimeUpdateManyMutationInput, AnimeUncheckedUpdateManyInput>
    /**
     * Filter which Anime to update
     */
    where?: AnimeWhereInput
    /**
     * Limit how many Anime to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Anime upsert
   */
  export type AnimeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    /**
     * The filter to search for the Anime to update in case it exists.
     */
    where: AnimeWhereUniqueInput
    /**
     * In case the Anime found by the `where` argument doesn't exist, create a new Anime with this data.
     */
    create: XOR<AnimeCreateInput, AnimeUncheckedCreateInput>
    /**
     * In case the Anime was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnimeUpdateInput, AnimeUncheckedUpdateInput>
  }

  /**
   * Anime delete
   */
  export type AnimeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    /**
     * Filter which Anime to delete.
     */
    where: AnimeWhereUniqueInput
  }

  /**
   * Anime deleteMany
   */
  export type AnimeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Anime to delete
     */
    where?: AnimeWhereInput
    /**
     * Limit how many Anime to delete.
     */
    limit?: number
  }

  /**
   * Anime.genres
   */
  export type Anime$genresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    where?: GenreWhereInput
    orderBy?: GenreOrderByWithRelationInput | GenreOrderByWithRelationInput[]
    cursor?: GenreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GenreScalarFieldEnum | GenreScalarFieldEnum[]
  }

  /**
   * Anime.Episode
   */
  export type Anime$EpisodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Episode
     */
    omit?: EpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodeInclude<ExtArgs> | null
    where?: EpisodeWhereInput
    orderBy?: EpisodeOrderByWithRelationInput | EpisodeOrderByWithRelationInput[]
    cursor?: EpisodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EpisodeScalarFieldEnum | EpisodeScalarFieldEnum[]
  }

  /**
   * Anime.relatedFrom
   */
  export type Anime$relatedFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Related
     */
    select?: RelatedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Related
     */
    omit?: RelatedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedInclude<ExtArgs> | null
    where?: RelatedWhereInput
    orderBy?: RelatedOrderByWithRelationInput | RelatedOrderByWithRelationInput[]
    cursor?: RelatedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RelatedScalarFieldEnum | RelatedScalarFieldEnum[]
  }

  /**
   * Anime.relatedTo
   */
  export type Anime$relatedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Related
     */
    select?: RelatedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Related
     */
    omit?: RelatedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedInclude<ExtArgs> | null
    where?: RelatedWhereInput
    orderBy?: RelatedOrderByWithRelationInput | RelatedOrderByWithRelationInput[]
    cursor?: RelatedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RelatedScalarFieldEnum | RelatedScalarFieldEnum[]
  }

  /**
   * Anime.Bookmark
   */
  export type Anime$BookmarkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmark
     */
    omit?: BookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    where?: BookmarkWhereInput
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    cursor?: BookmarkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * Anime without action
   */
  export type AnimeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
  }


  /**
   * Model Episode
   */

  export type AggregateEpisode = {
    _count: EpisodeCountAggregateOutputType | null
    _avg: EpisodeAvgAggregateOutputType | null
    _sum: EpisodeSumAggregateOutputType | null
    _min: EpisodeMinAggregateOutputType | null
    _max: EpisodeMaxAggregateOutputType | null
  }

  export type EpisodeAvgAggregateOutputType = {
    id: number | null
    item_number: number | null
    endingLength: number | null
  }

  export type EpisodeSumAggregateOutputType = {
    id: number | null
    item_number: number | null
    endingLength: number | null
  }

  export type EpisodeMinAggregateOutputType = {
    id: number | null
    name: string | null
    number: string | null
    number_secondary: string | null
    slug_url: string | null
    item_number: number | null
    source: string | null
    endingLength: number | null
  }

  export type EpisodeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    number: string | null
    number_secondary: string | null
    slug_url: string | null
    item_number: number | null
    source: string | null
    endingLength: number | null
  }

  export type EpisodeCountAggregateOutputType = {
    id: number
    name: number
    number: number
    number_secondary: number
    slug_url: number
    item_number: number
    source: number
    endingLength: number
    _all: number
  }


  export type EpisodeAvgAggregateInputType = {
    id?: true
    item_number?: true
    endingLength?: true
  }

  export type EpisodeSumAggregateInputType = {
    id?: true
    item_number?: true
    endingLength?: true
  }

  export type EpisodeMinAggregateInputType = {
    id?: true
    name?: true
    number?: true
    number_secondary?: true
    slug_url?: true
    item_number?: true
    source?: true
    endingLength?: true
  }

  export type EpisodeMaxAggregateInputType = {
    id?: true
    name?: true
    number?: true
    number_secondary?: true
    slug_url?: true
    item_number?: true
    source?: true
    endingLength?: true
  }

  export type EpisodeCountAggregateInputType = {
    id?: true
    name?: true
    number?: true
    number_secondary?: true
    slug_url?: true
    item_number?: true
    source?: true
    endingLength?: true
    _all?: true
  }

  export type EpisodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Episode to aggregate.
     */
    where?: EpisodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Episodes to fetch.
     */
    orderBy?: EpisodeOrderByWithRelationInput | EpisodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EpisodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Episodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Episodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Episodes
    **/
    _count?: true | EpisodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EpisodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EpisodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EpisodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EpisodeMaxAggregateInputType
  }

  export type GetEpisodeAggregateType<T extends EpisodeAggregateArgs> = {
        [P in keyof T & keyof AggregateEpisode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEpisode[P]>
      : GetScalarType<T[P], AggregateEpisode[P]>
  }




  export type EpisodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EpisodeWhereInput
    orderBy?: EpisodeOrderByWithAggregationInput | EpisodeOrderByWithAggregationInput[]
    by: EpisodeScalarFieldEnum[] | EpisodeScalarFieldEnum
    having?: EpisodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EpisodeCountAggregateInputType | true
    _avg?: EpisodeAvgAggregateInputType
    _sum?: EpisodeSumAggregateInputType
    _min?: EpisodeMinAggregateInputType
    _max?: EpisodeMaxAggregateInputType
  }

  export type EpisodeGroupByOutputType = {
    id: number
    name: string | null
    number: string
    number_secondary: string
    slug_url: string
    item_number: number
    source: string | null
    endingLength: number | null
    _count: EpisodeCountAggregateOutputType | null
    _avg: EpisodeAvgAggregateOutputType | null
    _sum: EpisodeSumAggregateOutputType | null
    _min: EpisodeMinAggregateOutputType | null
    _max: EpisodeMaxAggregateOutputType | null
  }

  type GetEpisodeGroupByPayload<T extends EpisodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EpisodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EpisodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EpisodeGroupByOutputType[P]>
            : GetScalarType<T[P], EpisodeGroupByOutputType[P]>
        }
      >
    >


  export type EpisodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    number?: boolean
    number_secondary?: boolean
    slug_url?: boolean
    item_number?: boolean
    source?: boolean
    endingLength?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    Bookmark?: boolean | Episode$BookmarkArgs<ExtArgs>
    _count?: boolean | EpisodeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["episode"]>

  export type EpisodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    number?: boolean
    number_secondary?: boolean
    slug_url?: boolean
    item_number?: boolean
    source?: boolean
    endingLength?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["episode"]>

  export type EpisodeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    number?: boolean
    number_secondary?: boolean
    slug_url?: boolean
    item_number?: boolean
    source?: boolean
    endingLength?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["episode"]>

  export type EpisodeSelectScalar = {
    id?: boolean
    name?: boolean
    number?: boolean
    number_secondary?: boolean
    slug_url?: boolean
    item_number?: boolean
    source?: boolean
    endingLength?: boolean
  }

  export type EpisodeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "number" | "number_secondary" | "slug_url" | "item_number" | "source" | "endingLength", ExtArgs["result"]["episode"]>
  export type EpisodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    Bookmark?: boolean | Episode$BookmarkArgs<ExtArgs>
    _count?: boolean | EpisodeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EpisodeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
  }
  export type EpisodeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
  }

  export type $EpisodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Episode"
    objects: {
      anime: Prisma.$AnimePayload<ExtArgs>
      Bookmark: Prisma.$BookmarkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string | null
      number: string
      number_secondary: string
      slug_url: string
      item_number: number
      source: string | null
      endingLength: number | null
    }, ExtArgs["result"]["episode"]>
    composites: {}
  }

  type EpisodeGetPayload<S extends boolean | null | undefined | EpisodeDefaultArgs> = $Result.GetResult<Prisma.$EpisodePayload, S>

  type EpisodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EpisodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EpisodeCountAggregateInputType | true
    }

  export interface EpisodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Episode'], meta: { name: 'Episode' } }
    /**
     * Find zero or one Episode that matches the filter.
     * @param {EpisodeFindUniqueArgs} args - Arguments to find a Episode
     * @example
     * // Get one Episode
     * const episode = await prisma.episode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EpisodeFindUniqueArgs>(args: SelectSubset<T, EpisodeFindUniqueArgs<ExtArgs>>): Prisma__EpisodeClient<$Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Episode that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EpisodeFindUniqueOrThrowArgs} args - Arguments to find a Episode
     * @example
     * // Get one Episode
     * const episode = await prisma.episode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EpisodeFindUniqueOrThrowArgs>(args: SelectSubset<T, EpisodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EpisodeClient<$Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Episode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeFindFirstArgs} args - Arguments to find a Episode
     * @example
     * // Get one Episode
     * const episode = await prisma.episode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EpisodeFindFirstArgs>(args?: SelectSubset<T, EpisodeFindFirstArgs<ExtArgs>>): Prisma__EpisodeClient<$Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Episode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeFindFirstOrThrowArgs} args - Arguments to find a Episode
     * @example
     * // Get one Episode
     * const episode = await prisma.episode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EpisodeFindFirstOrThrowArgs>(args?: SelectSubset<T, EpisodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__EpisodeClient<$Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Episodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Episodes
     * const episodes = await prisma.episode.findMany()
     * 
     * // Get first 10 Episodes
     * const episodes = await prisma.episode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const episodeWithIdOnly = await prisma.episode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EpisodeFindManyArgs>(args?: SelectSubset<T, EpisodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Episode.
     * @param {EpisodeCreateArgs} args - Arguments to create a Episode.
     * @example
     * // Create one Episode
     * const Episode = await prisma.episode.create({
     *   data: {
     *     // ... data to create a Episode
     *   }
     * })
     * 
     */
    create<T extends EpisodeCreateArgs>(args: SelectSubset<T, EpisodeCreateArgs<ExtArgs>>): Prisma__EpisodeClient<$Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Episodes.
     * @param {EpisodeCreateManyArgs} args - Arguments to create many Episodes.
     * @example
     * // Create many Episodes
     * const episode = await prisma.episode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EpisodeCreateManyArgs>(args?: SelectSubset<T, EpisodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Episodes and returns the data saved in the database.
     * @param {EpisodeCreateManyAndReturnArgs} args - Arguments to create many Episodes.
     * @example
     * // Create many Episodes
     * const episode = await prisma.episode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Episodes and only return the `id`
     * const episodeWithIdOnly = await prisma.episode.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EpisodeCreateManyAndReturnArgs>(args?: SelectSubset<T, EpisodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Episode.
     * @param {EpisodeDeleteArgs} args - Arguments to delete one Episode.
     * @example
     * // Delete one Episode
     * const Episode = await prisma.episode.delete({
     *   where: {
     *     // ... filter to delete one Episode
     *   }
     * })
     * 
     */
    delete<T extends EpisodeDeleteArgs>(args: SelectSubset<T, EpisodeDeleteArgs<ExtArgs>>): Prisma__EpisodeClient<$Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Episode.
     * @param {EpisodeUpdateArgs} args - Arguments to update one Episode.
     * @example
     * // Update one Episode
     * const episode = await prisma.episode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EpisodeUpdateArgs>(args: SelectSubset<T, EpisodeUpdateArgs<ExtArgs>>): Prisma__EpisodeClient<$Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Episodes.
     * @param {EpisodeDeleteManyArgs} args - Arguments to filter Episodes to delete.
     * @example
     * // Delete a few Episodes
     * const { count } = await prisma.episode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EpisodeDeleteManyArgs>(args?: SelectSubset<T, EpisodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Episodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Episodes
     * const episode = await prisma.episode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EpisodeUpdateManyArgs>(args: SelectSubset<T, EpisodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Episodes and returns the data updated in the database.
     * @param {EpisodeUpdateManyAndReturnArgs} args - Arguments to update many Episodes.
     * @example
     * // Update many Episodes
     * const episode = await prisma.episode.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Episodes and only return the `id`
     * const episodeWithIdOnly = await prisma.episode.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EpisodeUpdateManyAndReturnArgs>(args: SelectSubset<T, EpisodeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Episode.
     * @param {EpisodeUpsertArgs} args - Arguments to update or create a Episode.
     * @example
     * // Update or create a Episode
     * const episode = await prisma.episode.upsert({
     *   create: {
     *     // ... data to create a Episode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Episode we want to update
     *   }
     * })
     */
    upsert<T extends EpisodeUpsertArgs>(args: SelectSubset<T, EpisodeUpsertArgs<ExtArgs>>): Prisma__EpisodeClient<$Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Episodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeCountArgs} args - Arguments to filter Episodes to count.
     * @example
     * // Count the number of Episodes
     * const count = await prisma.episode.count({
     *   where: {
     *     // ... the filter for the Episodes we want to count
     *   }
     * })
    **/
    count<T extends EpisodeCountArgs>(
      args?: Subset<T, EpisodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EpisodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Episode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EpisodeAggregateArgs>(args: Subset<T, EpisodeAggregateArgs>): Prisma.PrismaPromise<GetEpisodeAggregateType<T>>

    /**
     * Group by Episode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EpisodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EpisodeGroupByArgs['orderBy'] }
        : { orderBy?: EpisodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EpisodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEpisodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Episode model
   */
  readonly fields: EpisodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Episode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EpisodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    anime<T extends AnimeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AnimeDefaultArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Bookmark<T extends Episode$BookmarkArgs<ExtArgs> = {}>(args?: Subset<T, Episode$BookmarkArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Episode model
   */
  interface EpisodeFieldRefs {
    readonly id: FieldRef<"Episode", 'Int'>
    readonly name: FieldRef<"Episode", 'String'>
    readonly number: FieldRef<"Episode", 'String'>
    readonly number_secondary: FieldRef<"Episode", 'String'>
    readonly slug_url: FieldRef<"Episode", 'String'>
    readonly item_number: FieldRef<"Episode", 'Int'>
    readonly source: FieldRef<"Episode", 'String'>
    readonly endingLength: FieldRef<"Episode", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Episode findUnique
   */
  export type EpisodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Episode
     */
    omit?: EpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodeInclude<ExtArgs> | null
    /**
     * Filter, which Episode to fetch.
     */
    where: EpisodeWhereUniqueInput
  }

  /**
   * Episode findUniqueOrThrow
   */
  export type EpisodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Episode
     */
    omit?: EpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodeInclude<ExtArgs> | null
    /**
     * Filter, which Episode to fetch.
     */
    where: EpisodeWhereUniqueInput
  }

  /**
   * Episode findFirst
   */
  export type EpisodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Episode
     */
    omit?: EpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodeInclude<ExtArgs> | null
    /**
     * Filter, which Episode to fetch.
     */
    where?: EpisodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Episodes to fetch.
     */
    orderBy?: EpisodeOrderByWithRelationInput | EpisodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Episodes.
     */
    cursor?: EpisodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Episodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Episodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Episodes.
     */
    distinct?: EpisodeScalarFieldEnum | EpisodeScalarFieldEnum[]
  }

  /**
   * Episode findFirstOrThrow
   */
  export type EpisodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Episode
     */
    omit?: EpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodeInclude<ExtArgs> | null
    /**
     * Filter, which Episode to fetch.
     */
    where?: EpisodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Episodes to fetch.
     */
    orderBy?: EpisodeOrderByWithRelationInput | EpisodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Episodes.
     */
    cursor?: EpisodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Episodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Episodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Episodes.
     */
    distinct?: EpisodeScalarFieldEnum | EpisodeScalarFieldEnum[]
  }

  /**
   * Episode findMany
   */
  export type EpisodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Episode
     */
    omit?: EpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodeInclude<ExtArgs> | null
    /**
     * Filter, which Episodes to fetch.
     */
    where?: EpisodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Episodes to fetch.
     */
    orderBy?: EpisodeOrderByWithRelationInput | EpisodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Episodes.
     */
    cursor?: EpisodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Episodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Episodes.
     */
    skip?: number
    distinct?: EpisodeScalarFieldEnum | EpisodeScalarFieldEnum[]
  }

  /**
   * Episode create
   */
  export type EpisodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Episode
     */
    omit?: EpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodeInclude<ExtArgs> | null
    /**
     * The data needed to create a Episode.
     */
    data: XOR<EpisodeCreateInput, EpisodeUncheckedCreateInput>
  }

  /**
   * Episode createMany
   */
  export type EpisodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Episodes.
     */
    data: EpisodeCreateManyInput | EpisodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Episode createManyAndReturn
   */
  export type EpisodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Episode
     */
    omit?: EpisodeOmit<ExtArgs> | null
    /**
     * The data used to create many Episodes.
     */
    data: EpisodeCreateManyInput | EpisodeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Episode update
   */
  export type EpisodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Episode
     */
    omit?: EpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodeInclude<ExtArgs> | null
    /**
     * The data needed to update a Episode.
     */
    data: XOR<EpisodeUpdateInput, EpisodeUncheckedUpdateInput>
    /**
     * Choose, which Episode to update.
     */
    where: EpisodeWhereUniqueInput
  }

  /**
   * Episode updateMany
   */
  export type EpisodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Episodes.
     */
    data: XOR<EpisodeUpdateManyMutationInput, EpisodeUncheckedUpdateManyInput>
    /**
     * Filter which Episodes to update
     */
    where?: EpisodeWhereInput
    /**
     * Limit how many Episodes to update.
     */
    limit?: number
  }

  /**
   * Episode updateManyAndReturn
   */
  export type EpisodeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Episode
     */
    omit?: EpisodeOmit<ExtArgs> | null
    /**
     * The data used to update Episodes.
     */
    data: XOR<EpisodeUpdateManyMutationInput, EpisodeUncheckedUpdateManyInput>
    /**
     * Filter which Episodes to update
     */
    where?: EpisodeWhereInput
    /**
     * Limit how many Episodes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Episode upsert
   */
  export type EpisodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Episode
     */
    omit?: EpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodeInclude<ExtArgs> | null
    /**
     * The filter to search for the Episode to update in case it exists.
     */
    where: EpisodeWhereUniqueInput
    /**
     * In case the Episode found by the `where` argument doesn't exist, create a new Episode with this data.
     */
    create: XOR<EpisodeCreateInput, EpisodeUncheckedCreateInput>
    /**
     * In case the Episode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EpisodeUpdateInput, EpisodeUncheckedUpdateInput>
  }

  /**
   * Episode delete
   */
  export type EpisodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Episode
     */
    omit?: EpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodeInclude<ExtArgs> | null
    /**
     * Filter which Episode to delete.
     */
    where: EpisodeWhereUniqueInput
  }

  /**
   * Episode deleteMany
   */
  export type EpisodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Episodes to delete
     */
    where?: EpisodeWhereInput
    /**
     * Limit how many Episodes to delete.
     */
    limit?: number
  }

  /**
   * Episode.Bookmark
   */
  export type Episode$BookmarkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmark
     */
    omit?: BookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    where?: BookmarkWhereInput
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    cursor?: BookmarkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * Episode without action
   */
  export type EpisodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Episode
     */
    omit?: EpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodeInclude<ExtArgs> | null
  }


  /**
   * Model Manga
   */

  export type AggregateManga = {
    _count: MangaCountAggregateOutputType | null
    _avg: MangaAvgAggregateOutputType | null
    _sum: MangaSumAggregateOutputType | null
    _min: MangaMinAggregateOutputType | null
    _max: MangaMaxAggregateOutputType | null
  }

  export type MangaAvgAggregateOutputType = {
    id: number | null
    site: number | null
    coverId: number | null
    ageRestrictionId: number | null
    itemsCountId: number | null
    backgroundId: number | null
  }

  export type MangaSumAggregateOutputType = {
    id: number | null
    site: number | null
    coverId: number | null
    ageRestrictionId: number | null
    itemsCountId: number | null
    backgroundId: number | null
  }

  export type MangaMinAggregateOutputType = {
    id: number | null
    name: string | null
    eng_name: string | null
    slug_url: string | null
    summary: string | null
    model: $Enums.ModelName | null
    site: number | null
    isLicensed: boolean | null
    coverId: number | null
    ageRestrictionId: number | null
    itemsCountId: number | null
    backgroundId: number | null
  }

  export type MangaMaxAggregateOutputType = {
    id: number | null
    name: string | null
    eng_name: string | null
    slug_url: string | null
    summary: string | null
    model: $Enums.ModelName | null
    site: number | null
    isLicensed: boolean | null
    coverId: number | null
    ageRestrictionId: number | null
    itemsCountId: number | null
    backgroundId: number | null
  }

  export type MangaCountAggregateOutputType = {
    id: number
    name: number
    eng_name: number
    slug_url: number
    otherNames: number
    summary: number
    model: number
    site: number
    isLicensed: number
    coverId: number
    ageRestrictionId: number
    itemsCountId: number
    backgroundId: number
    _all: number
  }


  export type MangaAvgAggregateInputType = {
    id?: true
    site?: true
    coverId?: true
    ageRestrictionId?: true
    itemsCountId?: true
    backgroundId?: true
  }

  export type MangaSumAggregateInputType = {
    id?: true
    site?: true
    coverId?: true
    ageRestrictionId?: true
    itemsCountId?: true
    backgroundId?: true
  }

  export type MangaMinAggregateInputType = {
    id?: true
    name?: true
    eng_name?: true
    slug_url?: true
    summary?: true
    model?: true
    site?: true
    isLicensed?: true
    coverId?: true
    ageRestrictionId?: true
    itemsCountId?: true
    backgroundId?: true
  }

  export type MangaMaxAggregateInputType = {
    id?: true
    name?: true
    eng_name?: true
    slug_url?: true
    summary?: true
    model?: true
    site?: true
    isLicensed?: true
    coverId?: true
    ageRestrictionId?: true
    itemsCountId?: true
    backgroundId?: true
  }

  export type MangaCountAggregateInputType = {
    id?: true
    name?: true
    eng_name?: true
    slug_url?: true
    otherNames?: true
    summary?: true
    model?: true
    site?: true
    isLicensed?: true
    coverId?: true
    ageRestrictionId?: true
    itemsCountId?: true
    backgroundId?: true
    _all?: true
  }

  export type MangaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Manga to aggregate.
     */
    where?: MangaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Manga to fetch.
     */
    orderBy?: MangaOrderByWithRelationInput | MangaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MangaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Manga from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Manga.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Manga
    **/
    _count?: true | MangaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MangaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MangaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MangaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MangaMaxAggregateInputType
  }

  export type GetMangaAggregateType<T extends MangaAggregateArgs> = {
        [P in keyof T & keyof AggregateManga]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateManga[P]>
      : GetScalarType<T[P], AggregateManga[P]>
  }




  export type MangaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MangaWhereInput
    orderBy?: MangaOrderByWithAggregationInput | MangaOrderByWithAggregationInput[]
    by: MangaScalarFieldEnum[] | MangaScalarFieldEnum
    having?: MangaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MangaCountAggregateInputType | true
    _avg?: MangaAvgAggregateInputType
    _sum?: MangaSumAggregateInputType
    _min?: MangaMinAggregateInputType
    _max?: MangaMaxAggregateInputType
  }

  export type MangaGroupByOutputType = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames: string[]
    summary: string | null
    model: $Enums.ModelName
    site: number
    isLicensed: boolean
    coverId: number
    ageRestrictionId: number
    itemsCountId: number
    backgroundId: number
    _count: MangaCountAggregateOutputType | null
    _avg: MangaAvgAggregateOutputType | null
    _sum: MangaSumAggregateOutputType | null
    _min: MangaMinAggregateOutputType | null
    _max: MangaMaxAggregateOutputType | null
  }

  type GetMangaGroupByPayload<T extends MangaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MangaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MangaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MangaGroupByOutputType[P]>
            : GetScalarType<T[P], MangaGroupByOutputType[P]>
        }
      >
    >


  export type MangaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    eng_name?: boolean
    slug_url?: boolean
    otherNames?: boolean
    summary?: boolean
    model?: boolean
    site?: boolean
    isLicensed?: boolean
    coverId?: boolean
    ageRestrictionId?: boolean
    itemsCountId?: boolean
    backgroundId?: boolean
    cover?: boolean | CoverDefaultArgs<ExtArgs>
    ageRestriction?: boolean | AgeRestrictionDefaultArgs<ExtArgs>
    items_count?: boolean | ItemsCountDefaultArgs<ExtArgs>
    genres?: boolean | Manga$genresArgs<ExtArgs>
    background?: boolean | BackgroundDefaultArgs<ExtArgs>
    Chapter?: boolean | Manga$ChapterArgs<ExtArgs>
    relatedFrom?: boolean | Manga$relatedFromArgs<ExtArgs>
    relatedTo?: boolean | Manga$relatedToArgs<ExtArgs>
    Bookmark?: boolean | Manga$BookmarkArgs<ExtArgs>
    _count?: boolean | MangaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["manga"]>

  export type MangaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    eng_name?: boolean
    slug_url?: boolean
    otherNames?: boolean
    summary?: boolean
    model?: boolean
    site?: boolean
    isLicensed?: boolean
    coverId?: boolean
    ageRestrictionId?: boolean
    itemsCountId?: boolean
    backgroundId?: boolean
    cover?: boolean | CoverDefaultArgs<ExtArgs>
    ageRestriction?: boolean | AgeRestrictionDefaultArgs<ExtArgs>
    items_count?: boolean | ItemsCountDefaultArgs<ExtArgs>
    background?: boolean | BackgroundDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["manga"]>

  export type MangaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    eng_name?: boolean
    slug_url?: boolean
    otherNames?: boolean
    summary?: boolean
    model?: boolean
    site?: boolean
    isLicensed?: boolean
    coverId?: boolean
    ageRestrictionId?: boolean
    itemsCountId?: boolean
    backgroundId?: boolean
    cover?: boolean | CoverDefaultArgs<ExtArgs>
    ageRestriction?: boolean | AgeRestrictionDefaultArgs<ExtArgs>
    items_count?: boolean | ItemsCountDefaultArgs<ExtArgs>
    background?: boolean | BackgroundDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["manga"]>

  export type MangaSelectScalar = {
    id?: boolean
    name?: boolean
    eng_name?: boolean
    slug_url?: boolean
    otherNames?: boolean
    summary?: boolean
    model?: boolean
    site?: boolean
    isLicensed?: boolean
    coverId?: boolean
    ageRestrictionId?: boolean
    itemsCountId?: boolean
    backgroundId?: boolean
  }

  export type MangaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "eng_name" | "slug_url" | "otherNames" | "summary" | "model" | "site" | "isLicensed" | "coverId" | "ageRestrictionId" | "itemsCountId" | "backgroundId", ExtArgs["result"]["manga"]>
  export type MangaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cover?: boolean | CoverDefaultArgs<ExtArgs>
    ageRestriction?: boolean | AgeRestrictionDefaultArgs<ExtArgs>
    items_count?: boolean | ItemsCountDefaultArgs<ExtArgs>
    genres?: boolean | Manga$genresArgs<ExtArgs>
    background?: boolean | BackgroundDefaultArgs<ExtArgs>
    Chapter?: boolean | Manga$ChapterArgs<ExtArgs>
    relatedFrom?: boolean | Manga$relatedFromArgs<ExtArgs>
    relatedTo?: boolean | Manga$relatedToArgs<ExtArgs>
    Bookmark?: boolean | Manga$BookmarkArgs<ExtArgs>
    _count?: boolean | MangaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MangaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cover?: boolean | CoverDefaultArgs<ExtArgs>
    ageRestriction?: boolean | AgeRestrictionDefaultArgs<ExtArgs>
    items_count?: boolean | ItemsCountDefaultArgs<ExtArgs>
    background?: boolean | BackgroundDefaultArgs<ExtArgs>
  }
  export type MangaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cover?: boolean | CoverDefaultArgs<ExtArgs>
    ageRestriction?: boolean | AgeRestrictionDefaultArgs<ExtArgs>
    items_count?: boolean | ItemsCountDefaultArgs<ExtArgs>
    background?: boolean | BackgroundDefaultArgs<ExtArgs>
  }

  export type $MangaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Manga"
    objects: {
      cover: Prisma.$CoverPayload<ExtArgs>
      ageRestriction: Prisma.$AgeRestrictionPayload<ExtArgs>
      items_count: Prisma.$ItemsCountPayload<ExtArgs>
      genres: Prisma.$GenrePayload<ExtArgs>[]
      background: Prisma.$BackgroundPayload<ExtArgs>
      Chapter: Prisma.$ChapterPayload<ExtArgs>[]
      relatedFrom: Prisma.$RelatedPayload<ExtArgs>[]
      relatedTo: Prisma.$RelatedPayload<ExtArgs>[]
      Bookmark: Prisma.$BookmarkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      eng_name: string
      slug_url: string
      otherNames: string[]
      summary: string | null
      model: $Enums.ModelName
      site: number
      isLicensed: boolean
      coverId: number
      ageRestrictionId: number
      itemsCountId: number
      backgroundId: number
    }, ExtArgs["result"]["manga"]>
    composites: {}
  }

  type MangaGetPayload<S extends boolean | null | undefined | MangaDefaultArgs> = $Result.GetResult<Prisma.$MangaPayload, S>

  type MangaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MangaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MangaCountAggregateInputType | true
    }

  export interface MangaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Manga'], meta: { name: 'Manga' } }
    /**
     * Find zero or one Manga that matches the filter.
     * @param {MangaFindUniqueArgs} args - Arguments to find a Manga
     * @example
     * // Get one Manga
     * const manga = await prisma.manga.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MangaFindUniqueArgs>(args: SelectSubset<T, MangaFindUniqueArgs<ExtArgs>>): Prisma__MangaClient<$Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Manga that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MangaFindUniqueOrThrowArgs} args - Arguments to find a Manga
     * @example
     * // Get one Manga
     * const manga = await prisma.manga.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MangaFindUniqueOrThrowArgs>(args: SelectSubset<T, MangaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MangaClient<$Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Manga that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MangaFindFirstArgs} args - Arguments to find a Manga
     * @example
     * // Get one Manga
     * const manga = await prisma.manga.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MangaFindFirstArgs>(args?: SelectSubset<T, MangaFindFirstArgs<ExtArgs>>): Prisma__MangaClient<$Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Manga that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MangaFindFirstOrThrowArgs} args - Arguments to find a Manga
     * @example
     * // Get one Manga
     * const manga = await prisma.manga.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MangaFindFirstOrThrowArgs>(args?: SelectSubset<T, MangaFindFirstOrThrowArgs<ExtArgs>>): Prisma__MangaClient<$Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Manga that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MangaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Manga
     * const manga = await prisma.manga.findMany()
     * 
     * // Get first 10 Manga
     * const manga = await prisma.manga.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mangaWithIdOnly = await prisma.manga.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MangaFindManyArgs>(args?: SelectSubset<T, MangaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Manga.
     * @param {MangaCreateArgs} args - Arguments to create a Manga.
     * @example
     * // Create one Manga
     * const Manga = await prisma.manga.create({
     *   data: {
     *     // ... data to create a Manga
     *   }
     * })
     * 
     */
    create<T extends MangaCreateArgs>(args: SelectSubset<T, MangaCreateArgs<ExtArgs>>): Prisma__MangaClient<$Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Manga.
     * @param {MangaCreateManyArgs} args - Arguments to create many Manga.
     * @example
     * // Create many Manga
     * const manga = await prisma.manga.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MangaCreateManyArgs>(args?: SelectSubset<T, MangaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Manga and returns the data saved in the database.
     * @param {MangaCreateManyAndReturnArgs} args - Arguments to create many Manga.
     * @example
     * // Create many Manga
     * const manga = await prisma.manga.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Manga and only return the `id`
     * const mangaWithIdOnly = await prisma.manga.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MangaCreateManyAndReturnArgs>(args?: SelectSubset<T, MangaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Manga.
     * @param {MangaDeleteArgs} args - Arguments to delete one Manga.
     * @example
     * // Delete one Manga
     * const Manga = await prisma.manga.delete({
     *   where: {
     *     // ... filter to delete one Manga
     *   }
     * })
     * 
     */
    delete<T extends MangaDeleteArgs>(args: SelectSubset<T, MangaDeleteArgs<ExtArgs>>): Prisma__MangaClient<$Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Manga.
     * @param {MangaUpdateArgs} args - Arguments to update one Manga.
     * @example
     * // Update one Manga
     * const manga = await prisma.manga.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MangaUpdateArgs>(args: SelectSubset<T, MangaUpdateArgs<ExtArgs>>): Prisma__MangaClient<$Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Manga.
     * @param {MangaDeleteManyArgs} args - Arguments to filter Manga to delete.
     * @example
     * // Delete a few Manga
     * const { count } = await prisma.manga.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MangaDeleteManyArgs>(args?: SelectSubset<T, MangaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Manga.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MangaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Manga
     * const manga = await prisma.manga.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MangaUpdateManyArgs>(args: SelectSubset<T, MangaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Manga and returns the data updated in the database.
     * @param {MangaUpdateManyAndReturnArgs} args - Arguments to update many Manga.
     * @example
     * // Update many Manga
     * const manga = await prisma.manga.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Manga and only return the `id`
     * const mangaWithIdOnly = await prisma.manga.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MangaUpdateManyAndReturnArgs>(args: SelectSubset<T, MangaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Manga.
     * @param {MangaUpsertArgs} args - Arguments to update or create a Manga.
     * @example
     * // Update or create a Manga
     * const manga = await prisma.manga.upsert({
     *   create: {
     *     // ... data to create a Manga
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Manga we want to update
     *   }
     * })
     */
    upsert<T extends MangaUpsertArgs>(args: SelectSubset<T, MangaUpsertArgs<ExtArgs>>): Prisma__MangaClient<$Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Manga.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MangaCountArgs} args - Arguments to filter Manga to count.
     * @example
     * // Count the number of Manga
     * const count = await prisma.manga.count({
     *   where: {
     *     // ... the filter for the Manga we want to count
     *   }
     * })
    **/
    count<T extends MangaCountArgs>(
      args?: Subset<T, MangaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MangaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Manga.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MangaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MangaAggregateArgs>(args: Subset<T, MangaAggregateArgs>): Prisma.PrismaPromise<GetMangaAggregateType<T>>

    /**
     * Group by Manga.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MangaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MangaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MangaGroupByArgs['orderBy'] }
        : { orderBy?: MangaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MangaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMangaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Manga model
   */
  readonly fields: MangaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Manga.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MangaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cover<T extends CoverDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoverDefaultArgs<ExtArgs>>): Prisma__CoverClient<$Result.GetResult<Prisma.$CoverPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ageRestriction<T extends AgeRestrictionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgeRestrictionDefaultArgs<ExtArgs>>): Prisma__AgeRestrictionClient<$Result.GetResult<Prisma.$AgeRestrictionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    items_count<T extends ItemsCountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ItemsCountDefaultArgs<ExtArgs>>): Prisma__ItemsCountClient<$Result.GetResult<Prisma.$ItemsCountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    genres<T extends Manga$genresArgs<ExtArgs> = {}>(args?: Subset<T, Manga$genresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    background<T extends BackgroundDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BackgroundDefaultArgs<ExtArgs>>): Prisma__BackgroundClient<$Result.GetResult<Prisma.$BackgroundPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Chapter<T extends Manga$ChapterArgs<ExtArgs> = {}>(args?: Subset<T, Manga$ChapterArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    relatedFrom<T extends Manga$relatedFromArgs<ExtArgs> = {}>(args?: Subset<T, Manga$relatedFromArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    relatedTo<T extends Manga$relatedToArgs<ExtArgs> = {}>(args?: Subset<T, Manga$relatedToArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Bookmark<T extends Manga$BookmarkArgs<ExtArgs> = {}>(args?: Subset<T, Manga$BookmarkArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Manga model
   */
  interface MangaFieldRefs {
    readonly id: FieldRef<"Manga", 'Int'>
    readonly name: FieldRef<"Manga", 'String'>
    readonly eng_name: FieldRef<"Manga", 'String'>
    readonly slug_url: FieldRef<"Manga", 'String'>
    readonly otherNames: FieldRef<"Manga", 'String[]'>
    readonly summary: FieldRef<"Manga", 'String'>
    readonly model: FieldRef<"Manga", 'ModelName'>
    readonly site: FieldRef<"Manga", 'Int'>
    readonly isLicensed: FieldRef<"Manga", 'Boolean'>
    readonly coverId: FieldRef<"Manga", 'Int'>
    readonly ageRestrictionId: FieldRef<"Manga", 'Int'>
    readonly itemsCountId: FieldRef<"Manga", 'Int'>
    readonly backgroundId: FieldRef<"Manga", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Manga findUnique
   */
  export type MangaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manga
     */
    select?: MangaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Manga
     */
    omit?: MangaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaInclude<ExtArgs> | null
    /**
     * Filter, which Manga to fetch.
     */
    where: MangaWhereUniqueInput
  }

  /**
   * Manga findUniqueOrThrow
   */
  export type MangaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manga
     */
    select?: MangaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Manga
     */
    omit?: MangaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaInclude<ExtArgs> | null
    /**
     * Filter, which Manga to fetch.
     */
    where: MangaWhereUniqueInput
  }

  /**
   * Manga findFirst
   */
  export type MangaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manga
     */
    select?: MangaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Manga
     */
    omit?: MangaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaInclude<ExtArgs> | null
    /**
     * Filter, which Manga to fetch.
     */
    where?: MangaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Manga to fetch.
     */
    orderBy?: MangaOrderByWithRelationInput | MangaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Manga.
     */
    cursor?: MangaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Manga from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Manga.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Manga.
     */
    distinct?: MangaScalarFieldEnum | MangaScalarFieldEnum[]
  }

  /**
   * Manga findFirstOrThrow
   */
  export type MangaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manga
     */
    select?: MangaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Manga
     */
    omit?: MangaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaInclude<ExtArgs> | null
    /**
     * Filter, which Manga to fetch.
     */
    where?: MangaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Manga to fetch.
     */
    orderBy?: MangaOrderByWithRelationInput | MangaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Manga.
     */
    cursor?: MangaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Manga from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Manga.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Manga.
     */
    distinct?: MangaScalarFieldEnum | MangaScalarFieldEnum[]
  }

  /**
   * Manga findMany
   */
  export type MangaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manga
     */
    select?: MangaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Manga
     */
    omit?: MangaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaInclude<ExtArgs> | null
    /**
     * Filter, which Manga to fetch.
     */
    where?: MangaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Manga to fetch.
     */
    orderBy?: MangaOrderByWithRelationInput | MangaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Manga.
     */
    cursor?: MangaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Manga from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Manga.
     */
    skip?: number
    distinct?: MangaScalarFieldEnum | MangaScalarFieldEnum[]
  }

  /**
   * Manga create
   */
  export type MangaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manga
     */
    select?: MangaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Manga
     */
    omit?: MangaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaInclude<ExtArgs> | null
    /**
     * The data needed to create a Manga.
     */
    data: XOR<MangaCreateInput, MangaUncheckedCreateInput>
  }

  /**
   * Manga createMany
   */
  export type MangaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Manga.
     */
    data: MangaCreateManyInput | MangaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Manga createManyAndReturn
   */
  export type MangaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manga
     */
    select?: MangaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Manga
     */
    omit?: MangaOmit<ExtArgs> | null
    /**
     * The data used to create many Manga.
     */
    data: MangaCreateManyInput | MangaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Manga update
   */
  export type MangaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manga
     */
    select?: MangaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Manga
     */
    omit?: MangaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaInclude<ExtArgs> | null
    /**
     * The data needed to update a Manga.
     */
    data: XOR<MangaUpdateInput, MangaUncheckedUpdateInput>
    /**
     * Choose, which Manga to update.
     */
    where: MangaWhereUniqueInput
  }

  /**
   * Manga updateMany
   */
  export type MangaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Manga.
     */
    data: XOR<MangaUpdateManyMutationInput, MangaUncheckedUpdateManyInput>
    /**
     * Filter which Manga to update
     */
    where?: MangaWhereInput
    /**
     * Limit how many Manga to update.
     */
    limit?: number
  }

  /**
   * Manga updateManyAndReturn
   */
  export type MangaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manga
     */
    select?: MangaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Manga
     */
    omit?: MangaOmit<ExtArgs> | null
    /**
     * The data used to update Manga.
     */
    data: XOR<MangaUpdateManyMutationInput, MangaUncheckedUpdateManyInput>
    /**
     * Filter which Manga to update
     */
    where?: MangaWhereInput
    /**
     * Limit how many Manga to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Manga upsert
   */
  export type MangaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manga
     */
    select?: MangaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Manga
     */
    omit?: MangaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaInclude<ExtArgs> | null
    /**
     * The filter to search for the Manga to update in case it exists.
     */
    where: MangaWhereUniqueInput
    /**
     * In case the Manga found by the `where` argument doesn't exist, create a new Manga with this data.
     */
    create: XOR<MangaCreateInput, MangaUncheckedCreateInput>
    /**
     * In case the Manga was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MangaUpdateInput, MangaUncheckedUpdateInput>
  }

  /**
   * Manga delete
   */
  export type MangaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manga
     */
    select?: MangaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Manga
     */
    omit?: MangaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaInclude<ExtArgs> | null
    /**
     * Filter which Manga to delete.
     */
    where: MangaWhereUniqueInput
  }

  /**
   * Manga deleteMany
   */
  export type MangaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Manga to delete
     */
    where?: MangaWhereInput
    /**
     * Limit how many Manga to delete.
     */
    limit?: number
  }

  /**
   * Manga.genres
   */
  export type Manga$genresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    where?: GenreWhereInput
    orderBy?: GenreOrderByWithRelationInput | GenreOrderByWithRelationInput[]
    cursor?: GenreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GenreScalarFieldEnum | GenreScalarFieldEnum[]
  }

  /**
   * Manga.Chapter
   */
  export type Manga$ChapterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    where?: ChapterWhereInput
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    cursor?: ChapterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }

  /**
   * Manga.relatedFrom
   */
  export type Manga$relatedFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Related
     */
    select?: RelatedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Related
     */
    omit?: RelatedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedInclude<ExtArgs> | null
    where?: RelatedWhereInput
    orderBy?: RelatedOrderByWithRelationInput | RelatedOrderByWithRelationInput[]
    cursor?: RelatedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RelatedScalarFieldEnum | RelatedScalarFieldEnum[]
  }

  /**
   * Manga.relatedTo
   */
  export type Manga$relatedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Related
     */
    select?: RelatedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Related
     */
    omit?: RelatedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedInclude<ExtArgs> | null
    where?: RelatedWhereInput
    orderBy?: RelatedOrderByWithRelationInput | RelatedOrderByWithRelationInput[]
    cursor?: RelatedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RelatedScalarFieldEnum | RelatedScalarFieldEnum[]
  }

  /**
   * Manga.Bookmark
   */
  export type Manga$BookmarkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmark
     */
    omit?: BookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    where?: BookmarkWhereInput
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    cursor?: BookmarkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * Manga without action
   */
  export type MangaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manga
     */
    select?: MangaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Manga
     */
    omit?: MangaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaInclude<ExtArgs> | null
  }


  /**
   * Model ItemsCount
   */

  export type AggregateItemsCount = {
    _count: ItemsCountCountAggregateOutputType | null
    _avg: ItemsCountAvgAggregateOutputType | null
    _sum: ItemsCountSumAggregateOutputType | null
    _min: ItemsCountMinAggregateOutputType | null
    _max: ItemsCountMaxAggregateOutputType | null
  }

  export type ItemsCountAvgAggregateOutputType = {
    id: number | null
    uploaded: number | null
  }

  export type ItemsCountSumAggregateOutputType = {
    id: number | null
    uploaded: number | null
  }

  export type ItemsCountMinAggregateOutputType = {
    id: number | null
    uploaded: number | null
  }

  export type ItemsCountMaxAggregateOutputType = {
    id: number | null
    uploaded: number | null
  }

  export type ItemsCountCountAggregateOutputType = {
    id: number
    uploaded: number
    _all: number
  }


  export type ItemsCountAvgAggregateInputType = {
    id?: true
    uploaded?: true
  }

  export type ItemsCountSumAggregateInputType = {
    id?: true
    uploaded?: true
  }

  export type ItemsCountMinAggregateInputType = {
    id?: true
    uploaded?: true
  }

  export type ItemsCountMaxAggregateInputType = {
    id?: true
    uploaded?: true
  }

  export type ItemsCountCountAggregateInputType = {
    id?: true
    uploaded?: true
    _all?: true
  }

  export type ItemsCountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ItemsCount to aggregate.
     */
    where?: ItemsCountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemsCounts to fetch.
     */
    orderBy?: ItemsCountOrderByWithRelationInput | ItemsCountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItemsCountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemsCounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemsCounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ItemsCounts
    **/
    _count?: true | ItemsCountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemsCountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemsCountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemsCountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemsCountMaxAggregateInputType
  }

  export type GetItemsCountAggregateType<T extends ItemsCountAggregateArgs> = {
        [P in keyof T & keyof AggregateItemsCount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItemsCount[P]>
      : GetScalarType<T[P], AggregateItemsCount[P]>
  }




  export type ItemsCountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemsCountWhereInput
    orderBy?: ItemsCountOrderByWithAggregationInput | ItemsCountOrderByWithAggregationInput[]
    by: ItemsCountScalarFieldEnum[] | ItemsCountScalarFieldEnum
    having?: ItemsCountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemsCountCountAggregateInputType | true
    _avg?: ItemsCountAvgAggregateInputType
    _sum?: ItemsCountSumAggregateInputType
    _min?: ItemsCountMinAggregateInputType
    _max?: ItemsCountMaxAggregateInputType
  }

  export type ItemsCountGroupByOutputType = {
    id: number
    uploaded: number
    _count: ItemsCountCountAggregateOutputType | null
    _avg: ItemsCountAvgAggregateOutputType | null
    _sum: ItemsCountSumAggregateOutputType | null
    _min: ItemsCountMinAggregateOutputType | null
    _max: ItemsCountMaxAggregateOutputType | null
  }

  type GetItemsCountGroupByPayload<T extends ItemsCountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemsCountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemsCountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemsCountGroupByOutputType[P]>
            : GetScalarType<T[P], ItemsCountGroupByOutputType[P]>
        }
      >
    >


  export type ItemsCountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uploaded?: boolean
    Manga?: boolean | ItemsCount$MangaArgs<ExtArgs>
    _count?: boolean | ItemsCountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["itemsCount"]>

  export type ItemsCountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uploaded?: boolean
  }, ExtArgs["result"]["itemsCount"]>

  export type ItemsCountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uploaded?: boolean
  }, ExtArgs["result"]["itemsCount"]>

  export type ItemsCountSelectScalar = {
    id?: boolean
    uploaded?: boolean
  }

  export type ItemsCountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "uploaded", ExtArgs["result"]["itemsCount"]>
  export type ItemsCountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Manga?: boolean | ItemsCount$MangaArgs<ExtArgs>
    _count?: boolean | ItemsCountCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ItemsCountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ItemsCountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ItemsCountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ItemsCount"
    objects: {
      Manga: Prisma.$MangaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      uploaded: number
    }, ExtArgs["result"]["itemsCount"]>
    composites: {}
  }

  type ItemsCountGetPayload<S extends boolean | null | undefined | ItemsCountDefaultArgs> = $Result.GetResult<Prisma.$ItemsCountPayload, S>

  type ItemsCountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ItemsCountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ItemsCountCountAggregateInputType | true
    }

  export interface ItemsCountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ItemsCount'], meta: { name: 'ItemsCount' } }
    /**
     * Find zero or one ItemsCount that matches the filter.
     * @param {ItemsCountFindUniqueArgs} args - Arguments to find a ItemsCount
     * @example
     * // Get one ItemsCount
     * const itemsCount = await prisma.itemsCount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ItemsCountFindUniqueArgs>(args: SelectSubset<T, ItemsCountFindUniqueArgs<ExtArgs>>): Prisma__ItemsCountClient<$Result.GetResult<Prisma.$ItemsCountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ItemsCount that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ItemsCountFindUniqueOrThrowArgs} args - Arguments to find a ItemsCount
     * @example
     * // Get one ItemsCount
     * const itemsCount = await prisma.itemsCount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ItemsCountFindUniqueOrThrowArgs>(args: SelectSubset<T, ItemsCountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ItemsCountClient<$Result.GetResult<Prisma.$ItemsCountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ItemsCount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsCountFindFirstArgs} args - Arguments to find a ItemsCount
     * @example
     * // Get one ItemsCount
     * const itemsCount = await prisma.itemsCount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ItemsCountFindFirstArgs>(args?: SelectSubset<T, ItemsCountFindFirstArgs<ExtArgs>>): Prisma__ItemsCountClient<$Result.GetResult<Prisma.$ItemsCountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ItemsCount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsCountFindFirstOrThrowArgs} args - Arguments to find a ItemsCount
     * @example
     * // Get one ItemsCount
     * const itemsCount = await prisma.itemsCount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ItemsCountFindFirstOrThrowArgs>(args?: SelectSubset<T, ItemsCountFindFirstOrThrowArgs<ExtArgs>>): Prisma__ItemsCountClient<$Result.GetResult<Prisma.$ItemsCountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ItemsCounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsCountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ItemsCounts
     * const itemsCounts = await prisma.itemsCount.findMany()
     * 
     * // Get first 10 ItemsCounts
     * const itemsCounts = await prisma.itemsCount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemsCountWithIdOnly = await prisma.itemsCount.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ItemsCountFindManyArgs>(args?: SelectSubset<T, ItemsCountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemsCountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ItemsCount.
     * @param {ItemsCountCreateArgs} args - Arguments to create a ItemsCount.
     * @example
     * // Create one ItemsCount
     * const ItemsCount = await prisma.itemsCount.create({
     *   data: {
     *     // ... data to create a ItemsCount
     *   }
     * })
     * 
     */
    create<T extends ItemsCountCreateArgs>(args: SelectSubset<T, ItemsCountCreateArgs<ExtArgs>>): Prisma__ItemsCountClient<$Result.GetResult<Prisma.$ItemsCountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ItemsCounts.
     * @param {ItemsCountCreateManyArgs} args - Arguments to create many ItemsCounts.
     * @example
     * // Create many ItemsCounts
     * const itemsCount = await prisma.itemsCount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ItemsCountCreateManyArgs>(args?: SelectSubset<T, ItemsCountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ItemsCounts and returns the data saved in the database.
     * @param {ItemsCountCreateManyAndReturnArgs} args - Arguments to create many ItemsCounts.
     * @example
     * // Create many ItemsCounts
     * const itemsCount = await prisma.itemsCount.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ItemsCounts and only return the `id`
     * const itemsCountWithIdOnly = await prisma.itemsCount.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ItemsCountCreateManyAndReturnArgs>(args?: SelectSubset<T, ItemsCountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemsCountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ItemsCount.
     * @param {ItemsCountDeleteArgs} args - Arguments to delete one ItemsCount.
     * @example
     * // Delete one ItemsCount
     * const ItemsCount = await prisma.itemsCount.delete({
     *   where: {
     *     // ... filter to delete one ItemsCount
     *   }
     * })
     * 
     */
    delete<T extends ItemsCountDeleteArgs>(args: SelectSubset<T, ItemsCountDeleteArgs<ExtArgs>>): Prisma__ItemsCountClient<$Result.GetResult<Prisma.$ItemsCountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ItemsCount.
     * @param {ItemsCountUpdateArgs} args - Arguments to update one ItemsCount.
     * @example
     * // Update one ItemsCount
     * const itemsCount = await prisma.itemsCount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ItemsCountUpdateArgs>(args: SelectSubset<T, ItemsCountUpdateArgs<ExtArgs>>): Prisma__ItemsCountClient<$Result.GetResult<Prisma.$ItemsCountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ItemsCounts.
     * @param {ItemsCountDeleteManyArgs} args - Arguments to filter ItemsCounts to delete.
     * @example
     * // Delete a few ItemsCounts
     * const { count } = await prisma.itemsCount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ItemsCountDeleteManyArgs>(args?: SelectSubset<T, ItemsCountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ItemsCounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsCountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ItemsCounts
     * const itemsCount = await prisma.itemsCount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ItemsCountUpdateManyArgs>(args: SelectSubset<T, ItemsCountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ItemsCounts and returns the data updated in the database.
     * @param {ItemsCountUpdateManyAndReturnArgs} args - Arguments to update many ItemsCounts.
     * @example
     * // Update many ItemsCounts
     * const itemsCount = await prisma.itemsCount.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ItemsCounts and only return the `id`
     * const itemsCountWithIdOnly = await prisma.itemsCount.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ItemsCountUpdateManyAndReturnArgs>(args: SelectSubset<T, ItemsCountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemsCountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ItemsCount.
     * @param {ItemsCountUpsertArgs} args - Arguments to update or create a ItemsCount.
     * @example
     * // Update or create a ItemsCount
     * const itemsCount = await prisma.itemsCount.upsert({
     *   create: {
     *     // ... data to create a ItemsCount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ItemsCount we want to update
     *   }
     * })
     */
    upsert<T extends ItemsCountUpsertArgs>(args: SelectSubset<T, ItemsCountUpsertArgs<ExtArgs>>): Prisma__ItemsCountClient<$Result.GetResult<Prisma.$ItemsCountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ItemsCounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsCountCountArgs} args - Arguments to filter ItemsCounts to count.
     * @example
     * // Count the number of ItemsCounts
     * const count = await prisma.itemsCount.count({
     *   where: {
     *     // ... the filter for the ItemsCounts we want to count
     *   }
     * })
    **/
    count<T extends ItemsCountCountArgs>(
      args?: Subset<T, ItemsCountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemsCountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ItemsCount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsCountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemsCountAggregateArgs>(args: Subset<T, ItemsCountAggregateArgs>): Prisma.PrismaPromise<GetItemsCountAggregateType<T>>

    /**
     * Group by ItemsCount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsCountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemsCountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemsCountGroupByArgs['orderBy'] }
        : { orderBy?: ItemsCountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemsCountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemsCountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ItemsCount model
   */
  readonly fields: ItemsCountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ItemsCount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ItemsCountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Manga<T extends ItemsCount$MangaArgs<ExtArgs> = {}>(args?: Subset<T, ItemsCount$MangaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ItemsCount model
   */
  interface ItemsCountFieldRefs {
    readonly id: FieldRef<"ItemsCount", 'Int'>
    readonly uploaded: FieldRef<"ItemsCount", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ItemsCount findUnique
   */
  export type ItemsCountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemsCount
     */
    select?: ItemsCountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemsCount
     */
    omit?: ItemsCountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemsCountInclude<ExtArgs> | null
    /**
     * Filter, which ItemsCount to fetch.
     */
    where: ItemsCountWhereUniqueInput
  }

  /**
   * ItemsCount findUniqueOrThrow
   */
  export type ItemsCountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemsCount
     */
    select?: ItemsCountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemsCount
     */
    omit?: ItemsCountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemsCountInclude<ExtArgs> | null
    /**
     * Filter, which ItemsCount to fetch.
     */
    where: ItemsCountWhereUniqueInput
  }

  /**
   * ItemsCount findFirst
   */
  export type ItemsCountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemsCount
     */
    select?: ItemsCountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemsCount
     */
    omit?: ItemsCountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemsCountInclude<ExtArgs> | null
    /**
     * Filter, which ItemsCount to fetch.
     */
    where?: ItemsCountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemsCounts to fetch.
     */
    orderBy?: ItemsCountOrderByWithRelationInput | ItemsCountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ItemsCounts.
     */
    cursor?: ItemsCountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemsCounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemsCounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ItemsCounts.
     */
    distinct?: ItemsCountScalarFieldEnum | ItemsCountScalarFieldEnum[]
  }

  /**
   * ItemsCount findFirstOrThrow
   */
  export type ItemsCountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemsCount
     */
    select?: ItemsCountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemsCount
     */
    omit?: ItemsCountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemsCountInclude<ExtArgs> | null
    /**
     * Filter, which ItemsCount to fetch.
     */
    where?: ItemsCountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemsCounts to fetch.
     */
    orderBy?: ItemsCountOrderByWithRelationInput | ItemsCountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ItemsCounts.
     */
    cursor?: ItemsCountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemsCounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemsCounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ItemsCounts.
     */
    distinct?: ItemsCountScalarFieldEnum | ItemsCountScalarFieldEnum[]
  }

  /**
   * ItemsCount findMany
   */
  export type ItemsCountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemsCount
     */
    select?: ItemsCountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemsCount
     */
    omit?: ItemsCountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemsCountInclude<ExtArgs> | null
    /**
     * Filter, which ItemsCounts to fetch.
     */
    where?: ItemsCountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemsCounts to fetch.
     */
    orderBy?: ItemsCountOrderByWithRelationInput | ItemsCountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ItemsCounts.
     */
    cursor?: ItemsCountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemsCounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemsCounts.
     */
    skip?: number
    distinct?: ItemsCountScalarFieldEnum | ItemsCountScalarFieldEnum[]
  }

  /**
   * ItemsCount create
   */
  export type ItemsCountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemsCount
     */
    select?: ItemsCountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemsCount
     */
    omit?: ItemsCountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemsCountInclude<ExtArgs> | null
    /**
     * The data needed to create a ItemsCount.
     */
    data: XOR<ItemsCountCreateInput, ItemsCountUncheckedCreateInput>
  }

  /**
   * ItemsCount createMany
   */
  export type ItemsCountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ItemsCounts.
     */
    data: ItemsCountCreateManyInput | ItemsCountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ItemsCount createManyAndReturn
   */
  export type ItemsCountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemsCount
     */
    select?: ItemsCountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ItemsCount
     */
    omit?: ItemsCountOmit<ExtArgs> | null
    /**
     * The data used to create many ItemsCounts.
     */
    data: ItemsCountCreateManyInput | ItemsCountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ItemsCount update
   */
  export type ItemsCountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemsCount
     */
    select?: ItemsCountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemsCount
     */
    omit?: ItemsCountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemsCountInclude<ExtArgs> | null
    /**
     * The data needed to update a ItemsCount.
     */
    data: XOR<ItemsCountUpdateInput, ItemsCountUncheckedUpdateInput>
    /**
     * Choose, which ItemsCount to update.
     */
    where: ItemsCountWhereUniqueInput
  }

  /**
   * ItemsCount updateMany
   */
  export type ItemsCountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ItemsCounts.
     */
    data: XOR<ItemsCountUpdateManyMutationInput, ItemsCountUncheckedUpdateManyInput>
    /**
     * Filter which ItemsCounts to update
     */
    where?: ItemsCountWhereInput
    /**
     * Limit how many ItemsCounts to update.
     */
    limit?: number
  }

  /**
   * ItemsCount updateManyAndReturn
   */
  export type ItemsCountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemsCount
     */
    select?: ItemsCountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ItemsCount
     */
    omit?: ItemsCountOmit<ExtArgs> | null
    /**
     * The data used to update ItemsCounts.
     */
    data: XOR<ItemsCountUpdateManyMutationInput, ItemsCountUncheckedUpdateManyInput>
    /**
     * Filter which ItemsCounts to update
     */
    where?: ItemsCountWhereInput
    /**
     * Limit how many ItemsCounts to update.
     */
    limit?: number
  }

  /**
   * ItemsCount upsert
   */
  export type ItemsCountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemsCount
     */
    select?: ItemsCountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemsCount
     */
    omit?: ItemsCountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemsCountInclude<ExtArgs> | null
    /**
     * The filter to search for the ItemsCount to update in case it exists.
     */
    where: ItemsCountWhereUniqueInput
    /**
     * In case the ItemsCount found by the `where` argument doesn't exist, create a new ItemsCount with this data.
     */
    create: XOR<ItemsCountCreateInput, ItemsCountUncheckedCreateInput>
    /**
     * In case the ItemsCount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItemsCountUpdateInput, ItemsCountUncheckedUpdateInput>
  }

  /**
   * ItemsCount delete
   */
  export type ItemsCountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemsCount
     */
    select?: ItemsCountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemsCount
     */
    omit?: ItemsCountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemsCountInclude<ExtArgs> | null
    /**
     * Filter which ItemsCount to delete.
     */
    where: ItemsCountWhereUniqueInput
  }

  /**
   * ItemsCount deleteMany
   */
  export type ItemsCountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ItemsCounts to delete
     */
    where?: ItemsCountWhereInput
    /**
     * Limit how many ItemsCounts to delete.
     */
    limit?: number
  }

  /**
   * ItemsCount.Manga
   */
  export type ItemsCount$MangaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manga
     */
    select?: MangaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Manga
     */
    omit?: MangaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaInclude<ExtArgs> | null
    where?: MangaWhereInput
    orderBy?: MangaOrderByWithRelationInput | MangaOrderByWithRelationInput[]
    cursor?: MangaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MangaScalarFieldEnum | MangaScalarFieldEnum[]
  }

  /**
   * ItemsCount without action
   */
  export type ItemsCountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemsCount
     */
    select?: ItemsCountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemsCount
     */
    omit?: ItemsCountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemsCountInclude<ExtArgs> | null
  }


  /**
   * Model Chapter
   */

  export type AggregateChapter = {
    _count: ChapterCountAggregateOutputType | null
    _avg: ChapterAvgAggregateOutputType | null
    _sum: ChapterSumAggregateOutputType | null
    _min: ChapterMinAggregateOutputType | null
    _max: ChapterMaxAggregateOutputType | null
  }

  export type ChapterAvgAggregateOutputType = {
    id: number | null
    likes_count: number | null
    manga_id: number | null
    item_number: number | null
    count: number | null
  }

  export type ChapterSumAggregateOutputType = {
    id: number | null
    likes_count: number | null
    manga_id: number | null
    item_number: number | null
    count: number | null
  }

  export type ChapterMinAggregateOutputType = {
    id: number | null
    created_at: Date | null
    likes_count: number | null
    manga_id: number | null
    name: string | null
    number: string | null
    item_number: number | null
    number_secondary: string | null
    slug: string | null
    volume: string | null
    count: number | null
  }

  export type ChapterMaxAggregateOutputType = {
    id: number | null
    created_at: Date | null
    likes_count: number | null
    manga_id: number | null
    name: string | null
    number: string | null
    item_number: number | null
    number_secondary: string | null
    slug: string | null
    volume: string | null
    count: number | null
  }

  export type ChapterCountAggregateOutputType = {
    id: number
    created_at: number
    likes_count: number
    manga_id: number
    name: number
    number: number
    item_number: number
    number_secondary: number
    slug: number
    volume: number
    count: number
    _all: number
  }


  export type ChapterAvgAggregateInputType = {
    id?: true
    likes_count?: true
    manga_id?: true
    item_number?: true
    count?: true
  }

  export type ChapterSumAggregateInputType = {
    id?: true
    likes_count?: true
    manga_id?: true
    item_number?: true
    count?: true
  }

  export type ChapterMinAggregateInputType = {
    id?: true
    created_at?: true
    likes_count?: true
    manga_id?: true
    name?: true
    number?: true
    item_number?: true
    number_secondary?: true
    slug?: true
    volume?: true
    count?: true
  }

  export type ChapterMaxAggregateInputType = {
    id?: true
    created_at?: true
    likes_count?: true
    manga_id?: true
    name?: true
    number?: true
    item_number?: true
    number_secondary?: true
    slug?: true
    volume?: true
    count?: true
  }

  export type ChapterCountAggregateInputType = {
    id?: true
    created_at?: true
    likes_count?: true
    manga_id?: true
    name?: true
    number?: true
    item_number?: true
    number_secondary?: true
    slug?: true
    volume?: true
    count?: true
    _all?: true
  }

  export type ChapterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chapter to aggregate.
     */
    where?: ChapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chapters to fetch.
     */
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Chapters
    **/
    _count?: true | ChapterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChapterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChapterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChapterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChapterMaxAggregateInputType
  }

  export type GetChapterAggregateType<T extends ChapterAggregateArgs> = {
        [P in keyof T & keyof AggregateChapter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChapter[P]>
      : GetScalarType<T[P], AggregateChapter[P]>
  }




  export type ChapterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChapterWhereInput
    orderBy?: ChapterOrderByWithAggregationInput | ChapterOrderByWithAggregationInput[]
    by: ChapterScalarFieldEnum[] | ChapterScalarFieldEnum
    having?: ChapterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChapterCountAggregateInputType | true
    _avg?: ChapterAvgAggregateInputType
    _sum?: ChapterSumAggregateInputType
    _min?: ChapterMinAggregateInputType
    _max?: ChapterMaxAggregateInputType
  }

  export type ChapterGroupByOutputType = {
    id: number
    created_at: Date
    likes_count: number
    manga_id: number
    name: string | null
    number: string
    item_number: number
    number_secondary: string
    slug: string
    volume: string
    count: number
    _count: ChapterCountAggregateOutputType | null
    _avg: ChapterAvgAggregateOutputType | null
    _sum: ChapterSumAggregateOutputType | null
    _min: ChapterMinAggregateOutputType | null
    _max: ChapterMaxAggregateOutputType | null
  }

  type GetChapterGroupByPayload<T extends ChapterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChapterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChapterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChapterGroupByOutputType[P]>
            : GetScalarType<T[P], ChapterGroupByOutputType[P]>
        }
      >
    >


  export type ChapterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    likes_count?: boolean
    manga_id?: boolean
    name?: boolean
    number?: boolean
    item_number?: boolean
    number_secondary?: boolean
    slug?: boolean
    volume?: boolean
    count?: boolean
    pages?: boolean | Chapter$pagesArgs<ExtArgs>
    manga?: boolean | MangaDefaultArgs<ExtArgs>
    Bookmark?: boolean | Chapter$BookmarkArgs<ExtArgs>
    _count?: boolean | ChapterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chapter"]>

  export type ChapterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    likes_count?: boolean
    manga_id?: boolean
    name?: boolean
    number?: boolean
    item_number?: boolean
    number_secondary?: boolean
    slug?: boolean
    volume?: boolean
    count?: boolean
    manga?: boolean | MangaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chapter"]>

  export type ChapterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    likes_count?: boolean
    manga_id?: boolean
    name?: boolean
    number?: boolean
    item_number?: boolean
    number_secondary?: boolean
    slug?: boolean
    volume?: boolean
    count?: boolean
    manga?: boolean | MangaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chapter"]>

  export type ChapterSelectScalar = {
    id?: boolean
    created_at?: boolean
    likes_count?: boolean
    manga_id?: boolean
    name?: boolean
    number?: boolean
    item_number?: boolean
    number_secondary?: boolean
    slug?: boolean
    volume?: boolean
    count?: boolean
  }

  export type ChapterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "likes_count" | "manga_id" | "name" | "number" | "item_number" | "number_secondary" | "slug" | "volume" | "count", ExtArgs["result"]["chapter"]>
  export type ChapterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pages?: boolean | Chapter$pagesArgs<ExtArgs>
    manga?: boolean | MangaDefaultArgs<ExtArgs>
    Bookmark?: boolean | Chapter$BookmarkArgs<ExtArgs>
    _count?: boolean | ChapterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChapterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manga?: boolean | MangaDefaultArgs<ExtArgs>
  }
  export type ChapterIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manga?: boolean | MangaDefaultArgs<ExtArgs>
  }

  export type $ChapterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Chapter"
    objects: {
      pages: Prisma.$MangaPagePayload<ExtArgs>[]
      manga: Prisma.$MangaPayload<ExtArgs>
      Bookmark: Prisma.$BookmarkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      created_at: Date
      likes_count: number
      manga_id: number
      name: string | null
      number: string
      item_number: number
      number_secondary: string
      slug: string
      volume: string
      count: number
    }, ExtArgs["result"]["chapter"]>
    composites: {}
  }

  type ChapterGetPayload<S extends boolean | null | undefined | ChapterDefaultArgs> = $Result.GetResult<Prisma.$ChapterPayload, S>

  type ChapterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChapterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChapterCountAggregateInputType | true
    }

  export interface ChapterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chapter'], meta: { name: 'Chapter' } }
    /**
     * Find zero or one Chapter that matches the filter.
     * @param {ChapterFindUniqueArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChapterFindUniqueArgs>(args: SelectSubset<T, ChapterFindUniqueArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Chapter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChapterFindUniqueOrThrowArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChapterFindUniqueOrThrowArgs>(args: SelectSubset<T, ChapterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Chapter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterFindFirstArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChapterFindFirstArgs>(args?: SelectSubset<T, ChapterFindFirstArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Chapter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterFindFirstOrThrowArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChapterFindFirstOrThrowArgs>(args?: SelectSubset<T, ChapterFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Chapters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chapters
     * const chapters = await prisma.chapter.findMany()
     * 
     * // Get first 10 Chapters
     * const chapters = await prisma.chapter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chapterWithIdOnly = await prisma.chapter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChapterFindManyArgs>(args?: SelectSubset<T, ChapterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Chapter.
     * @param {ChapterCreateArgs} args - Arguments to create a Chapter.
     * @example
     * // Create one Chapter
     * const Chapter = await prisma.chapter.create({
     *   data: {
     *     // ... data to create a Chapter
     *   }
     * })
     * 
     */
    create<T extends ChapterCreateArgs>(args: SelectSubset<T, ChapterCreateArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Chapters.
     * @param {ChapterCreateManyArgs} args - Arguments to create many Chapters.
     * @example
     * // Create many Chapters
     * const chapter = await prisma.chapter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChapterCreateManyArgs>(args?: SelectSubset<T, ChapterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Chapters and returns the data saved in the database.
     * @param {ChapterCreateManyAndReturnArgs} args - Arguments to create many Chapters.
     * @example
     * // Create many Chapters
     * const chapter = await prisma.chapter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Chapters and only return the `id`
     * const chapterWithIdOnly = await prisma.chapter.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChapterCreateManyAndReturnArgs>(args?: SelectSubset<T, ChapterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Chapter.
     * @param {ChapterDeleteArgs} args - Arguments to delete one Chapter.
     * @example
     * // Delete one Chapter
     * const Chapter = await prisma.chapter.delete({
     *   where: {
     *     // ... filter to delete one Chapter
     *   }
     * })
     * 
     */
    delete<T extends ChapterDeleteArgs>(args: SelectSubset<T, ChapterDeleteArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Chapter.
     * @param {ChapterUpdateArgs} args - Arguments to update one Chapter.
     * @example
     * // Update one Chapter
     * const chapter = await prisma.chapter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChapterUpdateArgs>(args: SelectSubset<T, ChapterUpdateArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Chapters.
     * @param {ChapterDeleteManyArgs} args - Arguments to filter Chapters to delete.
     * @example
     * // Delete a few Chapters
     * const { count } = await prisma.chapter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChapterDeleteManyArgs>(args?: SelectSubset<T, ChapterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chapters
     * const chapter = await prisma.chapter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChapterUpdateManyArgs>(args: SelectSubset<T, ChapterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chapters and returns the data updated in the database.
     * @param {ChapterUpdateManyAndReturnArgs} args - Arguments to update many Chapters.
     * @example
     * // Update many Chapters
     * const chapter = await prisma.chapter.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Chapters and only return the `id`
     * const chapterWithIdOnly = await prisma.chapter.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChapterUpdateManyAndReturnArgs>(args: SelectSubset<T, ChapterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Chapter.
     * @param {ChapterUpsertArgs} args - Arguments to update or create a Chapter.
     * @example
     * // Update or create a Chapter
     * const chapter = await prisma.chapter.upsert({
     *   create: {
     *     // ... data to create a Chapter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chapter we want to update
     *   }
     * })
     */
    upsert<T extends ChapterUpsertArgs>(args: SelectSubset<T, ChapterUpsertArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Chapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterCountArgs} args - Arguments to filter Chapters to count.
     * @example
     * // Count the number of Chapters
     * const count = await prisma.chapter.count({
     *   where: {
     *     // ... the filter for the Chapters we want to count
     *   }
     * })
    **/
    count<T extends ChapterCountArgs>(
      args?: Subset<T, ChapterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChapterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chapter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChapterAggregateArgs>(args: Subset<T, ChapterAggregateArgs>): Prisma.PrismaPromise<GetChapterAggregateType<T>>

    /**
     * Group by Chapter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChapterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChapterGroupByArgs['orderBy'] }
        : { orderBy?: ChapterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChapterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChapterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Chapter model
   */
  readonly fields: ChapterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Chapter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChapterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pages<T extends Chapter$pagesArgs<ExtArgs> = {}>(args?: Subset<T, Chapter$pagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MangaPagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    manga<T extends MangaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MangaDefaultArgs<ExtArgs>>): Prisma__MangaClient<$Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Bookmark<T extends Chapter$BookmarkArgs<ExtArgs> = {}>(args?: Subset<T, Chapter$BookmarkArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Chapter model
   */
  interface ChapterFieldRefs {
    readonly id: FieldRef<"Chapter", 'Int'>
    readonly created_at: FieldRef<"Chapter", 'DateTime'>
    readonly likes_count: FieldRef<"Chapter", 'Int'>
    readonly manga_id: FieldRef<"Chapter", 'Int'>
    readonly name: FieldRef<"Chapter", 'String'>
    readonly number: FieldRef<"Chapter", 'String'>
    readonly item_number: FieldRef<"Chapter", 'Int'>
    readonly number_secondary: FieldRef<"Chapter", 'String'>
    readonly slug: FieldRef<"Chapter", 'String'>
    readonly volume: FieldRef<"Chapter", 'String'>
    readonly count: FieldRef<"Chapter", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Chapter findUnique
   */
  export type ChapterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapter to fetch.
     */
    where: ChapterWhereUniqueInput
  }

  /**
   * Chapter findUniqueOrThrow
   */
  export type ChapterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapter to fetch.
     */
    where: ChapterWhereUniqueInput
  }

  /**
   * Chapter findFirst
   */
  export type ChapterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapter to fetch.
     */
    where?: ChapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chapters to fetch.
     */
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chapters.
     */
    cursor?: ChapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chapters.
     */
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }

  /**
   * Chapter findFirstOrThrow
   */
  export type ChapterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapter to fetch.
     */
    where?: ChapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chapters to fetch.
     */
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chapters.
     */
    cursor?: ChapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chapters.
     */
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }

  /**
   * Chapter findMany
   */
  export type ChapterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapters to fetch.
     */
    where?: ChapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chapters to fetch.
     */
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Chapters.
     */
    cursor?: ChapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chapters.
     */
    skip?: number
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }

  /**
   * Chapter create
   */
  export type ChapterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * The data needed to create a Chapter.
     */
    data: XOR<ChapterCreateInput, ChapterUncheckedCreateInput>
  }

  /**
   * Chapter createMany
   */
  export type ChapterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Chapters.
     */
    data: ChapterCreateManyInput | ChapterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Chapter createManyAndReturn
   */
  export type ChapterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * The data used to create many Chapters.
     */
    data: ChapterCreateManyInput | ChapterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Chapter update
   */
  export type ChapterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * The data needed to update a Chapter.
     */
    data: XOR<ChapterUpdateInput, ChapterUncheckedUpdateInput>
    /**
     * Choose, which Chapter to update.
     */
    where: ChapterWhereUniqueInput
  }

  /**
   * Chapter updateMany
   */
  export type ChapterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Chapters.
     */
    data: XOR<ChapterUpdateManyMutationInput, ChapterUncheckedUpdateManyInput>
    /**
     * Filter which Chapters to update
     */
    where?: ChapterWhereInput
    /**
     * Limit how many Chapters to update.
     */
    limit?: number
  }

  /**
   * Chapter updateManyAndReturn
   */
  export type ChapterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * The data used to update Chapters.
     */
    data: XOR<ChapterUpdateManyMutationInput, ChapterUncheckedUpdateManyInput>
    /**
     * Filter which Chapters to update
     */
    where?: ChapterWhereInput
    /**
     * Limit how many Chapters to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Chapter upsert
   */
  export type ChapterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * The filter to search for the Chapter to update in case it exists.
     */
    where: ChapterWhereUniqueInput
    /**
     * In case the Chapter found by the `where` argument doesn't exist, create a new Chapter with this data.
     */
    create: XOR<ChapterCreateInput, ChapterUncheckedCreateInput>
    /**
     * In case the Chapter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChapterUpdateInput, ChapterUncheckedUpdateInput>
  }

  /**
   * Chapter delete
   */
  export type ChapterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter which Chapter to delete.
     */
    where: ChapterWhereUniqueInput
  }

  /**
   * Chapter deleteMany
   */
  export type ChapterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chapters to delete
     */
    where?: ChapterWhereInput
    /**
     * Limit how many Chapters to delete.
     */
    limit?: number
  }

  /**
   * Chapter.pages
   */
  export type Chapter$pagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MangaPage
     */
    select?: MangaPageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MangaPage
     */
    omit?: MangaPageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaPageInclude<ExtArgs> | null
    where?: MangaPageWhereInput
    orderBy?: MangaPageOrderByWithRelationInput | MangaPageOrderByWithRelationInput[]
    cursor?: MangaPageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MangaPageScalarFieldEnum | MangaPageScalarFieldEnum[]
  }

  /**
   * Chapter.Bookmark
   */
  export type Chapter$BookmarkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmark
     */
    omit?: BookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    where?: BookmarkWhereInput
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    cursor?: BookmarkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * Chapter without action
   */
  export type ChapterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
  }


  /**
   * Model MangaPage
   */

  export type AggregateMangaPage = {
    _count: MangaPageCountAggregateOutputType | null
    _avg: MangaPageAvgAggregateOutputType | null
    _sum: MangaPageSumAggregateOutputType | null
    _min: MangaPageMinAggregateOutputType | null
    _max: MangaPageMaxAggregateOutputType | null
  }

  export type MangaPageAvgAggregateOutputType = {
    id: number | null
    ratio: number | null
    chapterId: number | null
  }

  export type MangaPageSumAggregateOutputType = {
    id: number | null
    ratio: number | null
    chapterId: number | null
  }

  export type MangaPageMinAggregateOutputType = {
    id: number | null
    created_at: Date | null
    image: string | null
    url: string | null
    ratio: number | null
    chapterId: number | null
  }

  export type MangaPageMaxAggregateOutputType = {
    id: number | null
    created_at: Date | null
    image: string | null
    url: string | null
    ratio: number | null
    chapterId: number | null
  }

  export type MangaPageCountAggregateOutputType = {
    id: number
    created_at: number
    image: number
    url: number
    ratio: number
    chapterId: number
    _all: number
  }


  export type MangaPageAvgAggregateInputType = {
    id?: true
    ratio?: true
    chapterId?: true
  }

  export type MangaPageSumAggregateInputType = {
    id?: true
    ratio?: true
    chapterId?: true
  }

  export type MangaPageMinAggregateInputType = {
    id?: true
    created_at?: true
    image?: true
    url?: true
    ratio?: true
    chapterId?: true
  }

  export type MangaPageMaxAggregateInputType = {
    id?: true
    created_at?: true
    image?: true
    url?: true
    ratio?: true
    chapterId?: true
  }

  export type MangaPageCountAggregateInputType = {
    id?: true
    created_at?: true
    image?: true
    url?: true
    ratio?: true
    chapterId?: true
    _all?: true
  }

  export type MangaPageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MangaPage to aggregate.
     */
    where?: MangaPageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MangaPages to fetch.
     */
    orderBy?: MangaPageOrderByWithRelationInput | MangaPageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MangaPageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MangaPages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MangaPages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MangaPages
    **/
    _count?: true | MangaPageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MangaPageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MangaPageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MangaPageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MangaPageMaxAggregateInputType
  }

  export type GetMangaPageAggregateType<T extends MangaPageAggregateArgs> = {
        [P in keyof T & keyof AggregateMangaPage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMangaPage[P]>
      : GetScalarType<T[P], AggregateMangaPage[P]>
  }




  export type MangaPageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MangaPageWhereInput
    orderBy?: MangaPageOrderByWithAggregationInput | MangaPageOrderByWithAggregationInput[]
    by: MangaPageScalarFieldEnum[] | MangaPageScalarFieldEnum
    having?: MangaPageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MangaPageCountAggregateInputType | true
    _avg?: MangaPageAvgAggregateInputType
    _sum?: MangaPageSumAggregateInputType
    _min?: MangaPageMinAggregateInputType
    _max?: MangaPageMaxAggregateInputType
  }

  export type MangaPageGroupByOutputType = {
    id: number
    created_at: Date
    image: string
    url: string
    ratio: number
    chapterId: number
    _count: MangaPageCountAggregateOutputType | null
    _avg: MangaPageAvgAggregateOutputType | null
    _sum: MangaPageSumAggregateOutputType | null
    _min: MangaPageMinAggregateOutputType | null
    _max: MangaPageMaxAggregateOutputType | null
  }

  type GetMangaPageGroupByPayload<T extends MangaPageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MangaPageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MangaPageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MangaPageGroupByOutputType[P]>
            : GetScalarType<T[P], MangaPageGroupByOutputType[P]>
        }
      >
    >


  export type MangaPageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    image?: boolean
    url?: boolean
    ratio?: boolean
    chapterId?: boolean
    Chapter?: boolean | ChapterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mangaPage"]>

  export type MangaPageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    image?: boolean
    url?: boolean
    ratio?: boolean
    chapterId?: boolean
    Chapter?: boolean | ChapterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mangaPage"]>

  export type MangaPageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    image?: boolean
    url?: boolean
    ratio?: boolean
    chapterId?: boolean
    Chapter?: boolean | ChapterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mangaPage"]>

  export type MangaPageSelectScalar = {
    id?: boolean
    created_at?: boolean
    image?: boolean
    url?: boolean
    ratio?: boolean
    chapterId?: boolean
  }

  export type MangaPageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "image" | "url" | "ratio" | "chapterId", ExtArgs["result"]["mangaPage"]>
  export type MangaPageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Chapter?: boolean | ChapterDefaultArgs<ExtArgs>
  }
  export type MangaPageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Chapter?: boolean | ChapterDefaultArgs<ExtArgs>
  }
  export type MangaPageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Chapter?: boolean | ChapterDefaultArgs<ExtArgs>
  }

  export type $MangaPagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MangaPage"
    objects: {
      Chapter: Prisma.$ChapterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      created_at: Date
      image: string
      url: string
      ratio: number
      chapterId: number
    }, ExtArgs["result"]["mangaPage"]>
    composites: {}
  }

  type MangaPageGetPayload<S extends boolean | null | undefined | MangaPageDefaultArgs> = $Result.GetResult<Prisma.$MangaPagePayload, S>

  type MangaPageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MangaPageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MangaPageCountAggregateInputType | true
    }

  export interface MangaPageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MangaPage'], meta: { name: 'MangaPage' } }
    /**
     * Find zero or one MangaPage that matches the filter.
     * @param {MangaPageFindUniqueArgs} args - Arguments to find a MangaPage
     * @example
     * // Get one MangaPage
     * const mangaPage = await prisma.mangaPage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MangaPageFindUniqueArgs>(args: SelectSubset<T, MangaPageFindUniqueArgs<ExtArgs>>): Prisma__MangaPageClient<$Result.GetResult<Prisma.$MangaPagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MangaPage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MangaPageFindUniqueOrThrowArgs} args - Arguments to find a MangaPage
     * @example
     * // Get one MangaPage
     * const mangaPage = await prisma.mangaPage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MangaPageFindUniqueOrThrowArgs>(args: SelectSubset<T, MangaPageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MangaPageClient<$Result.GetResult<Prisma.$MangaPagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MangaPage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MangaPageFindFirstArgs} args - Arguments to find a MangaPage
     * @example
     * // Get one MangaPage
     * const mangaPage = await prisma.mangaPage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MangaPageFindFirstArgs>(args?: SelectSubset<T, MangaPageFindFirstArgs<ExtArgs>>): Prisma__MangaPageClient<$Result.GetResult<Prisma.$MangaPagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MangaPage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MangaPageFindFirstOrThrowArgs} args - Arguments to find a MangaPage
     * @example
     * // Get one MangaPage
     * const mangaPage = await prisma.mangaPage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MangaPageFindFirstOrThrowArgs>(args?: SelectSubset<T, MangaPageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MangaPageClient<$Result.GetResult<Prisma.$MangaPagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MangaPages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MangaPageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MangaPages
     * const mangaPages = await prisma.mangaPage.findMany()
     * 
     * // Get first 10 MangaPages
     * const mangaPages = await prisma.mangaPage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mangaPageWithIdOnly = await prisma.mangaPage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MangaPageFindManyArgs>(args?: SelectSubset<T, MangaPageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MangaPagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MangaPage.
     * @param {MangaPageCreateArgs} args - Arguments to create a MangaPage.
     * @example
     * // Create one MangaPage
     * const MangaPage = await prisma.mangaPage.create({
     *   data: {
     *     // ... data to create a MangaPage
     *   }
     * })
     * 
     */
    create<T extends MangaPageCreateArgs>(args: SelectSubset<T, MangaPageCreateArgs<ExtArgs>>): Prisma__MangaPageClient<$Result.GetResult<Prisma.$MangaPagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MangaPages.
     * @param {MangaPageCreateManyArgs} args - Arguments to create many MangaPages.
     * @example
     * // Create many MangaPages
     * const mangaPage = await prisma.mangaPage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MangaPageCreateManyArgs>(args?: SelectSubset<T, MangaPageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MangaPages and returns the data saved in the database.
     * @param {MangaPageCreateManyAndReturnArgs} args - Arguments to create many MangaPages.
     * @example
     * // Create many MangaPages
     * const mangaPage = await prisma.mangaPage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MangaPages and only return the `id`
     * const mangaPageWithIdOnly = await prisma.mangaPage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MangaPageCreateManyAndReturnArgs>(args?: SelectSubset<T, MangaPageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MangaPagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MangaPage.
     * @param {MangaPageDeleteArgs} args - Arguments to delete one MangaPage.
     * @example
     * // Delete one MangaPage
     * const MangaPage = await prisma.mangaPage.delete({
     *   where: {
     *     // ... filter to delete one MangaPage
     *   }
     * })
     * 
     */
    delete<T extends MangaPageDeleteArgs>(args: SelectSubset<T, MangaPageDeleteArgs<ExtArgs>>): Prisma__MangaPageClient<$Result.GetResult<Prisma.$MangaPagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MangaPage.
     * @param {MangaPageUpdateArgs} args - Arguments to update one MangaPage.
     * @example
     * // Update one MangaPage
     * const mangaPage = await prisma.mangaPage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MangaPageUpdateArgs>(args: SelectSubset<T, MangaPageUpdateArgs<ExtArgs>>): Prisma__MangaPageClient<$Result.GetResult<Prisma.$MangaPagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MangaPages.
     * @param {MangaPageDeleteManyArgs} args - Arguments to filter MangaPages to delete.
     * @example
     * // Delete a few MangaPages
     * const { count } = await prisma.mangaPage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MangaPageDeleteManyArgs>(args?: SelectSubset<T, MangaPageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MangaPages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MangaPageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MangaPages
     * const mangaPage = await prisma.mangaPage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MangaPageUpdateManyArgs>(args: SelectSubset<T, MangaPageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MangaPages and returns the data updated in the database.
     * @param {MangaPageUpdateManyAndReturnArgs} args - Arguments to update many MangaPages.
     * @example
     * // Update many MangaPages
     * const mangaPage = await prisma.mangaPage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MangaPages and only return the `id`
     * const mangaPageWithIdOnly = await prisma.mangaPage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MangaPageUpdateManyAndReturnArgs>(args: SelectSubset<T, MangaPageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MangaPagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MangaPage.
     * @param {MangaPageUpsertArgs} args - Arguments to update or create a MangaPage.
     * @example
     * // Update or create a MangaPage
     * const mangaPage = await prisma.mangaPage.upsert({
     *   create: {
     *     // ... data to create a MangaPage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MangaPage we want to update
     *   }
     * })
     */
    upsert<T extends MangaPageUpsertArgs>(args: SelectSubset<T, MangaPageUpsertArgs<ExtArgs>>): Prisma__MangaPageClient<$Result.GetResult<Prisma.$MangaPagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MangaPages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MangaPageCountArgs} args - Arguments to filter MangaPages to count.
     * @example
     * // Count the number of MangaPages
     * const count = await prisma.mangaPage.count({
     *   where: {
     *     // ... the filter for the MangaPages we want to count
     *   }
     * })
    **/
    count<T extends MangaPageCountArgs>(
      args?: Subset<T, MangaPageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MangaPageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MangaPage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MangaPageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MangaPageAggregateArgs>(args: Subset<T, MangaPageAggregateArgs>): Prisma.PrismaPromise<GetMangaPageAggregateType<T>>

    /**
     * Group by MangaPage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MangaPageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MangaPageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MangaPageGroupByArgs['orderBy'] }
        : { orderBy?: MangaPageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MangaPageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMangaPageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MangaPage model
   */
  readonly fields: MangaPageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MangaPage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MangaPageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Chapter<T extends ChapterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChapterDefaultArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MangaPage model
   */
  interface MangaPageFieldRefs {
    readonly id: FieldRef<"MangaPage", 'Int'>
    readonly created_at: FieldRef<"MangaPage", 'DateTime'>
    readonly image: FieldRef<"MangaPage", 'String'>
    readonly url: FieldRef<"MangaPage", 'String'>
    readonly ratio: FieldRef<"MangaPage", 'Float'>
    readonly chapterId: FieldRef<"MangaPage", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * MangaPage findUnique
   */
  export type MangaPageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MangaPage
     */
    select?: MangaPageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MangaPage
     */
    omit?: MangaPageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaPageInclude<ExtArgs> | null
    /**
     * Filter, which MangaPage to fetch.
     */
    where: MangaPageWhereUniqueInput
  }

  /**
   * MangaPage findUniqueOrThrow
   */
  export type MangaPageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MangaPage
     */
    select?: MangaPageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MangaPage
     */
    omit?: MangaPageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaPageInclude<ExtArgs> | null
    /**
     * Filter, which MangaPage to fetch.
     */
    where: MangaPageWhereUniqueInput
  }

  /**
   * MangaPage findFirst
   */
  export type MangaPageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MangaPage
     */
    select?: MangaPageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MangaPage
     */
    omit?: MangaPageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaPageInclude<ExtArgs> | null
    /**
     * Filter, which MangaPage to fetch.
     */
    where?: MangaPageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MangaPages to fetch.
     */
    orderBy?: MangaPageOrderByWithRelationInput | MangaPageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MangaPages.
     */
    cursor?: MangaPageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MangaPages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MangaPages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MangaPages.
     */
    distinct?: MangaPageScalarFieldEnum | MangaPageScalarFieldEnum[]
  }

  /**
   * MangaPage findFirstOrThrow
   */
  export type MangaPageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MangaPage
     */
    select?: MangaPageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MangaPage
     */
    omit?: MangaPageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaPageInclude<ExtArgs> | null
    /**
     * Filter, which MangaPage to fetch.
     */
    where?: MangaPageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MangaPages to fetch.
     */
    orderBy?: MangaPageOrderByWithRelationInput | MangaPageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MangaPages.
     */
    cursor?: MangaPageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MangaPages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MangaPages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MangaPages.
     */
    distinct?: MangaPageScalarFieldEnum | MangaPageScalarFieldEnum[]
  }

  /**
   * MangaPage findMany
   */
  export type MangaPageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MangaPage
     */
    select?: MangaPageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MangaPage
     */
    omit?: MangaPageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaPageInclude<ExtArgs> | null
    /**
     * Filter, which MangaPages to fetch.
     */
    where?: MangaPageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MangaPages to fetch.
     */
    orderBy?: MangaPageOrderByWithRelationInput | MangaPageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MangaPages.
     */
    cursor?: MangaPageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MangaPages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MangaPages.
     */
    skip?: number
    distinct?: MangaPageScalarFieldEnum | MangaPageScalarFieldEnum[]
  }

  /**
   * MangaPage create
   */
  export type MangaPageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MangaPage
     */
    select?: MangaPageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MangaPage
     */
    omit?: MangaPageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaPageInclude<ExtArgs> | null
    /**
     * The data needed to create a MangaPage.
     */
    data: XOR<MangaPageCreateInput, MangaPageUncheckedCreateInput>
  }

  /**
   * MangaPage createMany
   */
  export type MangaPageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MangaPages.
     */
    data: MangaPageCreateManyInput | MangaPageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MangaPage createManyAndReturn
   */
  export type MangaPageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MangaPage
     */
    select?: MangaPageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MangaPage
     */
    omit?: MangaPageOmit<ExtArgs> | null
    /**
     * The data used to create many MangaPages.
     */
    data: MangaPageCreateManyInput | MangaPageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaPageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MangaPage update
   */
  export type MangaPageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MangaPage
     */
    select?: MangaPageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MangaPage
     */
    omit?: MangaPageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaPageInclude<ExtArgs> | null
    /**
     * The data needed to update a MangaPage.
     */
    data: XOR<MangaPageUpdateInput, MangaPageUncheckedUpdateInput>
    /**
     * Choose, which MangaPage to update.
     */
    where: MangaPageWhereUniqueInput
  }

  /**
   * MangaPage updateMany
   */
  export type MangaPageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MangaPages.
     */
    data: XOR<MangaPageUpdateManyMutationInput, MangaPageUncheckedUpdateManyInput>
    /**
     * Filter which MangaPages to update
     */
    where?: MangaPageWhereInput
    /**
     * Limit how many MangaPages to update.
     */
    limit?: number
  }

  /**
   * MangaPage updateManyAndReturn
   */
  export type MangaPageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MangaPage
     */
    select?: MangaPageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MangaPage
     */
    omit?: MangaPageOmit<ExtArgs> | null
    /**
     * The data used to update MangaPages.
     */
    data: XOR<MangaPageUpdateManyMutationInput, MangaPageUncheckedUpdateManyInput>
    /**
     * Filter which MangaPages to update
     */
    where?: MangaPageWhereInput
    /**
     * Limit how many MangaPages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaPageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MangaPage upsert
   */
  export type MangaPageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MangaPage
     */
    select?: MangaPageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MangaPage
     */
    omit?: MangaPageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaPageInclude<ExtArgs> | null
    /**
     * The filter to search for the MangaPage to update in case it exists.
     */
    where: MangaPageWhereUniqueInput
    /**
     * In case the MangaPage found by the `where` argument doesn't exist, create a new MangaPage with this data.
     */
    create: XOR<MangaPageCreateInput, MangaPageUncheckedCreateInput>
    /**
     * In case the MangaPage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MangaPageUpdateInput, MangaPageUncheckedUpdateInput>
  }

  /**
   * MangaPage delete
   */
  export type MangaPageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MangaPage
     */
    select?: MangaPageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MangaPage
     */
    omit?: MangaPageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaPageInclude<ExtArgs> | null
    /**
     * Filter which MangaPage to delete.
     */
    where: MangaPageWhereUniqueInput
  }

  /**
   * MangaPage deleteMany
   */
  export type MangaPageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MangaPages to delete
     */
    where?: MangaPageWhereInput
    /**
     * Limit how many MangaPages to delete.
     */
    limit?: number
  }

  /**
   * MangaPage without action
   */
  export type MangaPageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MangaPage
     */
    select?: MangaPageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MangaPage
     */
    omit?: MangaPageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaPageInclude<ExtArgs> | null
  }


  /**
   * Model Bookmark
   */

  export type AggregateBookmark = {
    _count: BookmarkCountAggregateOutputType | null
    _avg: BookmarkAvgAggregateOutputType | null
    _sum: BookmarkSumAggregateOutputType | null
    _min: BookmarkMinAggregateOutputType | null
    _max: BookmarkMaxAggregateOutputType | null
  }

  export type BookmarkAvgAggregateOutputType = {
    id: number | null
    chapterId: number | null
    episodeId: number | null
  }

  export type BookmarkSumAggregateOutputType = {
    id: number | null
    chapterId: number | null
    episodeId: number | null
  }

  export type BookmarkMinAggregateOutputType = {
    id: number | null
    userId: string | null
    mark: $Enums.BookmarkName | null
    type: $Enums.ModelName | null
    addedAt: Date | null
    updatedAt: Date | null
    mangaSlug_url: string | null
    animeSlug_url: string | null
    chapterId: number | null
    episodeId: number | null
  }

  export type BookmarkMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    mark: $Enums.BookmarkName | null
    type: $Enums.ModelName | null
    addedAt: Date | null
    updatedAt: Date | null
    mangaSlug_url: string | null
    animeSlug_url: string | null
    chapterId: number | null
    episodeId: number | null
  }

  export type BookmarkCountAggregateOutputType = {
    id: number
    userId: number
    mark: number
    type: number
    addedAt: number
    updatedAt: number
    mangaSlug_url: number
    animeSlug_url: number
    chapterId: number
    episodeId: number
    _all: number
  }


  export type BookmarkAvgAggregateInputType = {
    id?: true
    chapterId?: true
    episodeId?: true
  }

  export type BookmarkSumAggregateInputType = {
    id?: true
    chapterId?: true
    episodeId?: true
  }

  export type BookmarkMinAggregateInputType = {
    id?: true
    userId?: true
    mark?: true
    type?: true
    addedAt?: true
    updatedAt?: true
    mangaSlug_url?: true
    animeSlug_url?: true
    chapterId?: true
    episodeId?: true
  }

  export type BookmarkMaxAggregateInputType = {
    id?: true
    userId?: true
    mark?: true
    type?: true
    addedAt?: true
    updatedAt?: true
    mangaSlug_url?: true
    animeSlug_url?: true
    chapterId?: true
    episodeId?: true
  }

  export type BookmarkCountAggregateInputType = {
    id?: true
    userId?: true
    mark?: true
    type?: true
    addedAt?: true
    updatedAt?: true
    mangaSlug_url?: true
    animeSlug_url?: true
    chapterId?: true
    episodeId?: true
    _all?: true
  }

  export type BookmarkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bookmark to aggregate.
     */
    where?: BookmarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookmarks to fetch.
     */
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookmarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookmarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookmarks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bookmarks
    **/
    _count?: true | BookmarkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookmarkAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookmarkSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookmarkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookmarkMaxAggregateInputType
  }

  export type GetBookmarkAggregateType<T extends BookmarkAggregateArgs> = {
        [P in keyof T & keyof AggregateBookmark]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookmark[P]>
      : GetScalarType<T[P], AggregateBookmark[P]>
  }




  export type BookmarkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkWhereInput
    orderBy?: BookmarkOrderByWithAggregationInput | BookmarkOrderByWithAggregationInput[]
    by: BookmarkScalarFieldEnum[] | BookmarkScalarFieldEnum
    having?: BookmarkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookmarkCountAggregateInputType | true
    _avg?: BookmarkAvgAggregateInputType
    _sum?: BookmarkSumAggregateInputType
    _min?: BookmarkMinAggregateInputType
    _max?: BookmarkMaxAggregateInputType
  }

  export type BookmarkGroupByOutputType = {
    id: number
    userId: string
    mark: $Enums.BookmarkName
    type: $Enums.ModelName
    addedAt: Date
    updatedAt: Date
    mangaSlug_url: string | null
    animeSlug_url: string | null
    chapterId: number | null
    episodeId: number | null
    _count: BookmarkCountAggregateOutputType | null
    _avg: BookmarkAvgAggregateOutputType | null
    _sum: BookmarkSumAggregateOutputType | null
    _min: BookmarkMinAggregateOutputType | null
    _max: BookmarkMaxAggregateOutputType | null
  }

  type GetBookmarkGroupByPayload<T extends BookmarkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookmarkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookmarkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookmarkGroupByOutputType[P]>
            : GetScalarType<T[P], BookmarkGroupByOutputType[P]>
        }
      >
    >


  export type BookmarkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    mark?: boolean
    type?: boolean
    addedAt?: boolean
    updatedAt?: boolean
    mangaSlug_url?: boolean
    animeSlug_url?: boolean
    chapterId?: boolean
    episodeId?: boolean
    lastRead?: boolean | Bookmark$lastReadArgs<ExtArgs>
    lastWatch?: boolean | Bookmark$lastWatchArgs<ExtArgs>
    anime?: boolean | Bookmark$animeArgs<ExtArgs>
    manga?: boolean | Bookmark$mangaArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookmark"]>

  export type BookmarkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    mark?: boolean
    type?: boolean
    addedAt?: boolean
    updatedAt?: boolean
    mangaSlug_url?: boolean
    animeSlug_url?: boolean
    chapterId?: boolean
    episodeId?: boolean
    lastRead?: boolean | Bookmark$lastReadArgs<ExtArgs>
    lastWatch?: boolean | Bookmark$lastWatchArgs<ExtArgs>
    anime?: boolean | Bookmark$animeArgs<ExtArgs>
    manga?: boolean | Bookmark$mangaArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookmark"]>

  export type BookmarkSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    mark?: boolean
    type?: boolean
    addedAt?: boolean
    updatedAt?: boolean
    mangaSlug_url?: boolean
    animeSlug_url?: boolean
    chapterId?: boolean
    episodeId?: boolean
    lastRead?: boolean | Bookmark$lastReadArgs<ExtArgs>
    lastWatch?: boolean | Bookmark$lastWatchArgs<ExtArgs>
    anime?: boolean | Bookmark$animeArgs<ExtArgs>
    manga?: boolean | Bookmark$mangaArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookmark"]>

  export type BookmarkSelectScalar = {
    id?: boolean
    userId?: boolean
    mark?: boolean
    type?: boolean
    addedAt?: boolean
    updatedAt?: boolean
    mangaSlug_url?: boolean
    animeSlug_url?: boolean
    chapterId?: boolean
    episodeId?: boolean
  }

  export type BookmarkOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "mark" | "type" | "addedAt" | "updatedAt" | "mangaSlug_url" | "animeSlug_url" | "chapterId" | "episodeId", ExtArgs["result"]["bookmark"]>
  export type BookmarkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lastRead?: boolean | Bookmark$lastReadArgs<ExtArgs>
    lastWatch?: boolean | Bookmark$lastWatchArgs<ExtArgs>
    anime?: boolean | Bookmark$animeArgs<ExtArgs>
    manga?: boolean | Bookmark$mangaArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BookmarkIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lastRead?: boolean | Bookmark$lastReadArgs<ExtArgs>
    lastWatch?: boolean | Bookmark$lastWatchArgs<ExtArgs>
    anime?: boolean | Bookmark$animeArgs<ExtArgs>
    manga?: boolean | Bookmark$mangaArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BookmarkIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lastRead?: boolean | Bookmark$lastReadArgs<ExtArgs>
    lastWatch?: boolean | Bookmark$lastWatchArgs<ExtArgs>
    anime?: boolean | Bookmark$animeArgs<ExtArgs>
    manga?: boolean | Bookmark$mangaArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BookmarkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Bookmark"
    objects: {
      lastRead: Prisma.$ChapterPayload<ExtArgs> | null
      lastWatch: Prisma.$EpisodePayload<ExtArgs> | null
      anime: Prisma.$AnimePayload<ExtArgs> | null
      manga: Prisma.$MangaPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      mark: $Enums.BookmarkName
      type: $Enums.ModelName
      addedAt: Date
      updatedAt: Date
      mangaSlug_url: string | null
      animeSlug_url: string | null
      chapterId: number | null
      episodeId: number | null
    }, ExtArgs["result"]["bookmark"]>
    composites: {}
  }

  type BookmarkGetPayload<S extends boolean | null | undefined | BookmarkDefaultArgs> = $Result.GetResult<Prisma.$BookmarkPayload, S>

  type BookmarkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BookmarkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BookmarkCountAggregateInputType | true
    }

  export interface BookmarkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bookmark'], meta: { name: 'Bookmark' } }
    /**
     * Find zero or one Bookmark that matches the filter.
     * @param {BookmarkFindUniqueArgs} args - Arguments to find a Bookmark
     * @example
     * // Get one Bookmark
     * const bookmark = await prisma.bookmark.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookmarkFindUniqueArgs>(args: SelectSubset<T, BookmarkFindUniqueArgs<ExtArgs>>): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Bookmark that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BookmarkFindUniqueOrThrowArgs} args - Arguments to find a Bookmark
     * @example
     * // Get one Bookmark
     * const bookmark = await prisma.bookmark.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookmarkFindUniqueOrThrowArgs>(args: SelectSubset<T, BookmarkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bookmark that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkFindFirstArgs} args - Arguments to find a Bookmark
     * @example
     * // Get one Bookmark
     * const bookmark = await prisma.bookmark.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookmarkFindFirstArgs>(args?: SelectSubset<T, BookmarkFindFirstArgs<ExtArgs>>): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bookmark that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkFindFirstOrThrowArgs} args - Arguments to find a Bookmark
     * @example
     * // Get one Bookmark
     * const bookmark = await prisma.bookmark.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookmarkFindFirstOrThrowArgs>(args?: SelectSubset<T, BookmarkFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Bookmarks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bookmarks
     * const bookmarks = await prisma.bookmark.findMany()
     * 
     * // Get first 10 Bookmarks
     * const bookmarks = await prisma.bookmark.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookmarkWithIdOnly = await prisma.bookmark.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookmarkFindManyArgs>(args?: SelectSubset<T, BookmarkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Bookmark.
     * @param {BookmarkCreateArgs} args - Arguments to create a Bookmark.
     * @example
     * // Create one Bookmark
     * const Bookmark = await prisma.bookmark.create({
     *   data: {
     *     // ... data to create a Bookmark
     *   }
     * })
     * 
     */
    create<T extends BookmarkCreateArgs>(args: SelectSubset<T, BookmarkCreateArgs<ExtArgs>>): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Bookmarks.
     * @param {BookmarkCreateManyArgs} args - Arguments to create many Bookmarks.
     * @example
     * // Create many Bookmarks
     * const bookmark = await prisma.bookmark.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookmarkCreateManyArgs>(args?: SelectSubset<T, BookmarkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Bookmarks and returns the data saved in the database.
     * @param {BookmarkCreateManyAndReturnArgs} args - Arguments to create many Bookmarks.
     * @example
     * // Create many Bookmarks
     * const bookmark = await prisma.bookmark.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Bookmarks and only return the `id`
     * const bookmarkWithIdOnly = await prisma.bookmark.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BookmarkCreateManyAndReturnArgs>(args?: SelectSubset<T, BookmarkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Bookmark.
     * @param {BookmarkDeleteArgs} args - Arguments to delete one Bookmark.
     * @example
     * // Delete one Bookmark
     * const Bookmark = await prisma.bookmark.delete({
     *   where: {
     *     // ... filter to delete one Bookmark
     *   }
     * })
     * 
     */
    delete<T extends BookmarkDeleteArgs>(args: SelectSubset<T, BookmarkDeleteArgs<ExtArgs>>): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Bookmark.
     * @param {BookmarkUpdateArgs} args - Arguments to update one Bookmark.
     * @example
     * // Update one Bookmark
     * const bookmark = await prisma.bookmark.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookmarkUpdateArgs>(args: SelectSubset<T, BookmarkUpdateArgs<ExtArgs>>): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Bookmarks.
     * @param {BookmarkDeleteManyArgs} args - Arguments to filter Bookmarks to delete.
     * @example
     * // Delete a few Bookmarks
     * const { count } = await prisma.bookmark.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookmarkDeleteManyArgs>(args?: SelectSubset<T, BookmarkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookmarks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bookmarks
     * const bookmark = await prisma.bookmark.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookmarkUpdateManyArgs>(args: SelectSubset<T, BookmarkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookmarks and returns the data updated in the database.
     * @param {BookmarkUpdateManyAndReturnArgs} args - Arguments to update many Bookmarks.
     * @example
     * // Update many Bookmarks
     * const bookmark = await prisma.bookmark.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Bookmarks and only return the `id`
     * const bookmarkWithIdOnly = await prisma.bookmark.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BookmarkUpdateManyAndReturnArgs>(args: SelectSubset<T, BookmarkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Bookmark.
     * @param {BookmarkUpsertArgs} args - Arguments to update or create a Bookmark.
     * @example
     * // Update or create a Bookmark
     * const bookmark = await prisma.bookmark.upsert({
     *   create: {
     *     // ... data to create a Bookmark
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bookmark we want to update
     *   }
     * })
     */
    upsert<T extends BookmarkUpsertArgs>(args: SelectSubset<T, BookmarkUpsertArgs<ExtArgs>>): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Bookmarks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkCountArgs} args - Arguments to filter Bookmarks to count.
     * @example
     * // Count the number of Bookmarks
     * const count = await prisma.bookmark.count({
     *   where: {
     *     // ... the filter for the Bookmarks we want to count
     *   }
     * })
    **/
    count<T extends BookmarkCountArgs>(
      args?: Subset<T, BookmarkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookmarkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bookmark.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookmarkAggregateArgs>(args: Subset<T, BookmarkAggregateArgs>): Prisma.PrismaPromise<GetBookmarkAggregateType<T>>

    /**
     * Group by Bookmark.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookmarkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookmarkGroupByArgs['orderBy'] }
        : { orderBy?: BookmarkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookmarkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookmarkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Bookmark model
   */
  readonly fields: BookmarkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Bookmark.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookmarkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lastRead<T extends Bookmark$lastReadArgs<ExtArgs> = {}>(args?: Subset<T, Bookmark$lastReadArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    lastWatch<T extends Bookmark$lastWatchArgs<ExtArgs> = {}>(args?: Subset<T, Bookmark$lastWatchArgs<ExtArgs>>): Prisma__EpisodeClient<$Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    anime<T extends Bookmark$animeArgs<ExtArgs> = {}>(args?: Subset<T, Bookmark$animeArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    manga<T extends Bookmark$mangaArgs<ExtArgs> = {}>(args?: Subset<T, Bookmark$mangaArgs<ExtArgs>>): Prisma__MangaClient<$Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Bookmark model
   */
  interface BookmarkFieldRefs {
    readonly id: FieldRef<"Bookmark", 'Int'>
    readonly userId: FieldRef<"Bookmark", 'String'>
    readonly mark: FieldRef<"Bookmark", 'BookmarkName'>
    readonly type: FieldRef<"Bookmark", 'ModelName'>
    readonly addedAt: FieldRef<"Bookmark", 'DateTime'>
    readonly updatedAt: FieldRef<"Bookmark", 'DateTime'>
    readonly mangaSlug_url: FieldRef<"Bookmark", 'String'>
    readonly animeSlug_url: FieldRef<"Bookmark", 'String'>
    readonly chapterId: FieldRef<"Bookmark", 'Int'>
    readonly episodeId: FieldRef<"Bookmark", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Bookmark findUnique
   */
  export type BookmarkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmark
     */
    omit?: BookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter, which Bookmark to fetch.
     */
    where: BookmarkWhereUniqueInput
  }

  /**
   * Bookmark findUniqueOrThrow
   */
  export type BookmarkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmark
     */
    omit?: BookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter, which Bookmark to fetch.
     */
    where: BookmarkWhereUniqueInput
  }

  /**
   * Bookmark findFirst
   */
  export type BookmarkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmark
     */
    omit?: BookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter, which Bookmark to fetch.
     */
    where?: BookmarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookmarks to fetch.
     */
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookmarks.
     */
    cursor?: BookmarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookmarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookmarks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookmarks.
     */
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * Bookmark findFirstOrThrow
   */
  export type BookmarkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmark
     */
    omit?: BookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter, which Bookmark to fetch.
     */
    where?: BookmarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookmarks to fetch.
     */
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookmarks.
     */
    cursor?: BookmarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookmarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookmarks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookmarks.
     */
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * Bookmark findMany
   */
  export type BookmarkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmark
     */
    omit?: BookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter, which Bookmarks to fetch.
     */
    where?: BookmarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookmarks to fetch.
     */
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bookmarks.
     */
    cursor?: BookmarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookmarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookmarks.
     */
    skip?: number
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * Bookmark create
   */
  export type BookmarkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmark
     */
    omit?: BookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * The data needed to create a Bookmark.
     */
    data: XOR<BookmarkCreateInput, BookmarkUncheckedCreateInput>
  }

  /**
   * Bookmark createMany
   */
  export type BookmarkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bookmarks.
     */
    data: BookmarkCreateManyInput | BookmarkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Bookmark createManyAndReturn
   */
  export type BookmarkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmark
     */
    omit?: BookmarkOmit<ExtArgs> | null
    /**
     * The data used to create many Bookmarks.
     */
    data: BookmarkCreateManyInput | BookmarkCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Bookmark update
   */
  export type BookmarkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmark
     */
    omit?: BookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * The data needed to update a Bookmark.
     */
    data: XOR<BookmarkUpdateInput, BookmarkUncheckedUpdateInput>
    /**
     * Choose, which Bookmark to update.
     */
    where: BookmarkWhereUniqueInput
  }

  /**
   * Bookmark updateMany
   */
  export type BookmarkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bookmarks.
     */
    data: XOR<BookmarkUpdateManyMutationInput, BookmarkUncheckedUpdateManyInput>
    /**
     * Filter which Bookmarks to update
     */
    where?: BookmarkWhereInput
    /**
     * Limit how many Bookmarks to update.
     */
    limit?: number
  }

  /**
   * Bookmark updateManyAndReturn
   */
  export type BookmarkUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmark
     */
    omit?: BookmarkOmit<ExtArgs> | null
    /**
     * The data used to update Bookmarks.
     */
    data: XOR<BookmarkUpdateManyMutationInput, BookmarkUncheckedUpdateManyInput>
    /**
     * Filter which Bookmarks to update
     */
    where?: BookmarkWhereInput
    /**
     * Limit how many Bookmarks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Bookmark upsert
   */
  export type BookmarkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmark
     */
    omit?: BookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * The filter to search for the Bookmark to update in case it exists.
     */
    where: BookmarkWhereUniqueInput
    /**
     * In case the Bookmark found by the `where` argument doesn't exist, create a new Bookmark with this data.
     */
    create: XOR<BookmarkCreateInput, BookmarkUncheckedCreateInput>
    /**
     * In case the Bookmark was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookmarkUpdateInput, BookmarkUncheckedUpdateInput>
  }

  /**
   * Bookmark delete
   */
  export type BookmarkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmark
     */
    omit?: BookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter which Bookmark to delete.
     */
    where: BookmarkWhereUniqueInput
  }

  /**
   * Bookmark deleteMany
   */
  export type BookmarkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bookmarks to delete
     */
    where?: BookmarkWhereInput
    /**
     * Limit how many Bookmarks to delete.
     */
    limit?: number
  }

  /**
   * Bookmark.lastRead
   */
  export type Bookmark$lastReadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    where?: ChapterWhereInput
  }

  /**
   * Bookmark.lastWatch
   */
  export type Bookmark$lastWatchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Episode
     */
    omit?: EpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodeInclude<ExtArgs> | null
    where?: EpisodeWhereInput
  }

  /**
   * Bookmark.anime
   */
  export type Bookmark$animeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    where?: AnimeWhereInput
  }

  /**
   * Bookmark.manga
   */
  export type Bookmark$mangaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manga
     */
    select?: MangaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Manga
     */
    omit?: MangaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MangaInclude<ExtArgs> | null
    where?: MangaWhereInput
  }

  /**
   * Bookmark without action
   */
  export type BookmarkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmark
     */
    omit?: BookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: boolean | null
    image: string | null
    isAnonymous: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: boolean | null
    image: string | null
    isAnonymous: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    isAnonymous: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    isAnonymous?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    isAnonymous?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    isAnonymous?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string
    emailVerified: boolean | null
    image: string | null
    isAnonymous: boolean | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    isAnonymous?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    Bookmark?: boolean | User$BookmarkArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    isAnonymous?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    isAnonymous?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    isAnonymous?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "emailVerified" | "image" | "isAnonymous" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    Bookmark?: boolean | User$BookmarkArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      Bookmark: Prisma.$BookmarkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      email: string
      emailVerified: boolean | null
      image: string | null
      isAnonymous: boolean | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Bookmark<T extends User$BookmarkArgs<ExtArgs> = {}>(args?: Subset<T, User$BookmarkArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly image: FieldRef<"User", 'String'>
    readonly isAnonymous: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.Bookmark
   */
  export type User$BookmarkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bookmark
     */
    omit?: BookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    where?: BookmarkWhereInput
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    cursor?: BookmarkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    expiresAt: Date | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    userId: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    expiresAt: Date | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    userId: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    expiresAt: number
    token: number
    createdAt: number
    updatedAt: number
    ipAddress: number
    userAgent: number
    userId: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    expiresAt: Date
    token: string
    createdAt: Date
    updatedAt: Date
    ipAddress: string | null
    userAgent: string | null
    userId: string
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "expiresAt" | "token" | "createdAt" | "updatedAt" | "ipAddress" | "userAgent" | "userId", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      expiresAt: Date
      token: string
      createdAt: Date
      updatedAt: Date
      ipAddress: string | null
      userAgent: string | null
      userId: string
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly token: FieldRef<"Session", 'String'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
    readonly ipAddress: FieldRef<"Session", 'String'>
    readonly userAgent: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    accountId: string | null
    providerId: string | null
    userId: string | null
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    accountId: string | null
    providerId: string | null
    userId: string | null
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    accountId: number
    providerId: number
    userId: number
    accessToken: number
    refreshToken: number
    idToken: number
    accessTokenExpiresAt: number
    refreshTokenExpiresAt: number
    scope: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountMinAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    accountId: string
    providerId: string
    userId: string
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date
    updatedAt: Date
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "accountId" | "providerId" | "userId" | "accessToken" | "refreshToken" | "idToken" | "accessTokenExpiresAt" | "refreshTokenExpiresAt" | "scope" | "password" | "createdAt" | "updatedAt", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      accountId: string
      providerId: string
      userId: string
      accessToken: string | null
      refreshToken: string | null
      idToken: string | null
      accessTokenExpiresAt: Date | null
      refreshTokenExpiresAt: Date | null
      scope: string | null
      password: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly accountId: FieldRef<"Account", 'String'>
    readonly providerId: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly accessToken: FieldRef<"Account", 'String'>
    readonly refreshToken: FieldRef<"Account", 'String'>
    readonly idToken: FieldRef<"Account", 'String'>
    readonly accessTokenExpiresAt: FieldRef<"Account", 'DateTime'>
    readonly refreshTokenExpiresAt: FieldRef<"Account", 'DateTime'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly password: FieldRef<"Account", 'String'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Verification
   */

  export type AggregateVerification = {
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  export type VerificationMinAggregateOutputType = {
    id: string | null
    identifier: string | null
    value: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationMaxAggregateOutputType = {
    id: string | null
    identifier: string | null
    value: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationCountAggregateOutputType = {
    id: number
    identifier: number
    value: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VerificationMinAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationMaxAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationCountAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VerificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verification to aggregate.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Verifications
    **/
    _count?: true | VerificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationMaxAggregateInputType
  }

  export type GetVerificationAggregateType<T extends VerificationAggregateArgs> = {
        [P in keyof T & keyof AggregateVerification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerification[P]>
      : GetScalarType<T[P], AggregateVerification[P]>
  }




  export type VerificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationWhereInput
    orderBy?: VerificationOrderByWithAggregationInput | VerificationOrderByWithAggregationInput[]
    by: VerificationScalarFieldEnum[] | VerificationScalarFieldEnum
    having?: VerificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationCountAggregateInputType | true
    _min?: VerificationMinAggregateInputType
    _max?: VerificationMaxAggregateInputType
  }

  export type VerificationGroupByOutputType = {
    id: string
    identifier: string
    value: string
    expiresAt: Date
    createdAt: Date | null
    updatedAt: Date | null
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  type GetVerificationGroupByPayload<T extends VerificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationGroupByOutputType[P]>
        }
      >
    >


  export type VerificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectScalar = {
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VerificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "identifier" | "value" | "expiresAt" | "createdAt" | "updatedAt", ExtArgs["result"]["verification"]>

  export type $VerificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Verification"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      identifier: string
      value: string
      expiresAt: Date
      createdAt: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["verification"]>
    composites: {}
  }

  type VerificationGetPayload<S extends boolean | null | undefined | VerificationDefaultArgs> = $Result.GetResult<Prisma.$VerificationPayload, S>

  type VerificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationCountAggregateInputType | true
    }

  export interface VerificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Verification'], meta: { name: 'Verification' } }
    /**
     * Find zero or one Verification that matches the filter.
     * @param {VerificationFindUniqueArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationFindUniqueArgs>(args: SelectSubset<T, VerificationFindUniqueArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Verification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationFindUniqueOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationFindFirstArgs>(args?: SelectSubset<T, VerificationFindFirstArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Verifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Verifications
     * const verifications = await prisma.verification.findMany()
     * 
     * // Get first 10 Verifications
     * const verifications = await prisma.verification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationWithIdOnly = await prisma.verification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VerificationFindManyArgs>(args?: SelectSubset<T, VerificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Verification.
     * @param {VerificationCreateArgs} args - Arguments to create a Verification.
     * @example
     * // Create one Verification
     * const Verification = await prisma.verification.create({
     *   data: {
     *     // ... data to create a Verification
     *   }
     * })
     * 
     */
    create<T extends VerificationCreateArgs>(args: SelectSubset<T, VerificationCreateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Verifications.
     * @param {VerificationCreateManyArgs} args - Arguments to create many Verifications.
     * @example
     * // Create many Verifications
     * const verification = await prisma.verification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationCreateManyArgs>(args?: SelectSubset<T, VerificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Verifications and returns the data saved in the database.
     * @param {VerificationCreateManyAndReturnArgs} args - Arguments to create many Verifications.
     * @example
     * // Create many Verifications
     * const verification = await prisma.verification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Verifications and only return the `id`
     * const verificationWithIdOnly = await prisma.verification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Verification.
     * @param {VerificationDeleteArgs} args - Arguments to delete one Verification.
     * @example
     * // Delete one Verification
     * const Verification = await prisma.verification.delete({
     *   where: {
     *     // ... filter to delete one Verification
     *   }
     * })
     * 
     */
    delete<T extends VerificationDeleteArgs>(args: SelectSubset<T, VerificationDeleteArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Verification.
     * @param {VerificationUpdateArgs} args - Arguments to update one Verification.
     * @example
     * // Update one Verification
     * const verification = await prisma.verification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationUpdateArgs>(args: SelectSubset<T, VerificationUpdateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Verifications.
     * @param {VerificationDeleteManyArgs} args - Arguments to filter Verifications to delete.
     * @example
     * // Delete a few Verifications
     * const { count } = await prisma.verification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationDeleteManyArgs>(args?: SelectSubset<T, VerificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationUpdateManyArgs>(args: SelectSubset<T, VerificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications and returns the data updated in the database.
     * @param {VerificationUpdateManyAndReturnArgs} args - Arguments to update many Verifications.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Verifications and only return the `id`
     * const verificationWithIdOnly = await prisma.verification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Verification.
     * @param {VerificationUpsertArgs} args - Arguments to update or create a Verification.
     * @example
     * // Update or create a Verification
     * const verification = await prisma.verification.upsert({
     *   create: {
     *     // ... data to create a Verification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Verification we want to update
     *   }
     * })
     */
    upsert<T extends VerificationUpsertArgs>(args: SelectSubset<T, VerificationUpsertArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCountArgs} args - Arguments to filter Verifications to count.
     * @example
     * // Count the number of Verifications
     * const count = await prisma.verification.count({
     *   where: {
     *     // ... the filter for the Verifications we want to count
     *   }
     * })
    **/
    count<T extends VerificationCountArgs>(
      args?: Subset<T, VerificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationAggregateArgs>(args: Subset<T, VerificationAggregateArgs>): Prisma.PrismaPromise<GetVerificationAggregateType<T>>

    /**
     * Group by Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationGroupByArgs['orderBy'] }
        : { orderBy?: VerificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Verification model
   */
  readonly fields: VerificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Verification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Verification model
   */
  interface VerificationFieldRefs {
    readonly id: FieldRef<"Verification", 'String'>
    readonly identifier: FieldRef<"Verification", 'String'>
    readonly value: FieldRef<"Verification", 'String'>
    readonly expiresAt: FieldRef<"Verification", 'DateTime'>
    readonly createdAt: FieldRef<"Verification", 'DateTime'>
    readonly updatedAt: FieldRef<"Verification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Verification findUnique
   */
  export type VerificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification findUniqueOrThrow
   */
  export type VerificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification findFirst
   */
  export type VerificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification findFirstOrThrow
   */
  export type VerificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification findMany
   */
  export type VerificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verifications to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification create
   */
  export type VerificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data needed to create a Verification.
     */
    data: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
  }

  /**
   * Verification createMany
   */
  export type VerificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Verifications.
     */
    data: VerificationCreateManyInput | VerificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Verification createManyAndReturn
   */
  export type VerificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data used to create many Verifications.
     */
    data: VerificationCreateManyInput | VerificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Verification update
   */
  export type VerificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data needed to update a Verification.
     */
    data: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
    /**
     * Choose, which Verification to update.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification updateMany
   */
  export type VerificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Verifications.
     */
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
    /**
     * Filter which Verifications to update
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to update.
     */
    limit?: number
  }

  /**
   * Verification updateManyAndReturn
   */
  export type VerificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data used to update Verifications.
     */
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
    /**
     * Filter which Verifications to update
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to update.
     */
    limit?: number
  }

  /**
   * Verification upsert
   */
  export type VerificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The filter to search for the Verification to update in case it exists.
     */
    where: VerificationWhereUniqueInput
    /**
     * In case the Verification found by the `where` argument doesn't exist, create a new Verification with this data.
     */
    create: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
    /**
     * In case the Verification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
  }

  /**
   * Verification delete
   */
  export type VerificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter which Verification to delete.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification deleteMany
   */
  export type VerificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verifications to delete
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to delete.
     */
    limit?: number
  }

  /**
   * Verification without action
   */
  export type VerificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CoverScalarFieldEnum: {
    id: 'id',
    thumbnail: 'thumbnail',
    default: 'default'
  };

  export type CoverScalarFieldEnum = (typeof CoverScalarFieldEnum)[keyof typeof CoverScalarFieldEnum]


  export const AgeRestrictionScalarFieldEnum: {
    id: 'id',
    label: 'label',
    site_ids: 'site_ids'
  };

  export type AgeRestrictionScalarFieldEnum = (typeof AgeRestrictionScalarFieldEnum)[keyof typeof AgeRestrictionScalarFieldEnum]


  export const GenreScalarFieldEnum: {
    id: 'id',
    adult: 'adult',
    name: 'name',
    site_ids: 'site_ids'
  };

  export type GenreScalarFieldEnum = (typeof GenreScalarFieldEnum)[keyof typeof GenreScalarFieldEnum]


  export const RelatedScalarFieldEnum: {
    id: 'id',
    reason: 'reason',
    anime_slug: 'anime_slug',
    manga_slug: 'manga_slug',
    relatedAnimeSlug: 'relatedAnimeSlug',
    relatedMangaSlug: 'relatedMangaSlug'
  };

  export type RelatedScalarFieldEnum = (typeof RelatedScalarFieldEnum)[keyof typeof RelatedScalarFieldEnum]


  export const BackgroundScalarFieldEnum: {
    id: 'id',
    url: 'url'
  };

  export type BackgroundScalarFieldEnum = (typeof BackgroundScalarFieldEnum)[keyof typeof BackgroundScalarFieldEnum]


  export const AnimeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    eng_name: 'eng_name',
    slug_url: 'slug_url',
    otherNames: 'otherNames',
    summary: 'summary',
    model: 'model',
    site: 'site',
    coverId: 'coverId',
    ageRestrictionId: 'ageRestrictionId',
    backgroundId: 'backgroundId'
  };

  export type AnimeScalarFieldEnum = (typeof AnimeScalarFieldEnum)[keyof typeof AnimeScalarFieldEnum]


  export const EpisodeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    number: 'number',
    number_secondary: 'number_secondary',
    slug_url: 'slug_url',
    item_number: 'item_number',
    source: 'source',
    endingLength: 'endingLength'
  };

  export type EpisodeScalarFieldEnum = (typeof EpisodeScalarFieldEnum)[keyof typeof EpisodeScalarFieldEnum]


  export const MangaScalarFieldEnum: {
    id: 'id',
    name: 'name',
    eng_name: 'eng_name',
    slug_url: 'slug_url',
    otherNames: 'otherNames',
    summary: 'summary',
    model: 'model',
    site: 'site',
    isLicensed: 'isLicensed',
    coverId: 'coverId',
    ageRestrictionId: 'ageRestrictionId',
    itemsCountId: 'itemsCountId',
    backgroundId: 'backgroundId'
  };

  export type MangaScalarFieldEnum = (typeof MangaScalarFieldEnum)[keyof typeof MangaScalarFieldEnum]


  export const ItemsCountScalarFieldEnum: {
    id: 'id',
    uploaded: 'uploaded'
  };

  export type ItemsCountScalarFieldEnum = (typeof ItemsCountScalarFieldEnum)[keyof typeof ItemsCountScalarFieldEnum]


  export const ChapterScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    likes_count: 'likes_count',
    manga_id: 'manga_id',
    name: 'name',
    number: 'number',
    item_number: 'item_number',
    number_secondary: 'number_secondary',
    slug: 'slug',
    volume: 'volume',
    count: 'count'
  };

  export type ChapterScalarFieldEnum = (typeof ChapterScalarFieldEnum)[keyof typeof ChapterScalarFieldEnum]


  export const MangaPageScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    image: 'image',
    url: 'url',
    ratio: 'ratio',
    chapterId: 'chapterId'
  };

  export type MangaPageScalarFieldEnum = (typeof MangaPageScalarFieldEnum)[keyof typeof MangaPageScalarFieldEnum]


  export const BookmarkScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    mark: 'mark',
    type: 'type',
    addedAt: 'addedAt',
    updatedAt: 'updatedAt',
    mangaSlug_url: 'mangaSlug_url',
    animeSlug_url: 'animeSlug_url',
    chapterId: 'chapterId',
    episodeId: 'episodeId'
  };

  export type BookmarkScalarFieldEnum = (typeof BookmarkScalarFieldEnum)[keyof typeof BookmarkScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    isAnonymous: 'isAnonymous',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    expiresAt: 'expiresAt',
    token: 'token',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    userId: 'userId'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    accountId: 'accountId',
    providerId: 'providerId',
    userId: 'userId',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    idToken: 'idToken',
    accessTokenExpiresAt: 'accessTokenExpiresAt',
    refreshTokenExpiresAt: 'refreshTokenExpiresAt',
    scope: 'scope',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const VerificationScalarFieldEnum: {
    id: 'id',
    identifier: 'identifier',
    value: 'value',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VerificationScalarFieldEnum = (typeof VerificationScalarFieldEnum)[keyof typeof VerificationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'RelatedReason'
   */
  export type EnumRelatedReasonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RelatedReason'>
    


  /**
   * Reference to a field of type 'RelatedReason[]'
   */
  export type ListEnumRelatedReasonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RelatedReason[]'>
    


  /**
   * Reference to a field of type 'ModelName'
   */
  export type EnumModelNameFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ModelName'>
    


  /**
   * Reference to a field of type 'ModelName[]'
   */
  export type ListEnumModelNameFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ModelName[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'BookmarkName'
   */
  export type EnumBookmarkNameFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BookmarkName'>
    


  /**
   * Reference to a field of type 'BookmarkName[]'
   */
  export type ListEnumBookmarkNameFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BookmarkName[]'>
    
  /**
   * Deep Input Types
   */


  export type CoverWhereInput = {
    AND?: CoverWhereInput | CoverWhereInput[]
    OR?: CoverWhereInput[]
    NOT?: CoverWhereInput | CoverWhereInput[]
    id?: IntFilter<"Cover"> | number
    thumbnail?: StringFilter<"Cover"> | string
    default?: StringFilter<"Cover"> | string
    Manga?: MangaListRelationFilter
    Anime?: AnimeListRelationFilter
  }

  export type CoverOrderByWithRelationInput = {
    id?: SortOrder
    thumbnail?: SortOrder
    default?: SortOrder
    Manga?: MangaOrderByRelationAggregateInput
    Anime?: AnimeOrderByRelationAggregateInput
  }

  export type CoverWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CoverWhereInput | CoverWhereInput[]
    OR?: CoverWhereInput[]
    NOT?: CoverWhereInput | CoverWhereInput[]
    thumbnail?: StringFilter<"Cover"> | string
    default?: StringFilter<"Cover"> | string
    Manga?: MangaListRelationFilter
    Anime?: AnimeListRelationFilter
  }, "id">

  export type CoverOrderByWithAggregationInput = {
    id?: SortOrder
    thumbnail?: SortOrder
    default?: SortOrder
    _count?: CoverCountOrderByAggregateInput
    _avg?: CoverAvgOrderByAggregateInput
    _max?: CoverMaxOrderByAggregateInput
    _min?: CoverMinOrderByAggregateInput
    _sum?: CoverSumOrderByAggregateInput
  }

  export type CoverScalarWhereWithAggregatesInput = {
    AND?: CoverScalarWhereWithAggregatesInput | CoverScalarWhereWithAggregatesInput[]
    OR?: CoverScalarWhereWithAggregatesInput[]
    NOT?: CoverScalarWhereWithAggregatesInput | CoverScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Cover"> | number
    thumbnail?: StringWithAggregatesFilter<"Cover"> | string
    default?: StringWithAggregatesFilter<"Cover"> | string
  }

  export type AgeRestrictionWhereInput = {
    AND?: AgeRestrictionWhereInput | AgeRestrictionWhereInput[]
    OR?: AgeRestrictionWhereInput[]
    NOT?: AgeRestrictionWhereInput | AgeRestrictionWhereInput[]
    id?: IntFilter<"AgeRestriction"> | number
    label?: StringFilter<"AgeRestriction"> | string
    site_ids?: IntNullableListFilter<"AgeRestriction">
    Manga?: MangaListRelationFilter
    Anime?: AnimeListRelationFilter
  }

  export type AgeRestrictionOrderByWithRelationInput = {
    id?: SortOrder
    label?: SortOrder
    site_ids?: SortOrder
    Manga?: MangaOrderByRelationAggregateInput
    Anime?: AnimeOrderByRelationAggregateInput
  }

  export type AgeRestrictionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AgeRestrictionWhereInput | AgeRestrictionWhereInput[]
    OR?: AgeRestrictionWhereInput[]
    NOT?: AgeRestrictionWhereInput | AgeRestrictionWhereInput[]
    label?: StringFilter<"AgeRestriction"> | string
    site_ids?: IntNullableListFilter<"AgeRestriction">
    Manga?: MangaListRelationFilter
    Anime?: AnimeListRelationFilter
  }, "id" | "id">

  export type AgeRestrictionOrderByWithAggregationInput = {
    id?: SortOrder
    label?: SortOrder
    site_ids?: SortOrder
    _count?: AgeRestrictionCountOrderByAggregateInput
    _avg?: AgeRestrictionAvgOrderByAggregateInput
    _max?: AgeRestrictionMaxOrderByAggregateInput
    _min?: AgeRestrictionMinOrderByAggregateInput
    _sum?: AgeRestrictionSumOrderByAggregateInput
  }

  export type AgeRestrictionScalarWhereWithAggregatesInput = {
    AND?: AgeRestrictionScalarWhereWithAggregatesInput | AgeRestrictionScalarWhereWithAggregatesInput[]
    OR?: AgeRestrictionScalarWhereWithAggregatesInput[]
    NOT?: AgeRestrictionScalarWhereWithAggregatesInput | AgeRestrictionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AgeRestriction"> | number
    label?: StringWithAggregatesFilter<"AgeRestriction"> | string
    site_ids?: IntNullableListFilter<"AgeRestriction">
  }

  export type GenreWhereInput = {
    AND?: GenreWhereInput | GenreWhereInput[]
    OR?: GenreWhereInput[]
    NOT?: GenreWhereInput | GenreWhereInput[]
    id?: IntFilter<"Genre"> | number
    adult?: BoolFilter<"Genre"> | boolean
    name?: StringFilter<"Genre"> | string
    site_ids?: IntNullableListFilter<"Genre">
    Manga?: MangaListRelationFilter
    Anime?: AnimeListRelationFilter
  }

  export type GenreOrderByWithRelationInput = {
    id?: SortOrder
    adult?: SortOrder
    name?: SortOrder
    site_ids?: SortOrder
    Manga?: MangaOrderByRelationAggregateInput
    Anime?: AnimeOrderByRelationAggregateInput
  }

  export type GenreWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GenreWhereInput | GenreWhereInput[]
    OR?: GenreWhereInput[]
    NOT?: GenreWhereInput | GenreWhereInput[]
    adult?: BoolFilter<"Genre"> | boolean
    name?: StringFilter<"Genre"> | string
    site_ids?: IntNullableListFilter<"Genre">
    Manga?: MangaListRelationFilter
    Anime?: AnimeListRelationFilter
  }, "id" | "id">

  export type GenreOrderByWithAggregationInput = {
    id?: SortOrder
    adult?: SortOrder
    name?: SortOrder
    site_ids?: SortOrder
    _count?: GenreCountOrderByAggregateInput
    _avg?: GenreAvgOrderByAggregateInput
    _max?: GenreMaxOrderByAggregateInput
    _min?: GenreMinOrderByAggregateInput
    _sum?: GenreSumOrderByAggregateInput
  }

  export type GenreScalarWhereWithAggregatesInput = {
    AND?: GenreScalarWhereWithAggregatesInput | GenreScalarWhereWithAggregatesInput[]
    OR?: GenreScalarWhereWithAggregatesInput[]
    NOT?: GenreScalarWhereWithAggregatesInput | GenreScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Genre"> | number
    adult?: BoolWithAggregatesFilter<"Genre"> | boolean
    name?: StringWithAggregatesFilter<"Genre"> | string
    site_ids?: IntNullableListFilter<"Genre">
  }

  export type RelatedWhereInput = {
    AND?: RelatedWhereInput | RelatedWhereInput[]
    OR?: RelatedWhereInput[]
    NOT?: RelatedWhereInput | RelatedWhereInput[]
    id?: IntFilter<"Related"> | number
    reason?: EnumRelatedReasonFilter<"Related"> | $Enums.RelatedReason
    anime_slug?: StringNullableFilter<"Related"> | string | null
    manga_slug?: StringNullableFilter<"Related"> | string | null
    relatedAnimeSlug?: StringNullableFilter<"Related"> | string | null
    relatedMangaSlug?: StringNullableFilter<"Related"> | string | null
    anime?: XOR<AnimeNullableScalarRelationFilter, AnimeWhereInput> | null
    manga?: XOR<MangaNullableScalarRelationFilter, MangaWhereInput> | null
    relatedAnime?: XOR<AnimeNullableScalarRelationFilter, AnimeWhereInput> | null
    relatedManga?: XOR<MangaNullableScalarRelationFilter, MangaWhereInput> | null
  }

  export type RelatedOrderByWithRelationInput = {
    id?: SortOrder
    reason?: SortOrder
    anime_slug?: SortOrderInput | SortOrder
    manga_slug?: SortOrderInput | SortOrder
    relatedAnimeSlug?: SortOrderInput | SortOrder
    relatedMangaSlug?: SortOrderInput | SortOrder
    anime?: AnimeOrderByWithRelationInput
    manga?: MangaOrderByWithRelationInput
    relatedAnime?: AnimeOrderByWithRelationInput
    relatedManga?: MangaOrderByWithRelationInput
  }

  export type RelatedWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    manga_slug_relatedMangaSlug?: RelatedManga_slugRelatedMangaSlugCompoundUniqueInput
    anime_slug_relatedAnimeSlug?: RelatedAnime_slugRelatedAnimeSlugCompoundUniqueInput
    AND?: RelatedWhereInput | RelatedWhereInput[]
    OR?: RelatedWhereInput[]
    NOT?: RelatedWhereInput | RelatedWhereInput[]
    reason?: EnumRelatedReasonFilter<"Related"> | $Enums.RelatedReason
    anime_slug?: StringNullableFilter<"Related"> | string | null
    manga_slug?: StringNullableFilter<"Related"> | string | null
    relatedAnimeSlug?: StringNullableFilter<"Related"> | string | null
    relatedMangaSlug?: StringNullableFilter<"Related"> | string | null
    anime?: XOR<AnimeNullableScalarRelationFilter, AnimeWhereInput> | null
    manga?: XOR<MangaNullableScalarRelationFilter, MangaWhereInput> | null
    relatedAnime?: XOR<AnimeNullableScalarRelationFilter, AnimeWhereInput> | null
    relatedManga?: XOR<MangaNullableScalarRelationFilter, MangaWhereInput> | null
  }, "id" | "manga_slug_relatedMangaSlug" | "anime_slug_relatedAnimeSlug">

  export type RelatedOrderByWithAggregationInput = {
    id?: SortOrder
    reason?: SortOrder
    anime_slug?: SortOrderInput | SortOrder
    manga_slug?: SortOrderInput | SortOrder
    relatedAnimeSlug?: SortOrderInput | SortOrder
    relatedMangaSlug?: SortOrderInput | SortOrder
    _count?: RelatedCountOrderByAggregateInput
    _avg?: RelatedAvgOrderByAggregateInput
    _max?: RelatedMaxOrderByAggregateInput
    _min?: RelatedMinOrderByAggregateInput
    _sum?: RelatedSumOrderByAggregateInput
  }

  export type RelatedScalarWhereWithAggregatesInput = {
    AND?: RelatedScalarWhereWithAggregatesInput | RelatedScalarWhereWithAggregatesInput[]
    OR?: RelatedScalarWhereWithAggregatesInput[]
    NOT?: RelatedScalarWhereWithAggregatesInput | RelatedScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Related"> | number
    reason?: EnumRelatedReasonWithAggregatesFilter<"Related"> | $Enums.RelatedReason
    anime_slug?: StringNullableWithAggregatesFilter<"Related"> | string | null
    manga_slug?: StringNullableWithAggregatesFilter<"Related"> | string | null
    relatedAnimeSlug?: StringNullableWithAggregatesFilter<"Related"> | string | null
    relatedMangaSlug?: StringNullableWithAggregatesFilter<"Related"> | string | null
  }

  export type BackgroundWhereInput = {
    AND?: BackgroundWhereInput | BackgroundWhereInput[]
    OR?: BackgroundWhereInput[]
    NOT?: BackgroundWhereInput | BackgroundWhereInput[]
    id?: IntFilter<"Background"> | number
    url?: StringFilter<"Background"> | string
    Manga?: MangaListRelationFilter
    Anime?: AnimeListRelationFilter
  }

  export type BackgroundOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    Manga?: MangaOrderByRelationAggregateInput
    Anime?: AnimeOrderByRelationAggregateInput
  }

  export type BackgroundWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BackgroundWhereInput | BackgroundWhereInput[]
    OR?: BackgroundWhereInput[]
    NOT?: BackgroundWhereInput | BackgroundWhereInput[]
    url?: StringFilter<"Background"> | string
    Manga?: MangaListRelationFilter
    Anime?: AnimeListRelationFilter
  }, "id">

  export type BackgroundOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    _count?: BackgroundCountOrderByAggregateInput
    _avg?: BackgroundAvgOrderByAggregateInput
    _max?: BackgroundMaxOrderByAggregateInput
    _min?: BackgroundMinOrderByAggregateInput
    _sum?: BackgroundSumOrderByAggregateInput
  }

  export type BackgroundScalarWhereWithAggregatesInput = {
    AND?: BackgroundScalarWhereWithAggregatesInput | BackgroundScalarWhereWithAggregatesInput[]
    OR?: BackgroundScalarWhereWithAggregatesInput[]
    NOT?: BackgroundScalarWhereWithAggregatesInput | BackgroundScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Background"> | number
    url?: StringWithAggregatesFilter<"Background"> | string
  }

  export type AnimeWhereInput = {
    AND?: AnimeWhereInput | AnimeWhereInput[]
    OR?: AnimeWhereInput[]
    NOT?: AnimeWhereInput | AnimeWhereInput[]
    id?: IntFilter<"Anime"> | number
    name?: StringFilter<"Anime"> | string
    eng_name?: StringFilter<"Anime"> | string
    slug_url?: StringFilter<"Anime"> | string
    otherNames?: StringNullableListFilter<"Anime">
    summary?: StringNullableFilter<"Anime"> | string | null
    model?: EnumModelNameFilter<"Anime"> | $Enums.ModelName
    site?: IntFilter<"Anime"> | number
    coverId?: IntFilter<"Anime"> | number
    ageRestrictionId?: IntFilter<"Anime"> | number
    backgroundId?: IntFilter<"Anime"> | number
    cover?: XOR<CoverScalarRelationFilter, CoverWhereInput>
    ageRestriction?: XOR<AgeRestrictionScalarRelationFilter, AgeRestrictionWhereInput>
    genres?: GenreListRelationFilter
    background?: XOR<BackgroundScalarRelationFilter, BackgroundWhereInput>
    Episode?: EpisodeListRelationFilter
    relatedFrom?: RelatedListRelationFilter
    relatedTo?: RelatedListRelationFilter
    Bookmark?: BookmarkListRelationFilter
  }

  export type AnimeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    eng_name?: SortOrder
    slug_url?: SortOrder
    otherNames?: SortOrder
    summary?: SortOrderInput | SortOrder
    model?: SortOrder
    site?: SortOrder
    coverId?: SortOrder
    ageRestrictionId?: SortOrder
    backgroundId?: SortOrder
    cover?: CoverOrderByWithRelationInput
    ageRestriction?: AgeRestrictionOrderByWithRelationInput
    genres?: GenreOrderByRelationAggregateInput
    background?: BackgroundOrderByWithRelationInput
    Episode?: EpisodeOrderByRelationAggregateInput
    relatedFrom?: RelatedOrderByRelationAggregateInput
    relatedTo?: RelatedOrderByRelationAggregateInput
    Bookmark?: BookmarkOrderByRelationAggregateInput
  }

  export type AnimeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug_url?: string
    AND?: AnimeWhereInput | AnimeWhereInput[]
    OR?: AnimeWhereInput[]
    NOT?: AnimeWhereInput | AnimeWhereInput[]
    name?: StringFilter<"Anime"> | string
    eng_name?: StringFilter<"Anime"> | string
    otherNames?: StringNullableListFilter<"Anime">
    summary?: StringNullableFilter<"Anime"> | string | null
    model?: EnumModelNameFilter<"Anime"> | $Enums.ModelName
    site?: IntFilter<"Anime"> | number
    coverId?: IntFilter<"Anime"> | number
    ageRestrictionId?: IntFilter<"Anime"> | number
    backgroundId?: IntFilter<"Anime"> | number
    cover?: XOR<CoverScalarRelationFilter, CoverWhereInput>
    ageRestriction?: XOR<AgeRestrictionScalarRelationFilter, AgeRestrictionWhereInput>
    genres?: GenreListRelationFilter
    background?: XOR<BackgroundScalarRelationFilter, BackgroundWhereInput>
    Episode?: EpisodeListRelationFilter
    relatedFrom?: RelatedListRelationFilter
    relatedTo?: RelatedListRelationFilter
    Bookmark?: BookmarkListRelationFilter
  }, "slug_url" | "id" | "slug_url">

  export type AnimeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    eng_name?: SortOrder
    slug_url?: SortOrder
    otherNames?: SortOrder
    summary?: SortOrderInput | SortOrder
    model?: SortOrder
    site?: SortOrder
    coverId?: SortOrder
    ageRestrictionId?: SortOrder
    backgroundId?: SortOrder
    _count?: AnimeCountOrderByAggregateInput
    _avg?: AnimeAvgOrderByAggregateInput
    _max?: AnimeMaxOrderByAggregateInput
    _min?: AnimeMinOrderByAggregateInput
    _sum?: AnimeSumOrderByAggregateInput
  }

  export type AnimeScalarWhereWithAggregatesInput = {
    AND?: AnimeScalarWhereWithAggregatesInput | AnimeScalarWhereWithAggregatesInput[]
    OR?: AnimeScalarWhereWithAggregatesInput[]
    NOT?: AnimeScalarWhereWithAggregatesInput | AnimeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Anime"> | number
    name?: StringWithAggregatesFilter<"Anime"> | string
    eng_name?: StringWithAggregatesFilter<"Anime"> | string
    slug_url?: StringWithAggregatesFilter<"Anime"> | string
    otherNames?: StringNullableListFilter<"Anime">
    summary?: StringNullableWithAggregatesFilter<"Anime"> | string | null
    model?: EnumModelNameWithAggregatesFilter<"Anime"> | $Enums.ModelName
    site?: IntWithAggregatesFilter<"Anime"> | number
    coverId?: IntWithAggregatesFilter<"Anime"> | number
    ageRestrictionId?: IntWithAggregatesFilter<"Anime"> | number
    backgroundId?: IntWithAggregatesFilter<"Anime"> | number
  }

  export type EpisodeWhereInput = {
    AND?: EpisodeWhereInput | EpisodeWhereInput[]
    OR?: EpisodeWhereInput[]
    NOT?: EpisodeWhereInput | EpisodeWhereInput[]
    id?: IntFilter<"Episode"> | number
    name?: StringNullableFilter<"Episode"> | string | null
    number?: StringFilter<"Episode"> | string
    number_secondary?: StringFilter<"Episode"> | string
    slug_url?: StringFilter<"Episode"> | string
    item_number?: IntFilter<"Episode"> | number
    source?: StringNullableFilter<"Episode"> | string | null
    endingLength?: IntNullableFilter<"Episode"> | number | null
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
    Bookmark?: BookmarkListRelationFilter
  }

  export type EpisodeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    number?: SortOrder
    number_secondary?: SortOrder
    slug_url?: SortOrder
    item_number?: SortOrder
    source?: SortOrderInput | SortOrder
    endingLength?: SortOrderInput | SortOrder
    anime?: AnimeOrderByWithRelationInput
    Bookmark?: BookmarkOrderByRelationAggregateInput
  }

  export type EpisodeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug_url_item_number?: EpisodeSlug_urlItem_numberCompoundUniqueInput
    AND?: EpisodeWhereInput | EpisodeWhereInput[]
    OR?: EpisodeWhereInput[]
    NOT?: EpisodeWhereInput | EpisodeWhereInput[]
    name?: StringNullableFilter<"Episode"> | string | null
    number?: StringFilter<"Episode"> | string
    number_secondary?: StringFilter<"Episode"> | string
    slug_url?: StringFilter<"Episode"> | string
    item_number?: IntFilter<"Episode"> | number
    source?: StringNullableFilter<"Episode"> | string | null
    endingLength?: IntNullableFilter<"Episode"> | number | null
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
    Bookmark?: BookmarkListRelationFilter
  }, "id" | "id" | "slug_url_item_number">

  export type EpisodeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    number?: SortOrder
    number_secondary?: SortOrder
    slug_url?: SortOrder
    item_number?: SortOrder
    source?: SortOrderInput | SortOrder
    endingLength?: SortOrderInput | SortOrder
    _count?: EpisodeCountOrderByAggregateInput
    _avg?: EpisodeAvgOrderByAggregateInput
    _max?: EpisodeMaxOrderByAggregateInput
    _min?: EpisodeMinOrderByAggregateInput
    _sum?: EpisodeSumOrderByAggregateInput
  }

  export type EpisodeScalarWhereWithAggregatesInput = {
    AND?: EpisodeScalarWhereWithAggregatesInput | EpisodeScalarWhereWithAggregatesInput[]
    OR?: EpisodeScalarWhereWithAggregatesInput[]
    NOT?: EpisodeScalarWhereWithAggregatesInput | EpisodeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Episode"> | number
    name?: StringNullableWithAggregatesFilter<"Episode"> | string | null
    number?: StringWithAggregatesFilter<"Episode"> | string
    number_secondary?: StringWithAggregatesFilter<"Episode"> | string
    slug_url?: StringWithAggregatesFilter<"Episode"> | string
    item_number?: IntWithAggregatesFilter<"Episode"> | number
    source?: StringNullableWithAggregatesFilter<"Episode"> | string | null
    endingLength?: IntNullableWithAggregatesFilter<"Episode"> | number | null
  }

  export type MangaWhereInput = {
    AND?: MangaWhereInput | MangaWhereInput[]
    OR?: MangaWhereInput[]
    NOT?: MangaWhereInput | MangaWhereInput[]
    id?: IntFilter<"Manga"> | number
    name?: StringFilter<"Manga"> | string
    eng_name?: StringFilter<"Manga"> | string
    slug_url?: StringFilter<"Manga"> | string
    otherNames?: StringNullableListFilter<"Manga">
    summary?: StringNullableFilter<"Manga"> | string | null
    model?: EnumModelNameFilter<"Manga"> | $Enums.ModelName
    site?: IntFilter<"Manga"> | number
    isLicensed?: BoolFilter<"Manga"> | boolean
    coverId?: IntFilter<"Manga"> | number
    ageRestrictionId?: IntFilter<"Manga"> | number
    itemsCountId?: IntFilter<"Manga"> | number
    backgroundId?: IntFilter<"Manga"> | number
    cover?: XOR<CoverScalarRelationFilter, CoverWhereInput>
    ageRestriction?: XOR<AgeRestrictionScalarRelationFilter, AgeRestrictionWhereInput>
    items_count?: XOR<ItemsCountScalarRelationFilter, ItemsCountWhereInput>
    genres?: GenreListRelationFilter
    background?: XOR<BackgroundScalarRelationFilter, BackgroundWhereInput>
    Chapter?: ChapterListRelationFilter
    relatedFrom?: RelatedListRelationFilter
    relatedTo?: RelatedListRelationFilter
    Bookmark?: BookmarkListRelationFilter
  }

  export type MangaOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    eng_name?: SortOrder
    slug_url?: SortOrder
    otherNames?: SortOrder
    summary?: SortOrderInput | SortOrder
    model?: SortOrder
    site?: SortOrder
    isLicensed?: SortOrder
    coverId?: SortOrder
    ageRestrictionId?: SortOrder
    itemsCountId?: SortOrder
    backgroundId?: SortOrder
    cover?: CoverOrderByWithRelationInput
    ageRestriction?: AgeRestrictionOrderByWithRelationInput
    items_count?: ItemsCountOrderByWithRelationInput
    genres?: GenreOrderByRelationAggregateInput
    background?: BackgroundOrderByWithRelationInput
    Chapter?: ChapterOrderByRelationAggregateInput
    relatedFrom?: RelatedOrderByRelationAggregateInput
    relatedTo?: RelatedOrderByRelationAggregateInput
    Bookmark?: BookmarkOrderByRelationAggregateInput
  }

  export type MangaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug_url?: string
    AND?: MangaWhereInput | MangaWhereInput[]
    OR?: MangaWhereInput[]
    NOT?: MangaWhereInput | MangaWhereInput[]
    name?: StringFilter<"Manga"> | string
    eng_name?: StringFilter<"Manga"> | string
    otherNames?: StringNullableListFilter<"Manga">
    summary?: StringNullableFilter<"Manga"> | string | null
    model?: EnumModelNameFilter<"Manga"> | $Enums.ModelName
    site?: IntFilter<"Manga"> | number
    isLicensed?: BoolFilter<"Manga"> | boolean
    coverId?: IntFilter<"Manga"> | number
    ageRestrictionId?: IntFilter<"Manga"> | number
    itemsCountId?: IntFilter<"Manga"> | number
    backgroundId?: IntFilter<"Manga"> | number
    cover?: XOR<CoverScalarRelationFilter, CoverWhereInput>
    ageRestriction?: XOR<AgeRestrictionScalarRelationFilter, AgeRestrictionWhereInput>
    items_count?: XOR<ItemsCountScalarRelationFilter, ItemsCountWhereInput>
    genres?: GenreListRelationFilter
    background?: XOR<BackgroundScalarRelationFilter, BackgroundWhereInput>
    Chapter?: ChapterListRelationFilter
    relatedFrom?: RelatedListRelationFilter
    relatedTo?: RelatedListRelationFilter
    Bookmark?: BookmarkListRelationFilter
  }, "slug_url" | "id" | "slug_url">

  export type MangaOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    eng_name?: SortOrder
    slug_url?: SortOrder
    otherNames?: SortOrder
    summary?: SortOrderInput | SortOrder
    model?: SortOrder
    site?: SortOrder
    isLicensed?: SortOrder
    coverId?: SortOrder
    ageRestrictionId?: SortOrder
    itemsCountId?: SortOrder
    backgroundId?: SortOrder
    _count?: MangaCountOrderByAggregateInput
    _avg?: MangaAvgOrderByAggregateInput
    _max?: MangaMaxOrderByAggregateInput
    _min?: MangaMinOrderByAggregateInput
    _sum?: MangaSumOrderByAggregateInput
  }

  export type MangaScalarWhereWithAggregatesInput = {
    AND?: MangaScalarWhereWithAggregatesInput | MangaScalarWhereWithAggregatesInput[]
    OR?: MangaScalarWhereWithAggregatesInput[]
    NOT?: MangaScalarWhereWithAggregatesInput | MangaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Manga"> | number
    name?: StringWithAggregatesFilter<"Manga"> | string
    eng_name?: StringWithAggregatesFilter<"Manga"> | string
    slug_url?: StringWithAggregatesFilter<"Manga"> | string
    otherNames?: StringNullableListFilter<"Manga">
    summary?: StringNullableWithAggregatesFilter<"Manga"> | string | null
    model?: EnumModelNameWithAggregatesFilter<"Manga"> | $Enums.ModelName
    site?: IntWithAggregatesFilter<"Manga"> | number
    isLicensed?: BoolWithAggregatesFilter<"Manga"> | boolean
    coverId?: IntWithAggregatesFilter<"Manga"> | number
    ageRestrictionId?: IntWithAggregatesFilter<"Manga"> | number
    itemsCountId?: IntWithAggregatesFilter<"Manga"> | number
    backgroundId?: IntWithAggregatesFilter<"Manga"> | number
  }

  export type ItemsCountWhereInput = {
    AND?: ItemsCountWhereInput | ItemsCountWhereInput[]
    OR?: ItemsCountWhereInput[]
    NOT?: ItemsCountWhereInput | ItemsCountWhereInput[]
    id?: IntFilter<"ItemsCount"> | number
    uploaded?: IntFilter<"ItemsCount"> | number
    Manga?: MangaListRelationFilter
  }

  export type ItemsCountOrderByWithRelationInput = {
    id?: SortOrder
    uploaded?: SortOrder
    Manga?: MangaOrderByRelationAggregateInput
  }

  export type ItemsCountWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ItemsCountWhereInput | ItemsCountWhereInput[]
    OR?: ItemsCountWhereInput[]
    NOT?: ItemsCountWhereInput | ItemsCountWhereInput[]
    uploaded?: IntFilter<"ItemsCount"> | number
    Manga?: MangaListRelationFilter
  }, "id" | "id">

  export type ItemsCountOrderByWithAggregationInput = {
    id?: SortOrder
    uploaded?: SortOrder
    _count?: ItemsCountCountOrderByAggregateInput
    _avg?: ItemsCountAvgOrderByAggregateInput
    _max?: ItemsCountMaxOrderByAggregateInput
    _min?: ItemsCountMinOrderByAggregateInput
    _sum?: ItemsCountSumOrderByAggregateInput
  }

  export type ItemsCountScalarWhereWithAggregatesInput = {
    AND?: ItemsCountScalarWhereWithAggregatesInput | ItemsCountScalarWhereWithAggregatesInput[]
    OR?: ItemsCountScalarWhereWithAggregatesInput[]
    NOT?: ItemsCountScalarWhereWithAggregatesInput | ItemsCountScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ItemsCount"> | number
    uploaded?: IntWithAggregatesFilter<"ItemsCount"> | number
  }

  export type ChapterWhereInput = {
    AND?: ChapterWhereInput | ChapterWhereInput[]
    OR?: ChapterWhereInput[]
    NOT?: ChapterWhereInput | ChapterWhereInput[]
    id?: IntFilter<"Chapter"> | number
    created_at?: DateTimeFilter<"Chapter"> | Date | string
    likes_count?: IntFilter<"Chapter"> | number
    manga_id?: IntFilter<"Chapter"> | number
    name?: StringNullableFilter<"Chapter"> | string | null
    number?: StringFilter<"Chapter"> | string
    item_number?: IntFilter<"Chapter"> | number
    number_secondary?: StringFilter<"Chapter"> | string
    slug?: StringFilter<"Chapter"> | string
    volume?: StringFilter<"Chapter"> | string
    count?: IntFilter<"Chapter"> | number
    pages?: MangaPageListRelationFilter
    manga?: XOR<MangaScalarRelationFilter, MangaWhereInput>
    Bookmark?: BookmarkListRelationFilter
  }

  export type ChapterOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    likes_count?: SortOrder
    manga_id?: SortOrder
    name?: SortOrderInput | SortOrder
    number?: SortOrder
    item_number?: SortOrder
    number_secondary?: SortOrder
    slug?: SortOrder
    volume?: SortOrder
    count?: SortOrder
    pages?: MangaPageOrderByRelationAggregateInput
    manga?: MangaOrderByWithRelationInput
    Bookmark?: BookmarkOrderByRelationAggregateInput
  }

  export type ChapterWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChapterWhereInput | ChapterWhereInput[]
    OR?: ChapterWhereInput[]
    NOT?: ChapterWhereInput | ChapterWhereInput[]
    created_at?: DateTimeFilter<"Chapter"> | Date | string
    likes_count?: IntFilter<"Chapter"> | number
    manga_id?: IntFilter<"Chapter"> | number
    name?: StringNullableFilter<"Chapter"> | string | null
    number?: StringFilter<"Chapter"> | string
    item_number?: IntFilter<"Chapter"> | number
    number_secondary?: StringFilter<"Chapter"> | string
    slug?: StringFilter<"Chapter"> | string
    volume?: StringFilter<"Chapter"> | string
    count?: IntFilter<"Chapter"> | number
    pages?: MangaPageListRelationFilter
    manga?: XOR<MangaScalarRelationFilter, MangaWhereInput>
    Bookmark?: BookmarkListRelationFilter
  }, "id" | "id">

  export type ChapterOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    likes_count?: SortOrder
    manga_id?: SortOrder
    name?: SortOrderInput | SortOrder
    number?: SortOrder
    item_number?: SortOrder
    number_secondary?: SortOrder
    slug?: SortOrder
    volume?: SortOrder
    count?: SortOrder
    _count?: ChapterCountOrderByAggregateInput
    _avg?: ChapterAvgOrderByAggregateInput
    _max?: ChapterMaxOrderByAggregateInput
    _min?: ChapterMinOrderByAggregateInput
    _sum?: ChapterSumOrderByAggregateInput
  }

  export type ChapterScalarWhereWithAggregatesInput = {
    AND?: ChapterScalarWhereWithAggregatesInput | ChapterScalarWhereWithAggregatesInput[]
    OR?: ChapterScalarWhereWithAggregatesInput[]
    NOT?: ChapterScalarWhereWithAggregatesInput | ChapterScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Chapter"> | number
    created_at?: DateTimeWithAggregatesFilter<"Chapter"> | Date | string
    likes_count?: IntWithAggregatesFilter<"Chapter"> | number
    manga_id?: IntWithAggregatesFilter<"Chapter"> | number
    name?: StringNullableWithAggregatesFilter<"Chapter"> | string | null
    number?: StringWithAggregatesFilter<"Chapter"> | string
    item_number?: IntWithAggregatesFilter<"Chapter"> | number
    number_secondary?: StringWithAggregatesFilter<"Chapter"> | string
    slug?: StringWithAggregatesFilter<"Chapter"> | string
    volume?: StringWithAggregatesFilter<"Chapter"> | string
    count?: IntWithAggregatesFilter<"Chapter"> | number
  }

  export type MangaPageWhereInput = {
    AND?: MangaPageWhereInput | MangaPageWhereInput[]
    OR?: MangaPageWhereInput[]
    NOT?: MangaPageWhereInput | MangaPageWhereInput[]
    id?: IntFilter<"MangaPage"> | number
    created_at?: DateTimeFilter<"MangaPage"> | Date | string
    image?: StringFilter<"MangaPage"> | string
    url?: StringFilter<"MangaPage"> | string
    ratio?: FloatFilter<"MangaPage"> | number
    chapterId?: IntFilter<"MangaPage"> | number
    Chapter?: XOR<ChapterScalarRelationFilter, ChapterWhereInput>
  }

  export type MangaPageOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    image?: SortOrder
    url?: SortOrder
    ratio?: SortOrder
    chapterId?: SortOrder
    Chapter?: ChapterOrderByWithRelationInput
  }

  export type MangaPageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    image_chapterId?: MangaPageImageChapterIdCompoundUniqueInput
    AND?: MangaPageWhereInput | MangaPageWhereInput[]
    OR?: MangaPageWhereInput[]
    NOT?: MangaPageWhereInput | MangaPageWhereInput[]
    created_at?: DateTimeFilter<"MangaPage"> | Date | string
    image?: StringFilter<"MangaPage"> | string
    url?: StringFilter<"MangaPage"> | string
    ratio?: FloatFilter<"MangaPage"> | number
    chapterId?: IntFilter<"MangaPage"> | number
    Chapter?: XOR<ChapterScalarRelationFilter, ChapterWhereInput>
  }, "id" | "image_chapterId">

  export type MangaPageOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    image?: SortOrder
    url?: SortOrder
    ratio?: SortOrder
    chapterId?: SortOrder
    _count?: MangaPageCountOrderByAggregateInput
    _avg?: MangaPageAvgOrderByAggregateInput
    _max?: MangaPageMaxOrderByAggregateInput
    _min?: MangaPageMinOrderByAggregateInput
    _sum?: MangaPageSumOrderByAggregateInput
  }

  export type MangaPageScalarWhereWithAggregatesInput = {
    AND?: MangaPageScalarWhereWithAggregatesInput | MangaPageScalarWhereWithAggregatesInput[]
    OR?: MangaPageScalarWhereWithAggregatesInput[]
    NOT?: MangaPageScalarWhereWithAggregatesInput | MangaPageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MangaPage"> | number
    created_at?: DateTimeWithAggregatesFilter<"MangaPage"> | Date | string
    image?: StringWithAggregatesFilter<"MangaPage"> | string
    url?: StringWithAggregatesFilter<"MangaPage"> | string
    ratio?: FloatWithAggregatesFilter<"MangaPage"> | number
    chapterId?: IntWithAggregatesFilter<"MangaPage"> | number
  }

  export type BookmarkWhereInput = {
    AND?: BookmarkWhereInput | BookmarkWhereInput[]
    OR?: BookmarkWhereInput[]
    NOT?: BookmarkWhereInput | BookmarkWhereInput[]
    id?: IntFilter<"Bookmark"> | number
    userId?: StringFilter<"Bookmark"> | string
    mark?: EnumBookmarkNameFilter<"Bookmark"> | $Enums.BookmarkName
    type?: EnumModelNameFilter<"Bookmark"> | $Enums.ModelName
    addedAt?: DateTimeFilter<"Bookmark"> | Date | string
    updatedAt?: DateTimeFilter<"Bookmark"> | Date | string
    mangaSlug_url?: StringNullableFilter<"Bookmark"> | string | null
    animeSlug_url?: StringNullableFilter<"Bookmark"> | string | null
    chapterId?: IntNullableFilter<"Bookmark"> | number | null
    episodeId?: IntNullableFilter<"Bookmark"> | number | null
    lastRead?: XOR<ChapterNullableScalarRelationFilter, ChapterWhereInput> | null
    lastWatch?: XOR<EpisodeNullableScalarRelationFilter, EpisodeWhereInput> | null
    anime?: XOR<AnimeNullableScalarRelationFilter, AnimeWhereInput> | null
    manga?: XOR<MangaNullableScalarRelationFilter, MangaWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type BookmarkOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    mark?: SortOrder
    type?: SortOrder
    addedAt?: SortOrder
    updatedAt?: SortOrder
    mangaSlug_url?: SortOrderInput | SortOrder
    animeSlug_url?: SortOrderInput | SortOrder
    chapterId?: SortOrderInput | SortOrder
    episodeId?: SortOrderInput | SortOrder
    lastRead?: ChapterOrderByWithRelationInput
    lastWatch?: EpisodeOrderByWithRelationInput
    anime?: AnimeOrderByWithRelationInput
    manga?: MangaOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type BookmarkWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    mangaSlug_url_userId?: BookmarkMangaSlug_urlUserIdCompoundUniqueInput
    animeSlug_url_userId?: BookmarkAnimeSlug_urlUserIdCompoundUniqueInput
    AND?: BookmarkWhereInput | BookmarkWhereInput[]
    OR?: BookmarkWhereInput[]
    NOT?: BookmarkWhereInput | BookmarkWhereInput[]
    userId?: StringFilter<"Bookmark"> | string
    mark?: EnumBookmarkNameFilter<"Bookmark"> | $Enums.BookmarkName
    type?: EnumModelNameFilter<"Bookmark"> | $Enums.ModelName
    addedAt?: DateTimeFilter<"Bookmark"> | Date | string
    updatedAt?: DateTimeFilter<"Bookmark"> | Date | string
    mangaSlug_url?: StringNullableFilter<"Bookmark"> | string | null
    animeSlug_url?: StringNullableFilter<"Bookmark"> | string | null
    chapterId?: IntNullableFilter<"Bookmark"> | number | null
    episodeId?: IntNullableFilter<"Bookmark"> | number | null
    lastRead?: XOR<ChapterNullableScalarRelationFilter, ChapterWhereInput> | null
    lastWatch?: XOR<EpisodeNullableScalarRelationFilter, EpisodeWhereInput> | null
    anime?: XOR<AnimeNullableScalarRelationFilter, AnimeWhereInput> | null
    manga?: XOR<MangaNullableScalarRelationFilter, MangaWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "mangaSlug_url_userId" | "animeSlug_url_userId">

  export type BookmarkOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    mark?: SortOrder
    type?: SortOrder
    addedAt?: SortOrder
    updatedAt?: SortOrder
    mangaSlug_url?: SortOrderInput | SortOrder
    animeSlug_url?: SortOrderInput | SortOrder
    chapterId?: SortOrderInput | SortOrder
    episodeId?: SortOrderInput | SortOrder
    _count?: BookmarkCountOrderByAggregateInput
    _avg?: BookmarkAvgOrderByAggregateInput
    _max?: BookmarkMaxOrderByAggregateInput
    _min?: BookmarkMinOrderByAggregateInput
    _sum?: BookmarkSumOrderByAggregateInput
  }

  export type BookmarkScalarWhereWithAggregatesInput = {
    AND?: BookmarkScalarWhereWithAggregatesInput | BookmarkScalarWhereWithAggregatesInput[]
    OR?: BookmarkScalarWhereWithAggregatesInput[]
    NOT?: BookmarkScalarWhereWithAggregatesInput | BookmarkScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Bookmark"> | number
    userId?: StringWithAggregatesFilter<"Bookmark"> | string
    mark?: EnumBookmarkNameWithAggregatesFilter<"Bookmark"> | $Enums.BookmarkName
    type?: EnumModelNameWithAggregatesFilter<"Bookmark"> | $Enums.ModelName
    addedAt?: DateTimeWithAggregatesFilter<"Bookmark"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Bookmark"> | Date | string
    mangaSlug_url?: StringNullableWithAggregatesFilter<"Bookmark"> | string | null
    animeSlug_url?: StringNullableWithAggregatesFilter<"Bookmark"> | string | null
    chapterId?: IntNullableWithAggregatesFilter<"Bookmark"> | number | null
    episodeId?: IntNullableWithAggregatesFilter<"Bookmark"> | number | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    emailVerified?: BoolNullableFilter<"User"> | boolean | null
    image?: StringNullableFilter<"User"> | string | null
    isAnonymous?: BoolNullableFilter<"User"> | boolean | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    sessions?: SessionListRelationFilter
    accounts?: AccountListRelationFilter
    Bookmark?: BookmarkListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    isAnonymous?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sessions?: SessionOrderByRelationAggregateInput
    accounts?: AccountOrderByRelationAggregateInput
    Bookmark?: BookmarkOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    emailVerified?: BoolNullableFilter<"User"> | boolean | null
    image?: StringNullableFilter<"User"> | string | null
    isAnonymous?: BoolNullableFilter<"User"> | boolean | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    sessions?: SessionListRelationFilter
    accounts?: AccountListRelationFilter
    Bookmark?: BookmarkListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    isAnonymous?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    emailVerified?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    isAnonymous?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    token?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    token?: StringWithAggregatesFilter<"Session"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    ipAddress?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userId?: StringWithAggregatesFilter<"Session"> | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    idToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    idToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    accountId?: StringWithAggregatesFilter<"Account"> | string
    providerId?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    accessToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    refreshToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    idToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    password?: StringNullableWithAggregatesFilter<"Account"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
  }

  export type VerificationWhereInput = {
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    id?: StringFilter<"Verification"> | string
    identifier?: StringFilter<"Verification"> | string
    value?: StringFilter<"Verification"> | string
    expiresAt?: DateTimeFilter<"Verification"> | Date | string
    createdAt?: DateTimeNullableFilter<"Verification"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Verification"> | Date | string | null
  }

  export type VerificationOrderByWithRelationInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
  }

  export type VerificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    identifier?: StringFilter<"Verification"> | string
    value?: StringFilter<"Verification"> | string
    expiresAt?: DateTimeFilter<"Verification"> | Date | string
    createdAt?: DateTimeNullableFilter<"Verification"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Verification"> | Date | string | null
  }, "id">

  export type VerificationOrderByWithAggregationInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: VerificationCountOrderByAggregateInput
    _max?: VerificationMaxOrderByAggregateInput
    _min?: VerificationMinOrderByAggregateInput
  }

  export type VerificationScalarWhereWithAggregatesInput = {
    AND?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    OR?: VerificationScalarWhereWithAggregatesInput[]
    NOT?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Verification"> | string
    identifier?: StringWithAggregatesFilter<"Verification"> | string
    value?: StringWithAggregatesFilter<"Verification"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
    createdAt?: DateTimeNullableWithAggregatesFilter<"Verification"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Verification"> | Date | string | null
  }

  export type CoverCreateInput = {
    thumbnail: string
    default: string
    Manga?: MangaCreateNestedManyWithoutCoverInput
    Anime?: AnimeCreateNestedManyWithoutCoverInput
  }

  export type CoverUncheckedCreateInput = {
    id?: number
    thumbnail: string
    default: string
    Manga?: MangaUncheckedCreateNestedManyWithoutCoverInput
    Anime?: AnimeUncheckedCreateNestedManyWithoutCoverInput
  }

  export type CoverUpdateInput = {
    thumbnail?: StringFieldUpdateOperationsInput | string
    default?: StringFieldUpdateOperationsInput | string
    Manga?: MangaUpdateManyWithoutCoverNestedInput
    Anime?: AnimeUpdateManyWithoutCoverNestedInput
  }

  export type CoverUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    thumbnail?: StringFieldUpdateOperationsInput | string
    default?: StringFieldUpdateOperationsInput | string
    Manga?: MangaUncheckedUpdateManyWithoutCoverNestedInput
    Anime?: AnimeUncheckedUpdateManyWithoutCoverNestedInput
  }

  export type CoverCreateManyInput = {
    id?: number
    thumbnail: string
    default: string
  }

  export type CoverUpdateManyMutationInput = {
    thumbnail?: StringFieldUpdateOperationsInput | string
    default?: StringFieldUpdateOperationsInput | string
  }

  export type CoverUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    thumbnail?: StringFieldUpdateOperationsInput | string
    default?: StringFieldUpdateOperationsInput | string
  }

  export type AgeRestrictionCreateInput = {
    id: number
    label: string
    site_ids?: AgeRestrictionCreatesite_idsInput | number[]
    Manga?: MangaCreateNestedManyWithoutAgeRestrictionInput
    Anime?: AnimeCreateNestedManyWithoutAgeRestrictionInput
  }

  export type AgeRestrictionUncheckedCreateInput = {
    id: number
    label: string
    site_ids?: AgeRestrictionCreatesite_idsInput | number[]
    Manga?: MangaUncheckedCreateNestedManyWithoutAgeRestrictionInput
    Anime?: AnimeUncheckedCreateNestedManyWithoutAgeRestrictionInput
  }

  export type AgeRestrictionUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    site_ids?: AgeRestrictionUpdatesite_idsInput | number[]
    Manga?: MangaUpdateManyWithoutAgeRestrictionNestedInput
    Anime?: AnimeUpdateManyWithoutAgeRestrictionNestedInput
  }

  export type AgeRestrictionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    site_ids?: AgeRestrictionUpdatesite_idsInput | number[]
    Manga?: MangaUncheckedUpdateManyWithoutAgeRestrictionNestedInput
    Anime?: AnimeUncheckedUpdateManyWithoutAgeRestrictionNestedInput
  }

  export type AgeRestrictionCreateManyInput = {
    id: number
    label: string
    site_ids?: AgeRestrictionCreatesite_idsInput | number[]
  }

  export type AgeRestrictionUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    site_ids?: AgeRestrictionUpdatesite_idsInput | number[]
  }

  export type AgeRestrictionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    site_ids?: AgeRestrictionUpdatesite_idsInput | number[]
  }

  export type GenreCreateInput = {
    id: number
    adult?: boolean
    name: string
    site_ids?: GenreCreatesite_idsInput | number[]
    Manga?: MangaCreateNestedManyWithoutGenresInput
    Anime?: AnimeCreateNestedManyWithoutGenresInput
  }

  export type GenreUncheckedCreateInput = {
    id: number
    adult?: boolean
    name: string
    site_ids?: GenreCreatesite_idsInput | number[]
    Manga?: MangaUncheckedCreateNestedManyWithoutGenresInput
    Anime?: AnimeUncheckedCreateNestedManyWithoutGenresInput
  }

  export type GenreUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    adult?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    site_ids?: GenreUpdatesite_idsInput | number[]
    Manga?: MangaUpdateManyWithoutGenresNestedInput
    Anime?: AnimeUpdateManyWithoutGenresNestedInput
  }

  export type GenreUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    adult?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    site_ids?: GenreUpdatesite_idsInput | number[]
    Manga?: MangaUncheckedUpdateManyWithoutGenresNestedInput
    Anime?: AnimeUncheckedUpdateManyWithoutGenresNestedInput
  }

  export type GenreCreateManyInput = {
    id: number
    adult?: boolean
    name: string
    site_ids?: GenreCreatesite_idsInput | number[]
  }

  export type GenreUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    adult?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    site_ids?: GenreUpdatesite_idsInput | number[]
  }

  export type GenreUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    adult?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    site_ids?: GenreUpdatesite_idsInput | number[]
  }

  export type RelatedCreateInput = {
    reason: $Enums.RelatedReason
    anime?: AnimeCreateNestedOneWithoutRelatedFromInput
    manga?: MangaCreateNestedOneWithoutRelatedFromInput
    relatedAnime?: AnimeCreateNestedOneWithoutRelatedToInput
    relatedManga?: MangaCreateNestedOneWithoutRelatedToInput
  }

  export type RelatedUncheckedCreateInput = {
    id?: number
    reason: $Enums.RelatedReason
    anime_slug?: string | null
    manga_slug?: string | null
    relatedAnimeSlug?: string | null
    relatedMangaSlug?: string | null
  }

  export type RelatedUpdateInput = {
    reason?: EnumRelatedReasonFieldUpdateOperationsInput | $Enums.RelatedReason
    anime?: AnimeUpdateOneWithoutRelatedFromNestedInput
    manga?: MangaUpdateOneWithoutRelatedFromNestedInput
    relatedAnime?: AnimeUpdateOneWithoutRelatedToNestedInput
    relatedManga?: MangaUpdateOneWithoutRelatedToNestedInput
  }

  export type RelatedUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    reason?: EnumRelatedReasonFieldUpdateOperationsInput | $Enums.RelatedReason
    anime_slug?: NullableStringFieldUpdateOperationsInput | string | null
    manga_slug?: NullableStringFieldUpdateOperationsInput | string | null
    relatedAnimeSlug?: NullableStringFieldUpdateOperationsInput | string | null
    relatedMangaSlug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RelatedCreateManyInput = {
    id?: number
    reason: $Enums.RelatedReason
    anime_slug?: string | null
    manga_slug?: string | null
    relatedAnimeSlug?: string | null
    relatedMangaSlug?: string | null
  }

  export type RelatedUpdateManyMutationInput = {
    reason?: EnumRelatedReasonFieldUpdateOperationsInput | $Enums.RelatedReason
  }

  export type RelatedUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    reason?: EnumRelatedReasonFieldUpdateOperationsInput | $Enums.RelatedReason
    anime_slug?: NullableStringFieldUpdateOperationsInput | string | null
    manga_slug?: NullableStringFieldUpdateOperationsInput | string | null
    relatedAnimeSlug?: NullableStringFieldUpdateOperationsInput | string | null
    relatedMangaSlug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BackgroundCreateInput = {
    url: string
    Manga?: MangaCreateNestedManyWithoutBackgroundInput
    Anime?: AnimeCreateNestedManyWithoutBackgroundInput
  }

  export type BackgroundUncheckedCreateInput = {
    id?: number
    url: string
    Manga?: MangaUncheckedCreateNestedManyWithoutBackgroundInput
    Anime?: AnimeUncheckedCreateNestedManyWithoutBackgroundInput
  }

  export type BackgroundUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    Manga?: MangaUpdateManyWithoutBackgroundNestedInput
    Anime?: AnimeUpdateManyWithoutBackgroundNestedInput
  }

  export type BackgroundUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    Manga?: MangaUncheckedUpdateManyWithoutBackgroundNestedInput
    Anime?: AnimeUncheckedUpdateManyWithoutBackgroundNestedInput
  }

  export type BackgroundCreateManyInput = {
    id?: number
    url: string
  }

  export type BackgroundUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type BackgroundUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeCreateInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: AnimeCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    cover: CoverCreateNestedOneWithoutAnimeInput
    ageRestriction: AgeRestrictionCreateNestedOneWithoutAnimeInput
    genres?: GenreCreateNestedManyWithoutAnimeInput
    background: BackgroundCreateNestedOneWithoutAnimeInput
    Episode?: EpisodeCreateNestedManyWithoutAnimeInput
    relatedFrom?: RelatedCreateNestedManyWithoutAnimeInput
    relatedTo?: RelatedCreateNestedManyWithoutRelatedAnimeInput
    Bookmark?: BookmarkCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: AnimeCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    coverId: number
    ageRestrictionId: number
    backgroundId: number
    genres?: GenreUncheckedCreateNestedManyWithoutAnimeInput
    Episode?: EpisodeUncheckedCreateNestedManyWithoutAnimeInput
    relatedFrom?: RelatedUncheckedCreateNestedManyWithoutAnimeInput
    relatedTo?: RelatedUncheckedCreateNestedManyWithoutRelatedAnimeInput
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    cover?: CoverUpdateOneRequiredWithoutAnimeNestedInput
    ageRestriction?: AgeRestrictionUpdateOneRequiredWithoutAnimeNestedInput
    genres?: GenreUpdateManyWithoutAnimeNestedInput
    background?: BackgroundUpdateOneRequiredWithoutAnimeNestedInput
    Episode?: EpisodeUpdateManyWithoutAnimeNestedInput
    relatedFrom?: RelatedUpdateManyWithoutAnimeNestedInput
    relatedTo?: RelatedUpdateManyWithoutRelatedAnimeNestedInput
    Bookmark?: BookmarkUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    coverId?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
    genres?: GenreUncheckedUpdateManyWithoutAnimeNestedInput
    Episode?: EpisodeUncheckedUpdateManyWithoutAnimeNestedInput
    relatedFrom?: RelatedUncheckedUpdateManyWithoutAnimeNestedInput
    relatedTo?: RelatedUncheckedUpdateManyWithoutRelatedAnimeNestedInput
    Bookmark?: BookmarkUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeCreateManyInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: AnimeCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    coverId: number
    ageRestrictionId: number
    backgroundId: number
  }

  export type AnimeUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
  }

  export type AnimeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    coverId?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
  }

  export type EpisodeCreateInput = {
    id: number
    name?: string | null
    number: string
    number_secondary: string
    item_number: number
    source?: string | null
    endingLength?: number | null
    anime: AnimeCreateNestedOneWithoutEpisodeInput
    Bookmark?: BookmarkCreateNestedManyWithoutLastWatchInput
  }

  export type EpisodeUncheckedCreateInput = {
    id: number
    name?: string | null
    number: string
    number_secondary: string
    slug_url: string
    item_number: number
    source?: string | null
    endingLength?: number | null
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutLastWatchInput
  }

  export type EpisodeUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    number?: StringFieldUpdateOperationsInput | string
    number_secondary?: StringFieldUpdateOperationsInput | string
    item_number?: IntFieldUpdateOperationsInput | number
    source?: NullableStringFieldUpdateOperationsInput | string | null
    endingLength?: NullableIntFieldUpdateOperationsInput | number | null
    anime?: AnimeUpdateOneRequiredWithoutEpisodeNestedInput
    Bookmark?: BookmarkUpdateManyWithoutLastWatchNestedInput
  }

  export type EpisodeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    number?: StringFieldUpdateOperationsInput | string
    number_secondary?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    item_number?: IntFieldUpdateOperationsInput | number
    source?: NullableStringFieldUpdateOperationsInput | string | null
    endingLength?: NullableIntFieldUpdateOperationsInput | number | null
    Bookmark?: BookmarkUncheckedUpdateManyWithoutLastWatchNestedInput
  }

  export type EpisodeCreateManyInput = {
    id: number
    name?: string | null
    number: string
    number_secondary: string
    slug_url: string
    item_number: number
    source?: string | null
    endingLength?: number | null
  }

  export type EpisodeUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    number?: StringFieldUpdateOperationsInput | string
    number_secondary?: StringFieldUpdateOperationsInput | string
    item_number?: IntFieldUpdateOperationsInput | number
    source?: NullableStringFieldUpdateOperationsInput | string | null
    endingLength?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EpisodeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    number?: StringFieldUpdateOperationsInput | string
    number_secondary?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    item_number?: IntFieldUpdateOperationsInput | number
    source?: NullableStringFieldUpdateOperationsInput | string | null
    endingLength?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MangaCreateInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    cover: CoverCreateNestedOneWithoutMangaInput
    ageRestriction: AgeRestrictionCreateNestedOneWithoutMangaInput
    items_count: ItemsCountCreateNestedOneWithoutMangaInput
    genres?: GenreCreateNestedManyWithoutMangaInput
    background: BackgroundCreateNestedOneWithoutMangaInput
    Chapter?: ChapterCreateNestedManyWithoutMangaInput
    relatedFrom?: RelatedCreateNestedManyWithoutMangaInput
    relatedTo?: RelatedCreateNestedManyWithoutRelatedMangaInput
    Bookmark?: BookmarkCreateNestedManyWithoutMangaInput
  }

  export type MangaUncheckedCreateInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    coverId: number
    ageRestrictionId: number
    itemsCountId: number
    backgroundId: number
    genres?: GenreUncheckedCreateNestedManyWithoutMangaInput
    Chapter?: ChapterUncheckedCreateNestedManyWithoutMangaInput
    relatedFrom?: RelatedUncheckedCreateNestedManyWithoutMangaInput
    relatedTo?: RelatedUncheckedCreateNestedManyWithoutRelatedMangaInput
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutMangaInput
  }

  export type MangaUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    cover?: CoverUpdateOneRequiredWithoutMangaNestedInput
    ageRestriction?: AgeRestrictionUpdateOneRequiredWithoutMangaNestedInput
    items_count?: ItemsCountUpdateOneRequiredWithoutMangaNestedInput
    genres?: GenreUpdateManyWithoutMangaNestedInput
    background?: BackgroundUpdateOneRequiredWithoutMangaNestedInput
    Chapter?: ChapterUpdateManyWithoutMangaNestedInput
    relatedFrom?: RelatedUpdateManyWithoutMangaNestedInput
    relatedTo?: RelatedUpdateManyWithoutRelatedMangaNestedInput
    Bookmark?: BookmarkUpdateManyWithoutMangaNestedInput
  }

  export type MangaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    coverId?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    itemsCountId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
    genres?: GenreUncheckedUpdateManyWithoutMangaNestedInput
    Chapter?: ChapterUncheckedUpdateManyWithoutMangaNestedInput
    relatedFrom?: RelatedUncheckedUpdateManyWithoutMangaNestedInput
    relatedTo?: RelatedUncheckedUpdateManyWithoutRelatedMangaNestedInput
    Bookmark?: BookmarkUncheckedUpdateManyWithoutMangaNestedInput
  }

  export type MangaCreateManyInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    coverId: number
    ageRestrictionId: number
    itemsCountId: number
    backgroundId: number
  }

  export type MangaUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MangaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    coverId?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    itemsCountId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
  }

  export type ItemsCountCreateInput = {
    uploaded: number
    Manga?: MangaCreateNestedManyWithoutItems_countInput
  }

  export type ItemsCountUncheckedCreateInput = {
    id?: number
    uploaded: number
    Manga?: MangaUncheckedCreateNestedManyWithoutItems_countInput
  }

  export type ItemsCountUpdateInput = {
    uploaded?: IntFieldUpdateOperationsInput | number
    Manga?: MangaUpdateManyWithoutItems_countNestedInput
  }

  export type ItemsCountUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    uploaded?: IntFieldUpdateOperationsInput | number
    Manga?: MangaUncheckedUpdateManyWithoutItems_countNestedInput
  }

  export type ItemsCountCreateManyInput = {
    id?: number
    uploaded: number
  }

  export type ItemsCountUpdateManyMutationInput = {
    uploaded?: IntFieldUpdateOperationsInput | number
  }

  export type ItemsCountUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    uploaded?: IntFieldUpdateOperationsInput | number
  }

  export type ChapterCreateInput = {
    id: number
    created_at?: Date | string
    likes_count?: number
    name?: string | null
    number?: string
    item_number: number
    number_secondary: string
    slug: string
    volume?: string
    count?: number
    pages?: MangaPageCreateNestedManyWithoutChapterInput
    manga: MangaCreateNestedOneWithoutChapterInput
    Bookmark?: BookmarkCreateNestedManyWithoutLastReadInput
  }

  export type ChapterUncheckedCreateInput = {
    id: number
    created_at?: Date | string
    likes_count?: number
    manga_id: number
    name?: string | null
    number?: string
    item_number: number
    number_secondary: string
    slug: string
    volume?: string
    count?: number
    pages?: MangaPageUncheckedCreateNestedManyWithoutChapterInput
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutLastReadInput
  }

  export type ChapterUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    likes_count?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    number?: StringFieldUpdateOperationsInput | string
    item_number?: IntFieldUpdateOperationsInput | number
    number_secondary?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    volume?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    pages?: MangaPageUpdateManyWithoutChapterNestedInput
    manga?: MangaUpdateOneRequiredWithoutChapterNestedInput
    Bookmark?: BookmarkUpdateManyWithoutLastReadNestedInput
  }

  export type ChapterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    likes_count?: IntFieldUpdateOperationsInput | number
    manga_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    number?: StringFieldUpdateOperationsInput | string
    item_number?: IntFieldUpdateOperationsInput | number
    number_secondary?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    volume?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    pages?: MangaPageUncheckedUpdateManyWithoutChapterNestedInput
    Bookmark?: BookmarkUncheckedUpdateManyWithoutLastReadNestedInput
  }

  export type ChapterCreateManyInput = {
    id: number
    created_at?: Date | string
    likes_count?: number
    manga_id: number
    name?: string | null
    number?: string
    item_number: number
    number_secondary: string
    slug: string
    volume?: string
    count?: number
  }

  export type ChapterUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    likes_count?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    number?: StringFieldUpdateOperationsInput | string
    item_number?: IntFieldUpdateOperationsInput | number
    number_secondary?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    volume?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
  }

  export type ChapterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    likes_count?: IntFieldUpdateOperationsInput | number
    manga_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    number?: StringFieldUpdateOperationsInput | string
    item_number?: IntFieldUpdateOperationsInput | number
    number_secondary?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    volume?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
  }

  export type MangaPageCreateInput = {
    created_at?: Date | string
    image: string
    url: string
    ratio: number
    Chapter: ChapterCreateNestedOneWithoutPagesInput
  }

  export type MangaPageUncheckedCreateInput = {
    id?: number
    created_at?: Date | string
    image: string
    url: string
    ratio: number
    chapterId: number
  }

  export type MangaPageUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    ratio?: FloatFieldUpdateOperationsInput | number
    Chapter?: ChapterUpdateOneRequiredWithoutPagesNestedInput
  }

  export type MangaPageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    ratio?: FloatFieldUpdateOperationsInput | number
    chapterId?: IntFieldUpdateOperationsInput | number
  }

  export type MangaPageCreateManyInput = {
    id?: number
    created_at?: Date | string
    image: string
    url: string
    ratio: number
    chapterId: number
  }

  export type MangaPageUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    ratio?: FloatFieldUpdateOperationsInput | number
  }

  export type MangaPageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    ratio?: FloatFieldUpdateOperationsInput | number
    chapterId?: IntFieldUpdateOperationsInput | number
  }

  export type BookmarkCreateInput = {
    mark: $Enums.BookmarkName
    type: $Enums.ModelName
    addedAt?: Date | string
    updatedAt?: Date | string
    lastRead?: ChapterCreateNestedOneWithoutBookmarkInput
    lastWatch?: EpisodeCreateNestedOneWithoutBookmarkInput
    anime?: AnimeCreateNestedOneWithoutBookmarkInput
    manga?: MangaCreateNestedOneWithoutBookmarkInput
    user: UserCreateNestedOneWithoutBookmarkInput
  }

  export type BookmarkUncheckedCreateInput = {
    id?: number
    userId: string
    mark: $Enums.BookmarkName
    type: $Enums.ModelName
    addedAt?: Date | string
    updatedAt?: Date | string
    mangaSlug_url?: string | null
    animeSlug_url?: string | null
    chapterId?: number | null
    episodeId?: number | null
  }

  export type BookmarkUpdateInput = {
    mark?: EnumBookmarkNameFieldUpdateOperationsInput | $Enums.BookmarkName
    type?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastRead?: ChapterUpdateOneWithoutBookmarkNestedInput
    lastWatch?: EpisodeUpdateOneWithoutBookmarkNestedInput
    anime?: AnimeUpdateOneWithoutBookmarkNestedInput
    manga?: MangaUpdateOneWithoutBookmarkNestedInput
    user?: UserUpdateOneRequiredWithoutBookmarkNestedInput
  }

  export type BookmarkUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    mark?: EnumBookmarkNameFieldUpdateOperationsInput | $Enums.BookmarkName
    type?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mangaSlug_url?: NullableStringFieldUpdateOperationsInput | string | null
    animeSlug_url?: NullableStringFieldUpdateOperationsInput | string | null
    chapterId?: NullableIntFieldUpdateOperationsInput | number | null
    episodeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BookmarkCreateManyInput = {
    id?: number
    userId: string
    mark: $Enums.BookmarkName
    type: $Enums.ModelName
    addedAt?: Date | string
    updatedAt?: Date | string
    mangaSlug_url?: string | null
    animeSlug_url?: string | null
    chapterId?: number | null
    episodeId?: number | null
  }

  export type BookmarkUpdateManyMutationInput = {
    mark?: EnumBookmarkNameFieldUpdateOperationsInput | $Enums.BookmarkName
    type?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    mark?: EnumBookmarkNameFieldUpdateOperationsInput | $Enums.BookmarkName
    type?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mangaSlug_url?: NullableStringFieldUpdateOperationsInput | string | null
    animeSlug_url?: NullableStringFieldUpdateOperationsInput | string | null
    chapterId?: NullableIntFieldUpdateOperationsInput | number | null
    episodeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: boolean | null
    image?: string | null
    isAnonymous?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    Bookmark?: BookmarkCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: boolean | null
    image?: string | null
    isAnonymous?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    isAnonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    Bookmark?: BookmarkUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    isAnonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Bookmark?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: boolean | null
    image?: string | null
    isAnonymous?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    isAnonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    isAnonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    userId: string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateManyInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    userId: string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type AccountCreateInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id: string
    accountId: string
    providerId: string
    userId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateManyInput = {
    id: string
    accountId: string
    providerId: string
    userId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationCreateInput = {
    id: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type VerificationUncheckedCreateInput = {
    id: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type VerificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VerificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VerificationCreateManyInput = {
    id: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type VerificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VerificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type MangaListRelationFilter = {
    every?: MangaWhereInput
    some?: MangaWhereInput
    none?: MangaWhereInput
  }

  export type AnimeListRelationFilter = {
    every?: AnimeWhereInput
    some?: AnimeWhereInput
    none?: AnimeWhereInput
  }

  export type MangaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnimeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CoverCountOrderByAggregateInput = {
    id?: SortOrder
    thumbnail?: SortOrder
    default?: SortOrder
  }

  export type CoverAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CoverMaxOrderByAggregateInput = {
    id?: SortOrder
    thumbnail?: SortOrder
    default?: SortOrder
  }

  export type CoverMinOrderByAggregateInput = {
    id?: SortOrder
    thumbnail?: SortOrder
    default?: SortOrder
  }

  export type CoverSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    has?: number | IntFieldRefInput<$PrismaModel> | null
    hasEvery?: number[] | ListIntFieldRefInput<$PrismaModel>
    hasSome?: number[] | ListIntFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type AgeRestrictionCountOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    site_ids?: SortOrder
  }

  export type AgeRestrictionAvgOrderByAggregateInput = {
    id?: SortOrder
    site_ids?: SortOrder
  }

  export type AgeRestrictionMaxOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
  }

  export type AgeRestrictionMinOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
  }

  export type AgeRestrictionSumOrderByAggregateInput = {
    id?: SortOrder
    site_ids?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type GenreCountOrderByAggregateInput = {
    id?: SortOrder
    adult?: SortOrder
    name?: SortOrder
    site_ids?: SortOrder
  }

  export type GenreAvgOrderByAggregateInput = {
    id?: SortOrder
    site_ids?: SortOrder
  }

  export type GenreMaxOrderByAggregateInput = {
    id?: SortOrder
    adult?: SortOrder
    name?: SortOrder
  }

  export type GenreMinOrderByAggregateInput = {
    id?: SortOrder
    adult?: SortOrder
    name?: SortOrder
  }

  export type GenreSumOrderByAggregateInput = {
    id?: SortOrder
    site_ids?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumRelatedReasonFilter<$PrismaModel = never> = {
    equals?: $Enums.RelatedReason | EnumRelatedReasonFieldRefInput<$PrismaModel>
    in?: $Enums.RelatedReason[] | ListEnumRelatedReasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.RelatedReason[] | ListEnumRelatedReasonFieldRefInput<$PrismaModel>
    not?: NestedEnumRelatedReasonFilter<$PrismaModel> | $Enums.RelatedReason
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type AnimeNullableScalarRelationFilter = {
    is?: AnimeWhereInput | null
    isNot?: AnimeWhereInput | null
  }

  export type MangaNullableScalarRelationFilter = {
    is?: MangaWhereInput | null
    isNot?: MangaWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RelatedManga_slugRelatedMangaSlugCompoundUniqueInput = {
    manga_slug: string
    relatedMangaSlug: string
  }

  export type RelatedAnime_slugRelatedAnimeSlugCompoundUniqueInput = {
    anime_slug: string
    relatedAnimeSlug: string
  }

  export type RelatedCountOrderByAggregateInput = {
    id?: SortOrder
    reason?: SortOrder
    anime_slug?: SortOrder
    manga_slug?: SortOrder
    relatedAnimeSlug?: SortOrder
    relatedMangaSlug?: SortOrder
  }

  export type RelatedAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RelatedMaxOrderByAggregateInput = {
    id?: SortOrder
    reason?: SortOrder
    anime_slug?: SortOrder
    manga_slug?: SortOrder
    relatedAnimeSlug?: SortOrder
    relatedMangaSlug?: SortOrder
  }

  export type RelatedMinOrderByAggregateInput = {
    id?: SortOrder
    reason?: SortOrder
    anime_slug?: SortOrder
    manga_slug?: SortOrder
    relatedAnimeSlug?: SortOrder
    relatedMangaSlug?: SortOrder
  }

  export type RelatedSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumRelatedReasonWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RelatedReason | EnumRelatedReasonFieldRefInput<$PrismaModel>
    in?: $Enums.RelatedReason[] | ListEnumRelatedReasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.RelatedReason[] | ListEnumRelatedReasonFieldRefInput<$PrismaModel>
    not?: NestedEnumRelatedReasonWithAggregatesFilter<$PrismaModel> | $Enums.RelatedReason
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRelatedReasonFilter<$PrismaModel>
    _max?: NestedEnumRelatedReasonFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BackgroundCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
  }

  export type BackgroundAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BackgroundMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
  }

  export type BackgroundMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
  }

  export type BackgroundSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumModelNameFilter<$PrismaModel = never> = {
    equals?: $Enums.ModelName | EnumModelNameFieldRefInput<$PrismaModel>
    in?: $Enums.ModelName[] | ListEnumModelNameFieldRefInput<$PrismaModel>
    notIn?: $Enums.ModelName[] | ListEnumModelNameFieldRefInput<$PrismaModel>
    not?: NestedEnumModelNameFilter<$PrismaModel> | $Enums.ModelName
  }

  export type CoverScalarRelationFilter = {
    is?: CoverWhereInput
    isNot?: CoverWhereInput
  }

  export type AgeRestrictionScalarRelationFilter = {
    is?: AgeRestrictionWhereInput
    isNot?: AgeRestrictionWhereInput
  }

  export type GenreListRelationFilter = {
    every?: GenreWhereInput
    some?: GenreWhereInput
    none?: GenreWhereInput
  }

  export type BackgroundScalarRelationFilter = {
    is?: BackgroundWhereInput
    isNot?: BackgroundWhereInput
  }

  export type EpisodeListRelationFilter = {
    every?: EpisodeWhereInput
    some?: EpisodeWhereInput
    none?: EpisodeWhereInput
  }

  export type RelatedListRelationFilter = {
    every?: RelatedWhereInput
    some?: RelatedWhereInput
    none?: RelatedWhereInput
  }

  export type BookmarkListRelationFilter = {
    every?: BookmarkWhereInput
    some?: BookmarkWhereInput
    none?: BookmarkWhereInput
  }

  export type GenreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EpisodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RelatedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookmarkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnimeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    eng_name?: SortOrder
    slug_url?: SortOrder
    otherNames?: SortOrder
    summary?: SortOrder
    model?: SortOrder
    site?: SortOrder
    coverId?: SortOrder
    ageRestrictionId?: SortOrder
    backgroundId?: SortOrder
  }

  export type AnimeAvgOrderByAggregateInput = {
    id?: SortOrder
    site?: SortOrder
    coverId?: SortOrder
    ageRestrictionId?: SortOrder
    backgroundId?: SortOrder
  }

  export type AnimeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    eng_name?: SortOrder
    slug_url?: SortOrder
    summary?: SortOrder
    model?: SortOrder
    site?: SortOrder
    coverId?: SortOrder
    ageRestrictionId?: SortOrder
    backgroundId?: SortOrder
  }

  export type AnimeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    eng_name?: SortOrder
    slug_url?: SortOrder
    summary?: SortOrder
    model?: SortOrder
    site?: SortOrder
    coverId?: SortOrder
    ageRestrictionId?: SortOrder
    backgroundId?: SortOrder
  }

  export type AnimeSumOrderByAggregateInput = {
    id?: SortOrder
    site?: SortOrder
    coverId?: SortOrder
    ageRestrictionId?: SortOrder
    backgroundId?: SortOrder
  }

  export type EnumModelNameWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ModelName | EnumModelNameFieldRefInput<$PrismaModel>
    in?: $Enums.ModelName[] | ListEnumModelNameFieldRefInput<$PrismaModel>
    notIn?: $Enums.ModelName[] | ListEnumModelNameFieldRefInput<$PrismaModel>
    not?: NestedEnumModelNameWithAggregatesFilter<$PrismaModel> | $Enums.ModelName
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumModelNameFilter<$PrismaModel>
    _max?: NestedEnumModelNameFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type AnimeScalarRelationFilter = {
    is?: AnimeWhereInput
    isNot?: AnimeWhereInput
  }

  export type EpisodeSlug_urlItem_numberCompoundUniqueInput = {
    slug_url: string
    item_number: number
  }

  export type EpisodeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    number?: SortOrder
    number_secondary?: SortOrder
    slug_url?: SortOrder
    item_number?: SortOrder
    source?: SortOrder
    endingLength?: SortOrder
  }

  export type EpisodeAvgOrderByAggregateInput = {
    id?: SortOrder
    item_number?: SortOrder
    endingLength?: SortOrder
  }

  export type EpisodeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    number?: SortOrder
    number_secondary?: SortOrder
    slug_url?: SortOrder
    item_number?: SortOrder
    source?: SortOrder
    endingLength?: SortOrder
  }

  export type EpisodeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    number?: SortOrder
    number_secondary?: SortOrder
    slug_url?: SortOrder
    item_number?: SortOrder
    source?: SortOrder
    endingLength?: SortOrder
  }

  export type EpisodeSumOrderByAggregateInput = {
    id?: SortOrder
    item_number?: SortOrder
    endingLength?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ItemsCountScalarRelationFilter = {
    is?: ItemsCountWhereInput
    isNot?: ItemsCountWhereInput
  }

  export type ChapterListRelationFilter = {
    every?: ChapterWhereInput
    some?: ChapterWhereInput
    none?: ChapterWhereInput
  }

  export type ChapterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MangaCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    eng_name?: SortOrder
    slug_url?: SortOrder
    otherNames?: SortOrder
    summary?: SortOrder
    model?: SortOrder
    site?: SortOrder
    isLicensed?: SortOrder
    coverId?: SortOrder
    ageRestrictionId?: SortOrder
    itemsCountId?: SortOrder
    backgroundId?: SortOrder
  }

  export type MangaAvgOrderByAggregateInput = {
    id?: SortOrder
    site?: SortOrder
    coverId?: SortOrder
    ageRestrictionId?: SortOrder
    itemsCountId?: SortOrder
    backgroundId?: SortOrder
  }

  export type MangaMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    eng_name?: SortOrder
    slug_url?: SortOrder
    summary?: SortOrder
    model?: SortOrder
    site?: SortOrder
    isLicensed?: SortOrder
    coverId?: SortOrder
    ageRestrictionId?: SortOrder
    itemsCountId?: SortOrder
    backgroundId?: SortOrder
  }

  export type MangaMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    eng_name?: SortOrder
    slug_url?: SortOrder
    summary?: SortOrder
    model?: SortOrder
    site?: SortOrder
    isLicensed?: SortOrder
    coverId?: SortOrder
    ageRestrictionId?: SortOrder
    itemsCountId?: SortOrder
    backgroundId?: SortOrder
  }

  export type MangaSumOrderByAggregateInput = {
    id?: SortOrder
    site?: SortOrder
    coverId?: SortOrder
    ageRestrictionId?: SortOrder
    itemsCountId?: SortOrder
    backgroundId?: SortOrder
  }

  export type ItemsCountCountOrderByAggregateInput = {
    id?: SortOrder
    uploaded?: SortOrder
  }

  export type ItemsCountAvgOrderByAggregateInput = {
    id?: SortOrder
    uploaded?: SortOrder
  }

  export type ItemsCountMaxOrderByAggregateInput = {
    id?: SortOrder
    uploaded?: SortOrder
  }

  export type ItemsCountMinOrderByAggregateInput = {
    id?: SortOrder
    uploaded?: SortOrder
  }

  export type ItemsCountSumOrderByAggregateInput = {
    id?: SortOrder
    uploaded?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MangaPageListRelationFilter = {
    every?: MangaPageWhereInput
    some?: MangaPageWhereInput
    none?: MangaPageWhereInput
  }

  export type MangaScalarRelationFilter = {
    is?: MangaWhereInput
    isNot?: MangaWhereInput
  }

  export type MangaPageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChapterCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    likes_count?: SortOrder
    manga_id?: SortOrder
    name?: SortOrder
    number?: SortOrder
    item_number?: SortOrder
    number_secondary?: SortOrder
    slug?: SortOrder
    volume?: SortOrder
    count?: SortOrder
  }

  export type ChapterAvgOrderByAggregateInput = {
    id?: SortOrder
    likes_count?: SortOrder
    manga_id?: SortOrder
    item_number?: SortOrder
    count?: SortOrder
  }

  export type ChapterMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    likes_count?: SortOrder
    manga_id?: SortOrder
    name?: SortOrder
    number?: SortOrder
    item_number?: SortOrder
    number_secondary?: SortOrder
    slug?: SortOrder
    volume?: SortOrder
    count?: SortOrder
  }

  export type ChapterMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    likes_count?: SortOrder
    manga_id?: SortOrder
    name?: SortOrder
    number?: SortOrder
    item_number?: SortOrder
    number_secondary?: SortOrder
    slug?: SortOrder
    volume?: SortOrder
    count?: SortOrder
  }

  export type ChapterSumOrderByAggregateInput = {
    id?: SortOrder
    likes_count?: SortOrder
    manga_id?: SortOrder
    item_number?: SortOrder
    count?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ChapterScalarRelationFilter = {
    is?: ChapterWhereInput
    isNot?: ChapterWhereInput
  }

  export type MangaPageImageChapterIdCompoundUniqueInput = {
    image: string
    chapterId: number
  }

  export type MangaPageCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    image?: SortOrder
    url?: SortOrder
    ratio?: SortOrder
    chapterId?: SortOrder
  }

  export type MangaPageAvgOrderByAggregateInput = {
    id?: SortOrder
    ratio?: SortOrder
    chapterId?: SortOrder
  }

  export type MangaPageMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    image?: SortOrder
    url?: SortOrder
    ratio?: SortOrder
    chapterId?: SortOrder
  }

  export type MangaPageMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    image?: SortOrder
    url?: SortOrder
    ratio?: SortOrder
    chapterId?: SortOrder
  }

  export type MangaPageSumOrderByAggregateInput = {
    id?: SortOrder
    ratio?: SortOrder
    chapterId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumBookmarkNameFilter<$PrismaModel = never> = {
    equals?: $Enums.BookmarkName | EnumBookmarkNameFieldRefInput<$PrismaModel>
    in?: $Enums.BookmarkName[] | ListEnumBookmarkNameFieldRefInput<$PrismaModel>
    notIn?: $Enums.BookmarkName[] | ListEnumBookmarkNameFieldRefInput<$PrismaModel>
    not?: NestedEnumBookmarkNameFilter<$PrismaModel> | $Enums.BookmarkName
  }

  export type ChapterNullableScalarRelationFilter = {
    is?: ChapterWhereInput | null
    isNot?: ChapterWhereInput | null
  }

  export type EpisodeNullableScalarRelationFilter = {
    is?: EpisodeWhereInput | null
    isNot?: EpisodeWhereInput | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type BookmarkMangaSlug_urlUserIdCompoundUniqueInput = {
    mangaSlug_url: string
    userId: string
  }

  export type BookmarkAnimeSlug_urlUserIdCompoundUniqueInput = {
    animeSlug_url: string
    userId: string
  }

  export type BookmarkCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    mark?: SortOrder
    type?: SortOrder
    addedAt?: SortOrder
    updatedAt?: SortOrder
    mangaSlug_url?: SortOrder
    animeSlug_url?: SortOrder
    chapterId?: SortOrder
    episodeId?: SortOrder
  }

  export type BookmarkAvgOrderByAggregateInput = {
    id?: SortOrder
    chapterId?: SortOrder
    episodeId?: SortOrder
  }

  export type BookmarkMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    mark?: SortOrder
    type?: SortOrder
    addedAt?: SortOrder
    updatedAt?: SortOrder
    mangaSlug_url?: SortOrder
    animeSlug_url?: SortOrder
    chapterId?: SortOrder
    episodeId?: SortOrder
  }

  export type BookmarkMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    mark?: SortOrder
    type?: SortOrder
    addedAt?: SortOrder
    updatedAt?: SortOrder
    mangaSlug_url?: SortOrder
    animeSlug_url?: SortOrder
    chapterId?: SortOrder
    episodeId?: SortOrder
  }

  export type BookmarkSumOrderByAggregateInput = {
    id?: SortOrder
    chapterId?: SortOrder
    episodeId?: SortOrder
  }

  export type EnumBookmarkNameWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BookmarkName | EnumBookmarkNameFieldRefInput<$PrismaModel>
    in?: $Enums.BookmarkName[] | ListEnumBookmarkNameFieldRefInput<$PrismaModel>
    notIn?: $Enums.BookmarkName[] | ListEnumBookmarkNameFieldRefInput<$PrismaModel>
    not?: NestedEnumBookmarkNameWithAggregatesFilter<$PrismaModel> | $Enums.BookmarkName
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBookmarkNameFilter<$PrismaModel>
    _max?: NestedEnumBookmarkNameFilter<$PrismaModel>
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    isAnonymous?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    isAnonymous?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    isAnonymous?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type VerificationCountOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationMaxOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationMinOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MangaCreateNestedManyWithoutCoverInput = {
    create?: XOR<MangaCreateWithoutCoverInput, MangaUncheckedCreateWithoutCoverInput> | MangaCreateWithoutCoverInput[] | MangaUncheckedCreateWithoutCoverInput[]
    connectOrCreate?: MangaCreateOrConnectWithoutCoverInput | MangaCreateOrConnectWithoutCoverInput[]
    createMany?: MangaCreateManyCoverInputEnvelope
    connect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
  }

  export type AnimeCreateNestedManyWithoutCoverInput = {
    create?: XOR<AnimeCreateWithoutCoverInput, AnimeUncheckedCreateWithoutCoverInput> | AnimeCreateWithoutCoverInput[] | AnimeUncheckedCreateWithoutCoverInput[]
    connectOrCreate?: AnimeCreateOrConnectWithoutCoverInput | AnimeCreateOrConnectWithoutCoverInput[]
    createMany?: AnimeCreateManyCoverInputEnvelope
    connect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
  }

  export type MangaUncheckedCreateNestedManyWithoutCoverInput = {
    create?: XOR<MangaCreateWithoutCoverInput, MangaUncheckedCreateWithoutCoverInput> | MangaCreateWithoutCoverInput[] | MangaUncheckedCreateWithoutCoverInput[]
    connectOrCreate?: MangaCreateOrConnectWithoutCoverInput | MangaCreateOrConnectWithoutCoverInput[]
    createMany?: MangaCreateManyCoverInputEnvelope
    connect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
  }

  export type AnimeUncheckedCreateNestedManyWithoutCoverInput = {
    create?: XOR<AnimeCreateWithoutCoverInput, AnimeUncheckedCreateWithoutCoverInput> | AnimeCreateWithoutCoverInput[] | AnimeUncheckedCreateWithoutCoverInput[]
    connectOrCreate?: AnimeCreateOrConnectWithoutCoverInput | AnimeCreateOrConnectWithoutCoverInput[]
    createMany?: AnimeCreateManyCoverInputEnvelope
    connect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type MangaUpdateManyWithoutCoverNestedInput = {
    create?: XOR<MangaCreateWithoutCoverInput, MangaUncheckedCreateWithoutCoverInput> | MangaCreateWithoutCoverInput[] | MangaUncheckedCreateWithoutCoverInput[]
    connectOrCreate?: MangaCreateOrConnectWithoutCoverInput | MangaCreateOrConnectWithoutCoverInput[]
    upsert?: MangaUpsertWithWhereUniqueWithoutCoverInput | MangaUpsertWithWhereUniqueWithoutCoverInput[]
    createMany?: MangaCreateManyCoverInputEnvelope
    set?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    disconnect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    delete?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    connect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    update?: MangaUpdateWithWhereUniqueWithoutCoverInput | MangaUpdateWithWhereUniqueWithoutCoverInput[]
    updateMany?: MangaUpdateManyWithWhereWithoutCoverInput | MangaUpdateManyWithWhereWithoutCoverInput[]
    deleteMany?: MangaScalarWhereInput | MangaScalarWhereInput[]
  }

  export type AnimeUpdateManyWithoutCoverNestedInput = {
    create?: XOR<AnimeCreateWithoutCoverInput, AnimeUncheckedCreateWithoutCoverInput> | AnimeCreateWithoutCoverInput[] | AnimeUncheckedCreateWithoutCoverInput[]
    connectOrCreate?: AnimeCreateOrConnectWithoutCoverInput | AnimeCreateOrConnectWithoutCoverInput[]
    upsert?: AnimeUpsertWithWhereUniqueWithoutCoverInput | AnimeUpsertWithWhereUniqueWithoutCoverInput[]
    createMany?: AnimeCreateManyCoverInputEnvelope
    set?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    disconnect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    delete?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    connect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    update?: AnimeUpdateWithWhereUniqueWithoutCoverInput | AnimeUpdateWithWhereUniqueWithoutCoverInput[]
    updateMany?: AnimeUpdateManyWithWhereWithoutCoverInput | AnimeUpdateManyWithWhereWithoutCoverInput[]
    deleteMany?: AnimeScalarWhereInput | AnimeScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MangaUncheckedUpdateManyWithoutCoverNestedInput = {
    create?: XOR<MangaCreateWithoutCoverInput, MangaUncheckedCreateWithoutCoverInput> | MangaCreateWithoutCoverInput[] | MangaUncheckedCreateWithoutCoverInput[]
    connectOrCreate?: MangaCreateOrConnectWithoutCoverInput | MangaCreateOrConnectWithoutCoverInput[]
    upsert?: MangaUpsertWithWhereUniqueWithoutCoverInput | MangaUpsertWithWhereUniqueWithoutCoverInput[]
    createMany?: MangaCreateManyCoverInputEnvelope
    set?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    disconnect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    delete?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    connect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    update?: MangaUpdateWithWhereUniqueWithoutCoverInput | MangaUpdateWithWhereUniqueWithoutCoverInput[]
    updateMany?: MangaUpdateManyWithWhereWithoutCoverInput | MangaUpdateManyWithWhereWithoutCoverInput[]
    deleteMany?: MangaScalarWhereInput | MangaScalarWhereInput[]
  }

  export type AnimeUncheckedUpdateManyWithoutCoverNestedInput = {
    create?: XOR<AnimeCreateWithoutCoverInput, AnimeUncheckedCreateWithoutCoverInput> | AnimeCreateWithoutCoverInput[] | AnimeUncheckedCreateWithoutCoverInput[]
    connectOrCreate?: AnimeCreateOrConnectWithoutCoverInput | AnimeCreateOrConnectWithoutCoverInput[]
    upsert?: AnimeUpsertWithWhereUniqueWithoutCoverInput | AnimeUpsertWithWhereUniqueWithoutCoverInput[]
    createMany?: AnimeCreateManyCoverInputEnvelope
    set?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    disconnect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    delete?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    connect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    update?: AnimeUpdateWithWhereUniqueWithoutCoverInput | AnimeUpdateWithWhereUniqueWithoutCoverInput[]
    updateMany?: AnimeUpdateManyWithWhereWithoutCoverInput | AnimeUpdateManyWithWhereWithoutCoverInput[]
    deleteMany?: AnimeScalarWhereInput | AnimeScalarWhereInput[]
  }

  export type AgeRestrictionCreatesite_idsInput = {
    set: number[]
  }

  export type MangaCreateNestedManyWithoutAgeRestrictionInput = {
    create?: XOR<MangaCreateWithoutAgeRestrictionInput, MangaUncheckedCreateWithoutAgeRestrictionInput> | MangaCreateWithoutAgeRestrictionInput[] | MangaUncheckedCreateWithoutAgeRestrictionInput[]
    connectOrCreate?: MangaCreateOrConnectWithoutAgeRestrictionInput | MangaCreateOrConnectWithoutAgeRestrictionInput[]
    createMany?: MangaCreateManyAgeRestrictionInputEnvelope
    connect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
  }

  export type AnimeCreateNestedManyWithoutAgeRestrictionInput = {
    create?: XOR<AnimeCreateWithoutAgeRestrictionInput, AnimeUncheckedCreateWithoutAgeRestrictionInput> | AnimeCreateWithoutAgeRestrictionInput[] | AnimeUncheckedCreateWithoutAgeRestrictionInput[]
    connectOrCreate?: AnimeCreateOrConnectWithoutAgeRestrictionInput | AnimeCreateOrConnectWithoutAgeRestrictionInput[]
    createMany?: AnimeCreateManyAgeRestrictionInputEnvelope
    connect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
  }

  export type MangaUncheckedCreateNestedManyWithoutAgeRestrictionInput = {
    create?: XOR<MangaCreateWithoutAgeRestrictionInput, MangaUncheckedCreateWithoutAgeRestrictionInput> | MangaCreateWithoutAgeRestrictionInput[] | MangaUncheckedCreateWithoutAgeRestrictionInput[]
    connectOrCreate?: MangaCreateOrConnectWithoutAgeRestrictionInput | MangaCreateOrConnectWithoutAgeRestrictionInput[]
    createMany?: MangaCreateManyAgeRestrictionInputEnvelope
    connect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
  }

  export type AnimeUncheckedCreateNestedManyWithoutAgeRestrictionInput = {
    create?: XOR<AnimeCreateWithoutAgeRestrictionInput, AnimeUncheckedCreateWithoutAgeRestrictionInput> | AnimeCreateWithoutAgeRestrictionInput[] | AnimeUncheckedCreateWithoutAgeRestrictionInput[]
    connectOrCreate?: AnimeCreateOrConnectWithoutAgeRestrictionInput | AnimeCreateOrConnectWithoutAgeRestrictionInput[]
    createMany?: AnimeCreateManyAgeRestrictionInputEnvelope
    connect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
  }

  export type AgeRestrictionUpdatesite_idsInput = {
    set?: number[]
    push?: number | number[]
  }

  export type MangaUpdateManyWithoutAgeRestrictionNestedInput = {
    create?: XOR<MangaCreateWithoutAgeRestrictionInput, MangaUncheckedCreateWithoutAgeRestrictionInput> | MangaCreateWithoutAgeRestrictionInput[] | MangaUncheckedCreateWithoutAgeRestrictionInput[]
    connectOrCreate?: MangaCreateOrConnectWithoutAgeRestrictionInput | MangaCreateOrConnectWithoutAgeRestrictionInput[]
    upsert?: MangaUpsertWithWhereUniqueWithoutAgeRestrictionInput | MangaUpsertWithWhereUniqueWithoutAgeRestrictionInput[]
    createMany?: MangaCreateManyAgeRestrictionInputEnvelope
    set?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    disconnect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    delete?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    connect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    update?: MangaUpdateWithWhereUniqueWithoutAgeRestrictionInput | MangaUpdateWithWhereUniqueWithoutAgeRestrictionInput[]
    updateMany?: MangaUpdateManyWithWhereWithoutAgeRestrictionInput | MangaUpdateManyWithWhereWithoutAgeRestrictionInput[]
    deleteMany?: MangaScalarWhereInput | MangaScalarWhereInput[]
  }

  export type AnimeUpdateManyWithoutAgeRestrictionNestedInput = {
    create?: XOR<AnimeCreateWithoutAgeRestrictionInput, AnimeUncheckedCreateWithoutAgeRestrictionInput> | AnimeCreateWithoutAgeRestrictionInput[] | AnimeUncheckedCreateWithoutAgeRestrictionInput[]
    connectOrCreate?: AnimeCreateOrConnectWithoutAgeRestrictionInput | AnimeCreateOrConnectWithoutAgeRestrictionInput[]
    upsert?: AnimeUpsertWithWhereUniqueWithoutAgeRestrictionInput | AnimeUpsertWithWhereUniqueWithoutAgeRestrictionInput[]
    createMany?: AnimeCreateManyAgeRestrictionInputEnvelope
    set?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    disconnect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    delete?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    connect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    update?: AnimeUpdateWithWhereUniqueWithoutAgeRestrictionInput | AnimeUpdateWithWhereUniqueWithoutAgeRestrictionInput[]
    updateMany?: AnimeUpdateManyWithWhereWithoutAgeRestrictionInput | AnimeUpdateManyWithWhereWithoutAgeRestrictionInput[]
    deleteMany?: AnimeScalarWhereInput | AnimeScalarWhereInput[]
  }

  export type MangaUncheckedUpdateManyWithoutAgeRestrictionNestedInput = {
    create?: XOR<MangaCreateWithoutAgeRestrictionInput, MangaUncheckedCreateWithoutAgeRestrictionInput> | MangaCreateWithoutAgeRestrictionInput[] | MangaUncheckedCreateWithoutAgeRestrictionInput[]
    connectOrCreate?: MangaCreateOrConnectWithoutAgeRestrictionInput | MangaCreateOrConnectWithoutAgeRestrictionInput[]
    upsert?: MangaUpsertWithWhereUniqueWithoutAgeRestrictionInput | MangaUpsertWithWhereUniqueWithoutAgeRestrictionInput[]
    createMany?: MangaCreateManyAgeRestrictionInputEnvelope
    set?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    disconnect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    delete?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    connect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    update?: MangaUpdateWithWhereUniqueWithoutAgeRestrictionInput | MangaUpdateWithWhereUniqueWithoutAgeRestrictionInput[]
    updateMany?: MangaUpdateManyWithWhereWithoutAgeRestrictionInput | MangaUpdateManyWithWhereWithoutAgeRestrictionInput[]
    deleteMany?: MangaScalarWhereInput | MangaScalarWhereInput[]
  }

  export type AnimeUncheckedUpdateManyWithoutAgeRestrictionNestedInput = {
    create?: XOR<AnimeCreateWithoutAgeRestrictionInput, AnimeUncheckedCreateWithoutAgeRestrictionInput> | AnimeCreateWithoutAgeRestrictionInput[] | AnimeUncheckedCreateWithoutAgeRestrictionInput[]
    connectOrCreate?: AnimeCreateOrConnectWithoutAgeRestrictionInput | AnimeCreateOrConnectWithoutAgeRestrictionInput[]
    upsert?: AnimeUpsertWithWhereUniqueWithoutAgeRestrictionInput | AnimeUpsertWithWhereUniqueWithoutAgeRestrictionInput[]
    createMany?: AnimeCreateManyAgeRestrictionInputEnvelope
    set?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    disconnect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    delete?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    connect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    update?: AnimeUpdateWithWhereUniqueWithoutAgeRestrictionInput | AnimeUpdateWithWhereUniqueWithoutAgeRestrictionInput[]
    updateMany?: AnimeUpdateManyWithWhereWithoutAgeRestrictionInput | AnimeUpdateManyWithWhereWithoutAgeRestrictionInput[]
    deleteMany?: AnimeScalarWhereInput | AnimeScalarWhereInput[]
  }

  export type GenreCreatesite_idsInput = {
    set: number[]
  }

  export type MangaCreateNestedManyWithoutGenresInput = {
    create?: XOR<MangaCreateWithoutGenresInput, MangaUncheckedCreateWithoutGenresInput> | MangaCreateWithoutGenresInput[] | MangaUncheckedCreateWithoutGenresInput[]
    connectOrCreate?: MangaCreateOrConnectWithoutGenresInput | MangaCreateOrConnectWithoutGenresInput[]
    connect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
  }

  export type AnimeCreateNestedManyWithoutGenresInput = {
    create?: XOR<AnimeCreateWithoutGenresInput, AnimeUncheckedCreateWithoutGenresInput> | AnimeCreateWithoutGenresInput[] | AnimeUncheckedCreateWithoutGenresInput[]
    connectOrCreate?: AnimeCreateOrConnectWithoutGenresInput | AnimeCreateOrConnectWithoutGenresInput[]
    connect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
  }

  export type MangaUncheckedCreateNestedManyWithoutGenresInput = {
    create?: XOR<MangaCreateWithoutGenresInput, MangaUncheckedCreateWithoutGenresInput> | MangaCreateWithoutGenresInput[] | MangaUncheckedCreateWithoutGenresInput[]
    connectOrCreate?: MangaCreateOrConnectWithoutGenresInput | MangaCreateOrConnectWithoutGenresInput[]
    connect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
  }

  export type AnimeUncheckedCreateNestedManyWithoutGenresInput = {
    create?: XOR<AnimeCreateWithoutGenresInput, AnimeUncheckedCreateWithoutGenresInput> | AnimeCreateWithoutGenresInput[] | AnimeUncheckedCreateWithoutGenresInput[]
    connectOrCreate?: AnimeCreateOrConnectWithoutGenresInput | AnimeCreateOrConnectWithoutGenresInput[]
    connect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type GenreUpdatesite_idsInput = {
    set?: number[]
    push?: number | number[]
  }

  export type MangaUpdateManyWithoutGenresNestedInput = {
    create?: XOR<MangaCreateWithoutGenresInput, MangaUncheckedCreateWithoutGenresInput> | MangaCreateWithoutGenresInput[] | MangaUncheckedCreateWithoutGenresInput[]
    connectOrCreate?: MangaCreateOrConnectWithoutGenresInput | MangaCreateOrConnectWithoutGenresInput[]
    upsert?: MangaUpsertWithWhereUniqueWithoutGenresInput | MangaUpsertWithWhereUniqueWithoutGenresInput[]
    set?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    disconnect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    delete?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    connect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    update?: MangaUpdateWithWhereUniqueWithoutGenresInput | MangaUpdateWithWhereUniqueWithoutGenresInput[]
    updateMany?: MangaUpdateManyWithWhereWithoutGenresInput | MangaUpdateManyWithWhereWithoutGenresInput[]
    deleteMany?: MangaScalarWhereInput | MangaScalarWhereInput[]
  }

  export type AnimeUpdateManyWithoutGenresNestedInput = {
    create?: XOR<AnimeCreateWithoutGenresInput, AnimeUncheckedCreateWithoutGenresInput> | AnimeCreateWithoutGenresInput[] | AnimeUncheckedCreateWithoutGenresInput[]
    connectOrCreate?: AnimeCreateOrConnectWithoutGenresInput | AnimeCreateOrConnectWithoutGenresInput[]
    upsert?: AnimeUpsertWithWhereUniqueWithoutGenresInput | AnimeUpsertWithWhereUniqueWithoutGenresInput[]
    set?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    disconnect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    delete?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    connect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    update?: AnimeUpdateWithWhereUniqueWithoutGenresInput | AnimeUpdateWithWhereUniqueWithoutGenresInput[]
    updateMany?: AnimeUpdateManyWithWhereWithoutGenresInput | AnimeUpdateManyWithWhereWithoutGenresInput[]
    deleteMany?: AnimeScalarWhereInput | AnimeScalarWhereInput[]
  }

  export type MangaUncheckedUpdateManyWithoutGenresNestedInput = {
    create?: XOR<MangaCreateWithoutGenresInput, MangaUncheckedCreateWithoutGenresInput> | MangaCreateWithoutGenresInput[] | MangaUncheckedCreateWithoutGenresInput[]
    connectOrCreate?: MangaCreateOrConnectWithoutGenresInput | MangaCreateOrConnectWithoutGenresInput[]
    upsert?: MangaUpsertWithWhereUniqueWithoutGenresInput | MangaUpsertWithWhereUniqueWithoutGenresInput[]
    set?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    disconnect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    delete?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    connect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    update?: MangaUpdateWithWhereUniqueWithoutGenresInput | MangaUpdateWithWhereUniqueWithoutGenresInput[]
    updateMany?: MangaUpdateManyWithWhereWithoutGenresInput | MangaUpdateManyWithWhereWithoutGenresInput[]
    deleteMany?: MangaScalarWhereInput | MangaScalarWhereInput[]
  }

  export type AnimeUncheckedUpdateManyWithoutGenresNestedInput = {
    create?: XOR<AnimeCreateWithoutGenresInput, AnimeUncheckedCreateWithoutGenresInput> | AnimeCreateWithoutGenresInput[] | AnimeUncheckedCreateWithoutGenresInput[]
    connectOrCreate?: AnimeCreateOrConnectWithoutGenresInput | AnimeCreateOrConnectWithoutGenresInput[]
    upsert?: AnimeUpsertWithWhereUniqueWithoutGenresInput | AnimeUpsertWithWhereUniqueWithoutGenresInput[]
    set?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    disconnect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    delete?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    connect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    update?: AnimeUpdateWithWhereUniqueWithoutGenresInput | AnimeUpdateWithWhereUniqueWithoutGenresInput[]
    updateMany?: AnimeUpdateManyWithWhereWithoutGenresInput | AnimeUpdateManyWithWhereWithoutGenresInput[]
    deleteMany?: AnimeScalarWhereInput | AnimeScalarWhereInput[]
  }

  export type AnimeCreateNestedOneWithoutRelatedFromInput = {
    create?: XOR<AnimeCreateWithoutRelatedFromInput, AnimeUncheckedCreateWithoutRelatedFromInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutRelatedFromInput
    connect?: AnimeWhereUniqueInput
  }

  export type MangaCreateNestedOneWithoutRelatedFromInput = {
    create?: XOR<MangaCreateWithoutRelatedFromInput, MangaUncheckedCreateWithoutRelatedFromInput>
    connectOrCreate?: MangaCreateOrConnectWithoutRelatedFromInput
    connect?: MangaWhereUniqueInput
  }

  export type AnimeCreateNestedOneWithoutRelatedToInput = {
    create?: XOR<AnimeCreateWithoutRelatedToInput, AnimeUncheckedCreateWithoutRelatedToInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutRelatedToInput
    connect?: AnimeWhereUniqueInput
  }

  export type MangaCreateNestedOneWithoutRelatedToInput = {
    create?: XOR<MangaCreateWithoutRelatedToInput, MangaUncheckedCreateWithoutRelatedToInput>
    connectOrCreate?: MangaCreateOrConnectWithoutRelatedToInput
    connect?: MangaWhereUniqueInput
  }

  export type EnumRelatedReasonFieldUpdateOperationsInput = {
    set?: $Enums.RelatedReason
  }

  export type AnimeUpdateOneWithoutRelatedFromNestedInput = {
    create?: XOR<AnimeCreateWithoutRelatedFromInput, AnimeUncheckedCreateWithoutRelatedFromInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutRelatedFromInput
    upsert?: AnimeUpsertWithoutRelatedFromInput
    disconnect?: AnimeWhereInput | boolean
    delete?: AnimeWhereInput | boolean
    connect?: AnimeWhereUniqueInput
    update?: XOR<XOR<AnimeUpdateToOneWithWhereWithoutRelatedFromInput, AnimeUpdateWithoutRelatedFromInput>, AnimeUncheckedUpdateWithoutRelatedFromInput>
  }

  export type MangaUpdateOneWithoutRelatedFromNestedInput = {
    create?: XOR<MangaCreateWithoutRelatedFromInput, MangaUncheckedCreateWithoutRelatedFromInput>
    connectOrCreate?: MangaCreateOrConnectWithoutRelatedFromInput
    upsert?: MangaUpsertWithoutRelatedFromInput
    disconnect?: MangaWhereInput | boolean
    delete?: MangaWhereInput | boolean
    connect?: MangaWhereUniqueInput
    update?: XOR<XOR<MangaUpdateToOneWithWhereWithoutRelatedFromInput, MangaUpdateWithoutRelatedFromInput>, MangaUncheckedUpdateWithoutRelatedFromInput>
  }

  export type AnimeUpdateOneWithoutRelatedToNestedInput = {
    create?: XOR<AnimeCreateWithoutRelatedToInput, AnimeUncheckedCreateWithoutRelatedToInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutRelatedToInput
    upsert?: AnimeUpsertWithoutRelatedToInput
    disconnect?: AnimeWhereInput | boolean
    delete?: AnimeWhereInput | boolean
    connect?: AnimeWhereUniqueInput
    update?: XOR<XOR<AnimeUpdateToOneWithWhereWithoutRelatedToInput, AnimeUpdateWithoutRelatedToInput>, AnimeUncheckedUpdateWithoutRelatedToInput>
  }

  export type MangaUpdateOneWithoutRelatedToNestedInput = {
    create?: XOR<MangaCreateWithoutRelatedToInput, MangaUncheckedCreateWithoutRelatedToInput>
    connectOrCreate?: MangaCreateOrConnectWithoutRelatedToInput
    upsert?: MangaUpsertWithoutRelatedToInput
    disconnect?: MangaWhereInput | boolean
    delete?: MangaWhereInput | boolean
    connect?: MangaWhereUniqueInput
    update?: XOR<XOR<MangaUpdateToOneWithWhereWithoutRelatedToInput, MangaUpdateWithoutRelatedToInput>, MangaUncheckedUpdateWithoutRelatedToInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type MangaCreateNestedManyWithoutBackgroundInput = {
    create?: XOR<MangaCreateWithoutBackgroundInput, MangaUncheckedCreateWithoutBackgroundInput> | MangaCreateWithoutBackgroundInput[] | MangaUncheckedCreateWithoutBackgroundInput[]
    connectOrCreate?: MangaCreateOrConnectWithoutBackgroundInput | MangaCreateOrConnectWithoutBackgroundInput[]
    createMany?: MangaCreateManyBackgroundInputEnvelope
    connect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
  }

  export type AnimeCreateNestedManyWithoutBackgroundInput = {
    create?: XOR<AnimeCreateWithoutBackgroundInput, AnimeUncheckedCreateWithoutBackgroundInput> | AnimeCreateWithoutBackgroundInput[] | AnimeUncheckedCreateWithoutBackgroundInput[]
    connectOrCreate?: AnimeCreateOrConnectWithoutBackgroundInput | AnimeCreateOrConnectWithoutBackgroundInput[]
    createMany?: AnimeCreateManyBackgroundInputEnvelope
    connect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
  }

  export type MangaUncheckedCreateNestedManyWithoutBackgroundInput = {
    create?: XOR<MangaCreateWithoutBackgroundInput, MangaUncheckedCreateWithoutBackgroundInput> | MangaCreateWithoutBackgroundInput[] | MangaUncheckedCreateWithoutBackgroundInput[]
    connectOrCreate?: MangaCreateOrConnectWithoutBackgroundInput | MangaCreateOrConnectWithoutBackgroundInput[]
    createMany?: MangaCreateManyBackgroundInputEnvelope
    connect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
  }

  export type AnimeUncheckedCreateNestedManyWithoutBackgroundInput = {
    create?: XOR<AnimeCreateWithoutBackgroundInput, AnimeUncheckedCreateWithoutBackgroundInput> | AnimeCreateWithoutBackgroundInput[] | AnimeUncheckedCreateWithoutBackgroundInput[]
    connectOrCreate?: AnimeCreateOrConnectWithoutBackgroundInput | AnimeCreateOrConnectWithoutBackgroundInput[]
    createMany?: AnimeCreateManyBackgroundInputEnvelope
    connect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
  }

  export type MangaUpdateManyWithoutBackgroundNestedInput = {
    create?: XOR<MangaCreateWithoutBackgroundInput, MangaUncheckedCreateWithoutBackgroundInput> | MangaCreateWithoutBackgroundInput[] | MangaUncheckedCreateWithoutBackgroundInput[]
    connectOrCreate?: MangaCreateOrConnectWithoutBackgroundInput | MangaCreateOrConnectWithoutBackgroundInput[]
    upsert?: MangaUpsertWithWhereUniqueWithoutBackgroundInput | MangaUpsertWithWhereUniqueWithoutBackgroundInput[]
    createMany?: MangaCreateManyBackgroundInputEnvelope
    set?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    disconnect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    delete?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    connect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    update?: MangaUpdateWithWhereUniqueWithoutBackgroundInput | MangaUpdateWithWhereUniqueWithoutBackgroundInput[]
    updateMany?: MangaUpdateManyWithWhereWithoutBackgroundInput | MangaUpdateManyWithWhereWithoutBackgroundInput[]
    deleteMany?: MangaScalarWhereInput | MangaScalarWhereInput[]
  }

  export type AnimeUpdateManyWithoutBackgroundNestedInput = {
    create?: XOR<AnimeCreateWithoutBackgroundInput, AnimeUncheckedCreateWithoutBackgroundInput> | AnimeCreateWithoutBackgroundInput[] | AnimeUncheckedCreateWithoutBackgroundInput[]
    connectOrCreate?: AnimeCreateOrConnectWithoutBackgroundInput | AnimeCreateOrConnectWithoutBackgroundInput[]
    upsert?: AnimeUpsertWithWhereUniqueWithoutBackgroundInput | AnimeUpsertWithWhereUniqueWithoutBackgroundInput[]
    createMany?: AnimeCreateManyBackgroundInputEnvelope
    set?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    disconnect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    delete?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    connect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    update?: AnimeUpdateWithWhereUniqueWithoutBackgroundInput | AnimeUpdateWithWhereUniqueWithoutBackgroundInput[]
    updateMany?: AnimeUpdateManyWithWhereWithoutBackgroundInput | AnimeUpdateManyWithWhereWithoutBackgroundInput[]
    deleteMany?: AnimeScalarWhereInput | AnimeScalarWhereInput[]
  }

  export type MangaUncheckedUpdateManyWithoutBackgroundNestedInput = {
    create?: XOR<MangaCreateWithoutBackgroundInput, MangaUncheckedCreateWithoutBackgroundInput> | MangaCreateWithoutBackgroundInput[] | MangaUncheckedCreateWithoutBackgroundInput[]
    connectOrCreate?: MangaCreateOrConnectWithoutBackgroundInput | MangaCreateOrConnectWithoutBackgroundInput[]
    upsert?: MangaUpsertWithWhereUniqueWithoutBackgroundInput | MangaUpsertWithWhereUniqueWithoutBackgroundInput[]
    createMany?: MangaCreateManyBackgroundInputEnvelope
    set?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    disconnect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    delete?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    connect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    update?: MangaUpdateWithWhereUniqueWithoutBackgroundInput | MangaUpdateWithWhereUniqueWithoutBackgroundInput[]
    updateMany?: MangaUpdateManyWithWhereWithoutBackgroundInput | MangaUpdateManyWithWhereWithoutBackgroundInput[]
    deleteMany?: MangaScalarWhereInput | MangaScalarWhereInput[]
  }

  export type AnimeUncheckedUpdateManyWithoutBackgroundNestedInput = {
    create?: XOR<AnimeCreateWithoutBackgroundInput, AnimeUncheckedCreateWithoutBackgroundInput> | AnimeCreateWithoutBackgroundInput[] | AnimeUncheckedCreateWithoutBackgroundInput[]
    connectOrCreate?: AnimeCreateOrConnectWithoutBackgroundInput | AnimeCreateOrConnectWithoutBackgroundInput[]
    upsert?: AnimeUpsertWithWhereUniqueWithoutBackgroundInput | AnimeUpsertWithWhereUniqueWithoutBackgroundInput[]
    createMany?: AnimeCreateManyBackgroundInputEnvelope
    set?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    disconnect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    delete?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    connect?: AnimeWhereUniqueInput | AnimeWhereUniqueInput[]
    update?: AnimeUpdateWithWhereUniqueWithoutBackgroundInput | AnimeUpdateWithWhereUniqueWithoutBackgroundInput[]
    updateMany?: AnimeUpdateManyWithWhereWithoutBackgroundInput | AnimeUpdateManyWithWhereWithoutBackgroundInput[]
    deleteMany?: AnimeScalarWhereInput | AnimeScalarWhereInput[]
  }

  export type AnimeCreateotherNamesInput = {
    set: string[]
  }

  export type CoverCreateNestedOneWithoutAnimeInput = {
    create?: XOR<CoverCreateWithoutAnimeInput, CoverUncheckedCreateWithoutAnimeInput>
    connectOrCreate?: CoverCreateOrConnectWithoutAnimeInput
    connect?: CoverWhereUniqueInput
  }

  export type AgeRestrictionCreateNestedOneWithoutAnimeInput = {
    create?: XOR<AgeRestrictionCreateWithoutAnimeInput, AgeRestrictionUncheckedCreateWithoutAnimeInput>
    connectOrCreate?: AgeRestrictionCreateOrConnectWithoutAnimeInput
    connect?: AgeRestrictionWhereUniqueInput
  }

  export type GenreCreateNestedManyWithoutAnimeInput = {
    create?: XOR<GenreCreateWithoutAnimeInput, GenreUncheckedCreateWithoutAnimeInput> | GenreCreateWithoutAnimeInput[] | GenreUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: GenreCreateOrConnectWithoutAnimeInput | GenreCreateOrConnectWithoutAnimeInput[]
    connect?: GenreWhereUniqueInput | GenreWhereUniqueInput[]
  }

  export type BackgroundCreateNestedOneWithoutAnimeInput = {
    create?: XOR<BackgroundCreateWithoutAnimeInput, BackgroundUncheckedCreateWithoutAnimeInput>
    connectOrCreate?: BackgroundCreateOrConnectWithoutAnimeInput
    connect?: BackgroundWhereUniqueInput
  }

  export type EpisodeCreateNestedManyWithoutAnimeInput = {
    create?: XOR<EpisodeCreateWithoutAnimeInput, EpisodeUncheckedCreateWithoutAnimeInput> | EpisodeCreateWithoutAnimeInput[] | EpisodeUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: EpisodeCreateOrConnectWithoutAnimeInput | EpisodeCreateOrConnectWithoutAnimeInput[]
    createMany?: EpisodeCreateManyAnimeInputEnvelope
    connect?: EpisodeWhereUniqueInput | EpisodeWhereUniqueInput[]
  }

  export type RelatedCreateNestedManyWithoutAnimeInput = {
    create?: XOR<RelatedCreateWithoutAnimeInput, RelatedUncheckedCreateWithoutAnimeInput> | RelatedCreateWithoutAnimeInput[] | RelatedUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: RelatedCreateOrConnectWithoutAnimeInput | RelatedCreateOrConnectWithoutAnimeInput[]
    createMany?: RelatedCreateManyAnimeInputEnvelope
    connect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
  }

  export type RelatedCreateNestedManyWithoutRelatedAnimeInput = {
    create?: XOR<RelatedCreateWithoutRelatedAnimeInput, RelatedUncheckedCreateWithoutRelatedAnimeInput> | RelatedCreateWithoutRelatedAnimeInput[] | RelatedUncheckedCreateWithoutRelatedAnimeInput[]
    connectOrCreate?: RelatedCreateOrConnectWithoutRelatedAnimeInput | RelatedCreateOrConnectWithoutRelatedAnimeInput[]
    createMany?: RelatedCreateManyRelatedAnimeInputEnvelope
    connect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
  }

  export type BookmarkCreateNestedManyWithoutAnimeInput = {
    create?: XOR<BookmarkCreateWithoutAnimeInput, BookmarkUncheckedCreateWithoutAnimeInput> | BookmarkCreateWithoutAnimeInput[] | BookmarkUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutAnimeInput | BookmarkCreateOrConnectWithoutAnimeInput[]
    createMany?: BookmarkCreateManyAnimeInputEnvelope
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
  }

  export type GenreUncheckedCreateNestedManyWithoutAnimeInput = {
    create?: XOR<GenreCreateWithoutAnimeInput, GenreUncheckedCreateWithoutAnimeInput> | GenreCreateWithoutAnimeInput[] | GenreUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: GenreCreateOrConnectWithoutAnimeInput | GenreCreateOrConnectWithoutAnimeInput[]
    connect?: GenreWhereUniqueInput | GenreWhereUniqueInput[]
  }

  export type EpisodeUncheckedCreateNestedManyWithoutAnimeInput = {
    create?: XOR<EpisodeCreateWithoutAnimeInput, EpisodeUncheckedCreateWithoutAnimeInput> | EpisodeCreateWithoutAnimeInput[] | EpisodeUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: EpisodeCreateOrConnectWithoutAnimeInput | EpisodeCreateOrConnectWithoutAnimeInput[]
    createMany?: EpisodeCreateManyAnimeInputEnvelope
    connect?: EpisodeWhereUniqueInput | EpisodeWhereUniqueInput[]
  }

  export type RelatedUncheckedCreateNestedManyWithoutAnimeInput = {
    create?: XOR<RelatedCreateWithoutAnimeInput, RelatedUncheckedCreateWithoutAnimeInput> | RelatedCreateWithoutAnimeInput[] | RelatedUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: RelatedCreateOrConnectWithoutAnimeInput | RelatedCreateOrConnectWithoutAnimeInput[]
    createMany?: RelatedCreateManyAnimeInputEnvelope
    connect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
  }

  export type RelatedUncheckedCreateNestedManyWithoutRelatedAnimeInput = {
    create?: XOR<RelatedCreateWithoutRelatedAnimeInput, RelatedUncheckedCreateWithoutRelatedAnimeInput> | RelatedCreateWithoutRelatedAnimeInput[] | RelatedUncheckedCreateWithoutRelatedAnimeInput[]
    connectOrCreate?: RelatedCreateOrConnectWithoutRelatedAnimeInput | RelatedCreateOrConnectWithoutRelatedAnimeInput[]
    createMany?: RelatedCreateManyRelatedAnimeInputEnvelope
    connect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
  }

  export type BookmarkUncheckedCreateNestedManyWithoutAnimeInput = {
    create?: XOR<BookmarkCreateWithoutAnimeInput, BookmarkUncheckedCreateWithoutAnimeInput> | BookmarkCreateWithoutAnimeInput[] | BookmarkUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutAnimeInput | BookmarkCreateOrConnectWithoutAnimeInput[]
    createMany?: BookmarkCreateManyAnimeInputEnvelope
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
  }

  export type AnimeUpdateotherNamesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumModelNameFieldUpdateOperationsInput = {
    set?: $Enums.ModelName
  }

  export type CoverUpdateOneRequiredWithoutAnimeNestedInput = {
    create?: XOR<CoverCreateWithoutAnimeInput, CoverUncheckedCreateWithoutAnimeInput>
    connectOrCreate?: CoverCreateOrConnectWithoutAnimeInput
    upsert?: CoverUpsertWithoutAnimeInput
    connect?: CoverWhereUniqueInput
    update?: XOR<XOR<CoverUpdateToOneWithWhereWithoutAnimeInput, CoverUpdateWithoutAnimeInput>, CoverUncheckedUpdateWithoutAnimeInput>
  }

  export type AgeRestrictionUpdateOneRequiredWithoutAnimeNestedInput = {
    create?: XOR<AgeRestrictionCreateWithoutAnimeInput, AgeRestrictionUncheckedCreateWithoutAnimeInput>
    connectOrCreate?: AgeRestrictionCreateOrConnectWithoutAnimeInput
    upsert?: AgeRestrictionUpsertWithoutAnimeInput
    connect?: AgeRestrictionWhereUniqueInput
    update?: XOR<XOR<AgeRestrictionUpdateToOneWithWhereWithoutAnimeInput, AgeRestrictionUpdateWithoutAnimeInput>, AgeRestrictionUncheckedUpdateWithoutAnimeInput>
  }

  export type GenreUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<GenreCreateWithoutAnimeInput, GenreUncheckedCreateWithoutAnimeInput> | GenreCreateWithoutAnimeInput[] | GenreUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: GenreCreateOrConnectWithoutAnimeInput | GenreCreateOrConnectWithoutAnimeInput[]
    upsert?: GenreUpsertWithWhereUniqueWithoutAnimeInput | GenreUpsertWithWhereUniqueWithoutAnimeInput[]
    set?: GenreWhereUniqueInput | GenreWhereUniqueInput[]
    disconnect?: GenreWhereUniqueInput | GenreWhereUniqueInput[]
    delete?: GenreWhereUniqueInput | GenreWhereUniqueInput[]
    connect?: GenreWhereUniqueInput | GenreWhereUniqueInput[]
    update?: GenreUpdateWithWhereUniqueWithoutAnimeInput | GenreUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: GenreUpdateManyWithWhereWithoutAnimeInput | GenreUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: GenreScalarWhereInput | GenreScalarWhereInput[]
  }

  export type BackgroundUpdateOneRequiredWithoutAnimeNestedInput = {
    create?: XOR<BackgroundCreateWithoutAnimeInput, BackgroundUncheckedCreateWithoutAnimeInput>
    connectOrCreate?: BackgroundCreateOrConnectWithoutAnimeInput
    upsert?: BackgroundUpsertWithoutAnimeInput
    connect?: BackgroundWhereUniqueInput
    update?: XOR<XOR<BackgroundUpdateToOneWithWhereWithoutAnimeInput, BackgroundUpdateWithoutAnimeInput>, BackgroundUncheckedUpdateWithoutAnimeInput>
  }

  export type EpisodeUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<EpisodeCreateWithoutAnimeInput, EpisodeUncheckedCreateWithoutAnimeInput> | EpisodeCreateWithoutAnimeInput[] | EpisodeUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: EpisodeCreateOrConnectWithoutAnimeInput | EpisodeCreateOrConnectWithoutAnimeInput[]
    upsert?: EpisodeUpsertWithWhereUniqueWithoutAnimeInput | EpisodeUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: EpisodeCreateManyAnimeInputEnvelope
    set?: EpisodeWhereUniqueInput | EpisodeWhereUniqueInput[]
    disconnect?: EpisodeWhereUniqueInput | EpisodeWhereUniqueInput[]
    delete?: EpisodeWhereUniqueInput | EpisodeWhereUniqueInput[]
    connect?: EpisodeWhereUniqueInput | EpisodeWhereUniqueInput[]
    update?: EpisodeUpdateWithWhereUniqueWithoutAnimeInput | EpisodeUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: EpisodeUpdateManyWithWhereWithoutAnimeInput | EpisodeUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: EpisodeScalarWhereInput | EpisodeScalarWhereInput[]
  }

  export type RelatedUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<RelatedCreateWithoutAnimeInput, RelatedUncheckedCreateWithoutAnimeInput> | RelatedCreateWithoutAnimeInput[] | RelatedUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: RelatedCreateOrConnectWithoutAnimeInput | RelatedCreateOrConnectWithoutAnimeInput[]
    upsert?: RelatedUpsertWithWhereUniqueWithoutAnimeInput | RelatedUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: RelatedCreateManyAnimeInputEnvelope
    set?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    disconnect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    delete?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    connect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    update?: RelatedUpdateWithWhereUniqueWithoutAnimeInput | RelatedUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: RelatedUpdateManyWithWhereWithoutAnimeInput | RelatedUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: RelatedScalarWhereInput | RelatedScalarWhereInput[]
  }

  export type RelatedUpdateManyWithoutRelatedAnimeNestedInput = {
    create?: XOR<RelatedCreateWithoutRelatedAnimeInput, RelatedUncheckedCreateWithoutRelatedAnimeInput> | RelatedCreateWithoutRelatedAnimeInput[] | RelatedUncheckedCreateWithoutRelatedAnimeInput[]
    connectOrCreate?: RelatedCreateOrConnectWithoutRelatedAnimeInput | RelatedCreateOrConnectWithoutRelatedAnimeInput[]
    upsert?: RelatedUpsertWithWhereUniqueWithoutRelatedAnimeInput | RelatedUpsertWithWhereUniqueWithoutRelatedAnimeInput[]
    createMany?: RelatedCreateManyRelatedAnimeInputEnvelope
    set?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    disconnect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    delete?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    connect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    update?: RelatedUpdateWithWhereUniqueWithoutRelatedAnimeInput | RelatedUpdateWithWhereUniqueWithoutRelatedAnimeInput[]
    updateMany?: RelatedUpdateManyWithWhereWithoutRelatedAnimeInput | RelatedUpdateManyWithWhereWithoutRelatedAnimeInput[]
    deleteMany?: RelatedScalarWhereInput | RelatedScalarWhereInput[]
  }

  export type BookmarkUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<BookmarkCreateWithoutAnimeInput, BookmarkUncheckedCreateWithoutAnimeInput> | BookmarkCreateWithoutAnimeInput[] | BookmarkUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutAnimeInput | BookmarkCreateOrConnectWithoutAnimeInput[]
    upsert?: BookmarkUpsertWithWhereUniqueWithoutAnimeInput | BookmarkUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: BookmarkCreateManyAnimeInputEnvelope
    set?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    disconnect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    delete?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    update?: BookmarkUpdateWithWhereUniqueWithoutAnimeInput | BookmarkUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: BookmarkUpdateManyWithWhereWithoutAnimeInput | BookmarkUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
  }

  export type GenreUncheckedUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<GenreCreateWithoutAnimeInput, GenreUncheckedCreateWithoutAnimeInput> | GenreCreateWithoutAnimeInput[] | GenreUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: GenreCreateOrConnectWithoutAnimeInput | GenreCreateOrConnectWithoutAnimeInput[]
    upsert?: GenreUpsertWithWhereUniqueWithoutAnimeInput | GenreUpsertWithWhereUniqueWithoutAnimeInput[]
    set?: GenreWhereUniqueInput | GenreWhereUniqueInput[]
    disconnect?: GenreWhereUniqueInput | GenreWhereUniqueInput[]
    delete?: GenreWhereUniqueInput | GenreWhereUniqueInput[]
    connect?: GenreWhereUniqueInput | GenreWhereUniqueInput[]
    update?: GenreUpdateWithWhereUniqueWithoutAnimeInput | GenreUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: GenreUpdateManyWithWhereWithoutAnimeInput | GenreUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: GenreScalarWhereInput | GenreScalarWhereInput[]
  }

  export type EpisodeUncheckedUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<EpisodeCreateWithoutAnimeInput, EpisodeUncheckedCreateWithoutAnimeInput> | EpisodeCreateWithoutAnimeInput[] | EpisodeUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: EpisodeCreateOrConnectWithoutAnimeInput | EpisodeCreateOrConnectWithoutAnimeInput[]
    upsert?: EpisodeUpsertWithWhereUniqueWithoutAnimeInput | EpisodeUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: EpisodeCreateManyAnimeInputEnvelope
    set?: EpisodeWhereUniqueInput | EpisodeWhereUniqueInput[]
    disconnect?: EpisodeWhereUniqueInput | EpisodeWhereUniqueInput[]
    delete?: EpisodeWhereUniqueInput | EpisodeWhereUniqueInput[]
    connect?: EpisodeWhereUniqueInput | EpisodeWhereUniqueInput[]
    update?: EpisodeUpdateWithWhereUniqueWithoutAnimeInput | EpisodeUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: EpisodeUpdateManyWithWhereWithoutAnimeInput | EpisodeUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: EpisodeScalarWhereInput | EpisodeScalarWhereInput[]
  }

  export type RelatedUncheckedUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<RelatedCreateWithoutAnimeInput, RelatedUncheckedCreateWithoutAnimeInput> | RelatedCreateWithoutAnimeInput[] | RelatedUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: RelatedCreateOrConnectWithoutAnimeInput | RelatedCreateOrConnectWithoutAnimeInput[]
    upsert?: RelatedUpsertWithWhereUniqueWithoutAnimeInput | RelatedUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: RelatedCreateManyAnimeInputEnvelope
    set?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    disconnect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    delete?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    connect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    update?: RelatedUpdateWithWhereUniqueWithoutAnimeInput | RelatedUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: RelatedUpdateManyWithWhereWithoutAnimeInput | RelatedUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: RelatedScalarWhereInput | RelatedScalarWhereInput[]
  }

  export type RelatedUncheckedUpdateManyWithoutRelatedAnimeNestedInput = {
    create?: XOR<RelatedCreateWithoutRelatedAnimeInput, RelatedUncheckedCreateWithoutRelatedAnimeInput> | RelatedCreateWithoutRelatedAnimeInput[] | RelatedUncheckedCreateWithoutRelatedAnimeInput[]
    connectOrCreate?: RelatedCreateOrConnectWithoutRelatedAnimeInput | RelatedCreateOrConnectWithoutRelatedAnimeInput[]
    upsert?: RelatedUpsertWithWhereUniqueWithoutRelatedAnimeInput | RelatedUpsertWithWhereUniqueWithoutRelatedAnimeInput[]
    createMany?: RelatedCreateManyRelatedAnimeInputEnvelope
    set?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    disconnect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    delete?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    connect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    update?: RelatedUpdateWithWhereUniqueWithoutRelatedAnimeInput | RelatedUpdateWithWhereUniqueWithoutRelatedAnimeInput[]
    updateMany?: RelatedUpdateManyWithWhereWithoutRelatedAnimeInput | RelatedUpdateManyWithWhereWithoutRelatedAnimeInput[]
    deleteMany?: RelatedScalarWhereInput | RelatedScalarWhereInput[]
  }

  export type BookmarkUncheckedUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<BookmarkCreateWithoutAnimeInput, BookmarkUncheckedCreateWithoutAnimeInput> | BookmarkCreateWithoutAnimeInput[] | BookmarkUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutAnimeInput | BookmarkCreateOrConnectWithoutAnimeInput[]
    upsert?: BookmarkUpsertWithWhereUniqueWithoutAnimeInput | BookmarkUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: BookmarkCreateManyAnimeInputEnvelope
    set?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    disconnect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    delete?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    update?: BookmarkUpdateWithWhereUniqueWithoutAnimeInput | BookmarkUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: BookmarkUpdateManyWithWhereWithoutAnimeInput | BookmarkUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
  }

  export type AnimeCreateNestedOneWithoutEpisodeInput = {
    create?: XOR<AnimeCreateWithoutEpisodeInput, AnimeUncheckedCreateWithoutEpisodeInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutEpisodeInput
    connect?: AnimeWhereUniqueInput
  }

  export type BookmarkCreateNestedManyWithoutLastWatchInput = {
    create?: XOR<BookmarkCreateWithoutLastWatchInput, BookmarkUncheckedCreateWithoutLastWatchInput> | BookmarkCreateWithoutLastWatchInput[] | BookmarkUncheckedCreateWithoutLastWatchInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutLastWatchInput | BookmarkCreateOrConnectWithoutLastWatchInput[]
    createMany?: BookmarkCreateManyLastWatchInputEnvelope
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
  }

  export type BookmarkUncheckedCreateNestedManyWithoutLastWatchInput = {
    create?: XOR<BookmarkCreateWithoutLastWatchInput, BookmarkUncheckedCreateWithoutLastWatchInput> | BookmarkCreateWithoutLastWatchInput[] | BookmarkUncheckedCreateWithoutLastWatchInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutLastWatchInput | BookmarkCreateOrConnectWithoutLastWatchInput[]
    createMany?: BookmarkCreateManyLastWatchInputEnvelope
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AnimeUpdateOneRequiredWithoutEpisodeNestedInput = {
    create?: XOR<AnimeCreateWithoutEpisodeInput, AnimeUncheckedCreateWithoutEpisodeInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutEpisodeInput
    upsert?: AnimeUpsertWithoutEpisodeInput
    connect?: AnimeWhereUniqueInput
    update?: XOR<XOR<AnimeUpdateToOneWithWhereWithoutEpisodeInput, AnimeUpdateWithoutEpisodeInput>, AnimeUncheckedUpdateWithoutEpisodeInput>
  }

  export type BookmarkUpdateManyWithoutLastWatchNestedInput = {
    create?: XOR<BookmarkCreateWithoutLastWatchInput, BookmarkUncheckedCreateWithoutLastWatchInput> | BookmarkCreateWithoutLastWatchInput[] | BookmarkUncheckedCreateWithoutLastWatchInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutLastWatchInput | BookmarkCreateOrConnectWithoutLastWatchInput[]
    upsert?: BookmarkUpsertWithWhereUniqueWithoutLastWatchInput | BookmarkUpsertWithWhereUniqueWithoutLastWatchInput[]
    createMany?: BookmarkCreateManyLastWatchInputEnvelope
    set?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    disconnect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    delete?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    update?: BookmarkUpdateWithWhereUniqueWithoutLastWatchInput | BookmarkUpdateWithWhereUniqueWithoutLastWatchInput[]
    updateMany?: BookmarkUpdateManyWithWhereWithoutLastWatchInput | BookmarkUpdateManyWithWhereWithoutLastWatchInput[]
    deleteMany?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
  }

  export type BookmarkUncheckedUpdateManyWithoutLastWatchNestedInput = {
    create?: XOR<BookmarkCreateWithoutLastWatchInput, BookmarkUncheckedCreateWithoutLastWatchInput> | BookmarkCreateWithoutLastWatchInput[] | BookmarkUncheckedCreateWithoutLastWatchInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutLastWatchInput | BookmarkCreateOrConnectWithoutLastWatchInput[]
    upsert?: BookmarkUpsertWithWhereUniqueWithoutLastWatchInput | BookmarkUpsertWithWhereUniqueWithoutLastWatchInput[]
    createMany?: BookmarkCreateManyLastWatchInputEnvelope
    set?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    disconnect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    delete?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    update?: BookmarkUpdateWithWhereUniqueWithoutLastWatchInput | BookmarkUpdateWithWhereUniqueWithoutLastWatchInput[]
    updateMany?: BookmarkUpdateManyWithWhereWithoutLastWatchInput | BookmarkUpdateManyWithWhereWithoutLastWatchInput[]
    deleteMany?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
  }

  export type MangaCreateotherNamesInput = {
    set: string[]
  }

  export type CoverCreateNestedOneWithoutMangaInput = {
    create?: XOR<CoverCreateWithoutMangaInput, CoverUncheckedCreateWithoutMangaInput>
    connectOrCreate?: CoverCreateOrConnectWithoutMangaInput
    connect?: CoverWhereUniqueInput
  }

  export type AgeRestrictionCreateNestedOneWithoutMangaInput = {
    create?: XOR<AgeRestrictionCreateWithoutMangaInput, AgeRestrictionUncheckedCreateWithoutMangaInput>
    connectOrCreate?: AgeRestrictionCreateOrConnectWithoutMangaInput
    connect?: AgeRestrictionWhereUniqueInput
  }

  export type ItemsCountCreateNestedOneWithoutMangaInput = {
    create?: XOR<ItemsCountCreateWithoutMangaInput, ItemsCountUncheckedCreateWithoutMangaInput>
    connectOrCreate?: ItemsCountCreateOrConnectWithoutMangaInput
    connect?: ItemsCountWhereUniqueInput
  }

  export type GenreCreateNestedManyWithoutMangaInput = {
    create?: XOR<GenreCreateWithoutMangaInput, GenreUncheckedCreateWithoutMangaInput> | GenreCreateWithoutMangaInput[] | GenreUncheckedCreateWithoutMangaInput[]
    connectOrCreate?: GenreCreateOrConnectWithoutMangaInput | GenreCreateOrConnectWithoutMangaInput[]
    connect?: GenreWhereUniqueInput | GenreWhereUniqueInput[]
  }

  export type BackgroundCreateNestedOneWithoutMangaInput = {
    create?: XOR<BackgroundCreateWithoutMangaInput, BackgroundUncheckedCreateWithoutMangaInput>
    connectOrCreate?: BackgroundCreateOrConnectWithoutMangaInput
    connect?: BackgroundWhereUniqueInput
  }

  export type ChapterCreateNestedManyWithoutMangaInput = {
    create?: XOR<ChapterCreateWithoutMangaInput, ChapterUncheckedCreateWithoutMangaInput> | ChapterCreateWithoutMangaInput[] | ChapterUncheckedCreateWithoutMangaInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutMangaInput | ChapterCreateOrConnectWithoutMangaInput[]
    createMany?: ChapterCreateManyMangaInputEnvelope
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
  }

  export type RelatedCreateNestedManyWithoutMangaInput = {
    create?: XOR<RelatedCreateWithoutMangaInput, RelatedUncheckedCreateWithoutMangaInput> | RelatedCreateWithoutMangaInput[] | RelatedUncheckedCreateWithoutMangaInput[]
    connectOrCreate?: RelatedCreateOrConnectWithoutMangaInput | RelatedCreateOrConnectWithoutMangaInput[]
    createMany?: RelatedCreateManyMangaInputEnvelope
    connect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
  }

  export type RelatedCreateNestedManyWithoutRelatedMangaInput = {
    create?: XOR<RelatedCreateWithoutRelatedMangaInput, RelatedUncheckedCreateWithoutRelatedMangaInput> | RelatedCreateWithoutRelatedMangaInput[] | RelatedUncheckedCreateWithoutRelatedMangaInput[]
    connectOrCreate?: RelatedCreateOrConnectWithoutRelatedMangaInput | RelatedCreateOrConnectWithoutRelatedMangaInput[]
    createMany?: RelatedCreateManyRelatedMangaInputEnvelope
    connect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
  }

  export type BookmarkCreateNestedManyWithoutMangaInput = {
    create?: XOR<BookmarkCreateWithoutMangaInput, BookmarkUncheckedCreateWithoutMangaInput> | BookmarkCreateWithoutMangaInput[] | BookmarkUncheckedCreateWithoutMangaInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutMangaInput | BookmarkCreateOrConnectWithoutMangaInput[]
    createMany?: BookmarkCreateManyMangaInputEnvelope
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
  }

  export type GenreUncheckedCreateNestedManyWithoutMangaInput = {
    create?: XOR<GenreCreateWithoutMangaInput, GenreUncheckedCreateWithoutMangaInput> | GenreCreateWithoutMangaInput[] | GenreUncheckedCreateWithoutMangaInput[]
    connectOrCreate?: GenreCreateOrConnectWithoutMangaInput | GenreCreateOrConnectWithoutMangaInput[]
    connect?: GenreWhereUniqueInput | GenreWhereUniqueInput[]
  }

  export type ChapterUncheckedCreateNestedManyWithoutMangaInput = {
    create?: XOR<ChapterCreateWithoutMangaInput, ChapterUncheckedCreateWithoutMangaInput> | ChapterCreateWithoutMangaInput[] | ChapterUncheckedCreateWithoutMangaInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutMangaInput | ChapterCreateOrConnectWithoutMangaInput[]
    createMany?: ChapterCreateManyMangaInputEnvelope
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
  }

  export type RelatedUncheckedCreateNestedManyWithoutMangaInput = {
    create?: XOR<RelatedCreateWithoutMangaInput, RelatedUncheckedCreateWithoutMangaInput> | RelatedCreateWithoutMangaInput[] | RelatedUncheckedCreateWithoutMangaInput[]
    connectOrCreate?: RelatedCreateOrConnectWithoutMangaInput | RelatedCreateOrConnectWithoutMangaInput[]
    createMany?: RelatedCreateManyMangaInputEnvelope
    connect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
  }

  export type RelatedUncheckedCreateNestedManyWithoutRelatedMangaInput = {
    create?: XOR<RelatedCreateWithoutRelatedMangaInput, RelatedUncheckedCreateWithoutRelatedMangaInput> | RelatedCreateWithoutRelatedMangaInput[] | RelatedUncheckedCreateWithoutRelatedMangaInput[]
    connectOrCreate?: RelatedCreateOrConnectWithoutRelatedMangaInput | RelatedCreateOrConnectWithoutRelatedMangaInput[]
    createMany?: RelatedCreateManyRelatedMangaInputEnvelope
    connect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
  }

  export type BookmarkUncheckedCreateNestedManyWithoutMangaInput = {
    create?: XOR<BookmarkCreateWithoutMangaInput, BookmarkUncheckedCreateWithoutMangaInput> | BookmarkCreateWithoutMangaInput[] | BookmarkUncheckedCreateWithoutMangaInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutMangaInput | BookmarkCreateOrConnectWithoutMangaInput[]
    createMany?: BookmarkCreateManyMangaInputEnvelope
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
  }

  export type MangaUpdateotherNamesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CoverUpdateOneRequiredWithoutMangaNestedInput = {
    create?: XOR<CoverCreateWithoutMangaInput, CoverUncheckedCreateWithoutMangaInput>
    connectOrCreate?: CoverCreateOrConnectWithoutMangaInput
    upsert?: CoverUpsertWithoutMangaInput
    connect?: CoverWhereUniqueInput
    update?: XOR<XOR<CoverUpdateToOneWithWhereWithoutMangaInput, CoverUpdateWithoutMangaInput>, CoverUncheckedUpdateWithoutMangaInput>
  }

  export type AgeRestrictionUpdateOneRequiredWithoutMangaNestedInput = {
    create?: XOR<AgeRestrictionCreateWithoutMangaInput, AgeRestrictionUncheckedCreateWithoutMangaInput>
    connectOrCreate?: AgeRestrictionCreateOrConnectWithoutMangaInput
    upsert?: AgeRestrictionUpsertWithoutMangaInput
    connect?: AgeRestrictionWhereUniqueInput
    update?: XOR<XOR<AgeRestrictionUpdateToOneWithWhereWithoutMangaInput, AgeRestrictionUpdateWithoutMangaInput>, AgeRestrictionUncheckedUpdateWithoutMangaInput>
  }

  export type ItemsCountUpdateOneRequiredWithoutMangaNestedInput = {
    create?: XOR<ItemsCountCreateWithoutMangaInput, ItemsCountUncheckedCreateWithoutMangaInput>
    connectOrCreate?: ItemsCountCreateOrConnectWithoutMangaInput
    upsert?: ItemsCountUpsertWithoutMangaInput
    connect?: ItemsCountWhereUniqueInput
    update?: XOR<XOR<ItemsCountUpdateToOneWithWhereWithoutMangaInput, ItemsCountUpdateWithoutMangaInput>, ItemsCountUncheckedUpdateWithoutMangaInput>
  }

  export type GenreUpdateManyWithoutMangaNestedInput = {
    create?: XOR<GenreCreateWithoutMangaInput, GenreUncheckedCreateWithoutMangaInput> | GenreCreateWithoutMangaInput[] | GenreUncheckedCreateWithoutMangaInput[]
    connectOrCreate?: GenreCreateOrConnectWithoutMangaInput | GenreCreateOrConnectWithoutMangaInput[]
    upsert?: GenreUpsertWithWhereUniqueWithoutMangaInput | GenreUpsertWithWhereUniqueWithoutMangaInput[]
    set?: GenreWhereUniqueInput | GenreWhereUniqueInput[]
    disconnect?: GenreWhereUniqueInput | GenreWhereUniqueInput[]
    delete?: GenreWhereUniqueInput | GenreWhereUniqueInput[]
    connect?: GenreWhereUniqueInput | GenreWhereUniqueInput[]
    update?: GenreUpdateWithWhereUniqueWithoutMangaInput | GenreUpdateWithWhereUniqueWithoutMangaInput[]
    updateMany?: GenreUpdateManyWithWhereWithoutMangaInput | GenreUpdateManyWithWhereWithoutMangaInput[]
    deleteMany?: GenreScalarWhereInput | GenreScalarWhereInput[]
  }

  export type BackgroundUpdateOneRequiredWithoutMangaNestedInput = {
    create?: XOR<BackgroundCreateWithoutMangaInput, BackgroundUncheckedCreateWithoutMangaInput>
    connectOrCreate?: BackgroundCreateOrConnectWithoutMangaInput
    upsert?: BackgroundUpsertWithoutMangaInput
    connect?: BackgroundWhereUniqueInput
    update?: XOR<XOR<BackgroundUpdateToOneWithWhereWithoutMangaInput, BackgroundUpdateWithoutMangaInput>, BackgroundUncheckedUpdateWithoutMangaInput>
  }

  export type ChapterUpdateManyWithoutMangaNestedInput = {
    create?: XOR<ChapterCreateWithoutMangaInput, ChapterUncheckedCreateWithoutMangaInput> | ChapterCreateWithoutMangaInput[] | ChapterUncheckedCreateWithoutMangaInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutMangaInput | ChapterCreateOrConnectWithoutMangaInput[]
    upsert?: ChapterUpsertWithWhereUniqueWithoutMangaInput | ChapterUpsertWithWhereUniqueWithoutMangaInput[]
    createMany?: ChapterCreateManyMangaInputEnvelope
    set?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    disconnect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    delete?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    update?: ChapterUpdateWithWhereUniqueWithoutMangaInput | ChapterUpdateWithWhereUniqueWithoutMangaInput[]
    updateMany?: ChapterUpdateManyWithWhereWithoutMangaInput | ChapterUpdateManyWithWhereWithoutMangaInput[]
    deleteMany?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
  }

  export type RelatedUpdateManyWithoutMangaNestedInput = {
    create?: XOR<RelatedCreateWithoutMangaInput, RelatedUncheckedCreateWithoutMangaInput> | RelatedCreateWithoutMangaInput[] | RelatedUncheckedCreateWithoutMangaInput[]
    connectOrCreate?: RelatedCreateOrConnectWithoutMangaInput | RelatedCreateOrConnectWithoutMangaInput[]
    upsert?: RelatedUpsertWithWhereUniqueWithoutMangaInput | RelatedUpsertWithWhereUniqueWithoutMangaInput[]
    createMany?: RelatedCreateManyMangaInputEnvelope
    set?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    disconnect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    delete?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    connect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    update?: RelatedUpdateWithWhereUniqueWithoutMangaInput | RelatedUpdateWithWhereUniqueWithoutMangaInput[]
    updateMany?: RelatedUpdateManyWithWhereWithoutMangaInput | RelatedUpdateManyWithWhereWithoutMangaInput[]
    deleteMany?: RelatedScalarWhereInput | RelatedScalarWhereInput[]
  }

  export type RelatedUpdateManyWithoutRelatedMangaNestedInput = {
    create?: XOR<RelatedCreateWithoutRelatedMangaInput, RelatedUncheckedCreateWithoutRelatedMangaInput> | RelatedCreateWithoutRelatedMangaInput[] | RelatedUncheckedCreateWithoutRelatedMangaInput[]
    connectOrCreate?: RelatedCreateOrConnectWithoutRelatedMangaInput | RelatedCreateOrConnectWithoutRelatedMangaInput[]
    upsert?: RelatedUpsertWithWhereUniqueWithoutRelatedMangaInput | RelatedUpsertWithWhereUniqueWithoutRelatedMangaInput[]
    createMany?: RelatedCreateManyRelatedMangaInputEnvelope
    set?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    disconnect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    delete?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    connect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    update?: RelatedUpdateWithWhereUniqueWithoutRelatedMangaInput | RelatedUpdateWithWhereUniqueWithoutRelatedMangaInput[]
    updateMany?: RelatedUpdateManyWithWhereWithoutRelatedMangaInput | RelatedUpdateManyWithWhereWithoutRelatedMangaInput[]
    deleteMany?: RelatedScalarWhereInput | RelatedScalarWhereInput[]
  }

  export type BookmarkUpdateManyWithoutMangaNestedInput = {
    create?: XOR<BookmarkCreateWithoutMangaInput, BookmarkUncheckedCreateWithoutMangaInput> | BookmarkCreateWithoutMangaInput[] | BookmarkUncheckedCreateWithoutMangaInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutMangaInput | BookmarkCreateOrConnectWithoutMangaInput[]
    upsert?: BookmarkUpsertWithWhereUniqueWithoutMangaInput | BookmarkUpsertWithWhereUniqueWithoutMangaInput[]
    createMany?: BookmarkCreateManyMangaInputEnvelope
    set?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    disconnect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    delete?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    update?: BookmarkUpdateWithWhereUniqueWithoutMangaInput | BookmarkUpdateWithWhereUniqueWithoutMangaInput[]
    updateMany?: BookmarkUpdateManyWithWhereWithoutMangaInput | BookmarkUpdateManyWithWhereWithoutMangaInput[]
    deleteMany?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
  }

  export type GenreUncheckedUpdateManyWithoutMangaNestedInput = {
    create?: XOR<GenreCreateWithoutMangaInput, GenreUncheckedCreateWithoutMangaInput> | GenreCreateWithoutMangaInput[] | GenreUncheckedCreateWithoutMangaInput[]
    connectOrCreate?: GenreCreateOrConnectWithoutMangaInput | GenreCreateOrConnectWithoutMangaInput[]
    upsert?: GenreUpsertWithWhereUniqueWithoutMangaInput | GenreUpsertWithWhereUniqueWithoutMangaInput[]
    set?: GenreWhereUniqueInput | GenreWhereUniqueInput[]
    disconnect?: GenreWhereUniqueInput | GenreWhereUniqueInput[]
    delete?: GenreWhereUniqueInput | GenreWhereUniqueInput[]
    connect?: GenreWhereUniqueInput | GenreWhereUniqueInput[]
    update?: GenreUpdateWithWhereUniqueWithoutMangaInput | GenreUpdateWithWhereUniqueWithoutMangaInput[]
    updateMany?: GenreUpdateManyWithWhereWithoutMangaInput | GenreUpdateManyWithWhereWithoutMangaInput[]
    deleteMany?: GenreScalarWhereInput | GenreScalarWhereInput[]
  }

  export type ChapterUncheckedUpdateManyWithoutMangaNestedInput = {
    create?: XOR<ChapterCreateWithoutMangaInput, ChapterUncheckedCreateWithoutMangaInput> | ChapterCreateWithoutMangaInput[] | ChapterUncheckedCreateWithoutMangaInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutMangaInput | ChapterCreateOrConnectWithoutMangaInput[]
    upsert?: ChapterUpsertWithWhereUniqueWithoutMangaInput | ChapterUpsertWithWhereUniqueWithoutMangaInput[]
    createMany?: ChapterCreateManyMangaInputEnvelope
    set?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    disconnect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    delete?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    update?: ChapterUpdateWithWhereUniqueWithoutMangaInput | ChapterUpdateWithWhereUniqueWithoutMangaInput[]
    updateMany?: ChapterUpdateManyWithWhereWithoutMangaInput | ChapterUpdateManyWithWhereWithoutMangaInput[]
    deleteMany?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
  }

  export type RelatedUncheckedUpdateManyWithoutMangaNestedInput = {
    create?: XOR<RelatedCreateWithoutMangaInput, RelatedUncheckedCreateWithoutMangaInput> | RelatedCreateWithoutMangaInput[] | RelatedUncheckedCreateWithoutMangaInput[]
    connectOrCreate?: RelatedCreateOrConnectWithoutMangaInput | RelatedCreateOrConnectWithoutMangaInput[]
    upsert?: RelatedUpsertWithWhereUniqueWithoutMangaInput | RelatedUpsertWithWhereUniqueWithoutMangaInput[]
    createMany?: RelatedCreateManyMangaInputEnvelope
    set?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    disconnect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    delete?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    connect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    update?: RelatedUpdateWithWhereUniqueWithoutMangaInput | RelatedUpdateWithWhereUniqueWithoutMangaInput[]
    updateMany?: RelatedUpdateManyWithWhereWithoutMangaInput | RelatedUpdateManyWithWhereWithoutMangaInput[]
    deleteMany?: RelatedScalarWhereInput | RelatedScalarWhereInput[]
  }

  export type RelatedUncheckedUpdateManyWithoutRelatedMangaNestedInput = {
    create?: XOR<RelatedCreateWithoutRelatedMangaInput, RelatedUncheckedCreateWithoutRelatedMangaInput> | RelatedCreateWithoutRelatedMangaInput[] | RelatedUncheckedCreateWithoutRelatedMangaInput[]
    connectOrCreate?: RelatedCreateOrConnectWithoutRelatedMangaInput | RelatedCreateOrConnectWithoutRelatedMangaInput[]
    upsert?: RelatedUpsertWithWhereUniqueWithoutRelatedMangaInput | RelatedUpsertWithWhereUniqueWithoutRelatedMangaInput[]
    createMany?: RelatedCreateManyRelatedMangaInputEnvelope
    set?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    disconnect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    delete?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    connect?: RelatedWhereUniqueInput | RelatedWhereUniqueInput[]
    update?: RelatedUpdateWithWhereUniqueWithoutRelatedMangaInput | RelatedUpdateWithWhereUniqueWithoutRelatedMangaInput[]
    updateMany?: RelatedUpdateManyWithWhereWithoutRelatedMangaInput | RelatedUpdateManyWithWhereWithoutRelatedMangaInput[]
    deleteMany?: RelatedScalarWhereInput | RelatedScalarWhereInput[]
  }

  export type BookmarkUncheckedUpdateManyWithoutMangaNestedInput = {
    create?: XOR<BookmarkCreateWithoutMangaInput, BookmarkUncheckedCreateWithoutMangaInput> | BookmarkCreateWithoutMangaInput[] | BookmarkUncheckedCreateWithoutMangaInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutMangaInput | BookmarkCreateOrConnectWithoutMangaInput[]
    upsert?: BookmarkUpsertWithWhereUniqueWithoutMangaInput | BookmarkUpsertWithWhereUniqueWithoutMangaInput[]
    createMany?: BookmarkCreateManyMangaInputEnvelope
    set?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    disconnect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    delete?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    update?: BookmarkUpdateWithWhereUniqueWithoutMangaInput | BookmarkUpdateWithWhereUniqueWithoutMangaInput[]
    updateMany?: BookmarkUpdateManyWithWhereWithoutMangaInput | BookmarkUpdateManyWithWhereWithoutMangaInput[]
    deleteMany?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
  }

  export type MangaCreateNestedManyWithoutItems_countInput = {
    create?: XOR<MangaCreateWithoutItems_countInput, MangaUncheckedCreateWithoutItems_countInput> | MangaCreateWithoutItems_countInput[] | MangaUncheckedCreateWithoutItems_countInput[]
    connectOrCreate?: MangaCreateOrConnectWithoutItems_countInput | MangaCreateOrConnectWithoutItems_countInput[]
    createMany?: MangaCreateManyItems_countInputEnvelope
    connect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
  }

  export type MangaUncheckedCreateNestedManyWithoutItems_countInput = {
    create?: XOR<MangaCreateWithoutItems_countInput, MangaUncheckedCreateWithoutItems_countInput> | MangaCreateWithoutItems_countInput[] | MangaUncheckedCreateWithoutItems_countInput[]
    connectOrCreate?: MangaCreateOrConnectWithoutItems_countInput | MangaCreateOrConnectWithoutItems_countInput[]
    createMany?: MangaCreateManyItems_countInputEnvelope
    connect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
  }

  export type MangaUpdateManyWithoutItems_countNestedInput = {
    create?: XOR<MangaCreateWithoutItems_countInput, MangaUncheckedCreateWithoutItems_countInput> | MangaCreateWithoutItems_countInput[] | MangaUncheckedCreateWithoutItems_countInput[]
    connectOrCreate?: MangaCreateOrConnectWithoutItems_countInput | MangaCreateOrConnectWithoutItems_countInput[]
    upsert?: MangaUpsertWithWhereUniqueWithoutItems_countInput | MangaUpsertWithWhereUniqueWithoutItems_countInput[]
    createMany?: MangaCreateManyItems_countInputEnvelope
    set?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    disconnect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    delete?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    connect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    update?: MangaUpdateWithWhereUniqueWithoutItems_countInput | MangaUpdateWithWhereUniqueWithoutItems_countInput[]
    updateMany?: MangaUpdateManyWithWhereWithoutItems_countInput | MangaUpdateManyWithWhereWithoutItems_countInput[]
    deleteMany?: MangaScalarWhereInput | MangaScalarWhereInput[]
  }

  export type MangaUncheckedUpdateManyWithoutItems_countNestedInput = {
    create?: XOR<MangaCreateWithoutItems_countInput, MangaUncheckedCreateWithoutItems_countInput> | MangaCreateWithoutItems_countInput[] | MangaUncheckedCreateWithoutItems_countInput[]
    connectOrCreate?: MangaCreateOrConnectWithoutItems_countInput | MangaCreateOrConnectWithoutItems_countInput[]
    upsert?: MangaUpsertWithWhereUniqueWithoutItems_countInput | MangaUpsertWithWhereUniqueWithoutItems_countInput[]
    createMany?: MangaCreateManyItems_countInputEnvelope
    set?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    disconnect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    delete?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    connect?: MangaWhereUniqueInput | MangaWhereUniqueInput[]
    update?: MangaUpdateWithWhereUniqueWithoutItems_countInput | MangaUpdateWithWhereUniqueWithoutItems_countInput[]
    updateMany?: MangaUpdateManyWithWhereWithoutItems_countInput | MangaUpdateManyWithWhereWithoutItems_countInput[]
    deleteMany?: MangaScalarWhereInput | MangaScalarWhereInput[]
  }

  export type MangaPageCreateNestedManyWithoutChapterInput = {
    create?: XOR<MangaPageCreateWithoutChapterInput, MangaPageUncheckedCreateWithoutChapterInput> | MangaPageCreateWithoutChapterInput[] | MangaPageUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: MangaPageCreateOrConnectWithoutChapterInput | MangaPageCreateOrConnectWithoutChapterInput[]
    createMany?: MangaPageCreateManyChapterInputEnvelope
    connect?: MangaPageWhereUniqueInput | MangaPageWhereUniqueInput[]
  }

  export type MangaCreateNestedOneWithoutChapterInput = {
    create?: XOR<MangaCreateWithoutChapterInput, MangaUncheckedCreateWithoutChapterInput>
    connectOrCreate?: MangaCreateOrConnectWithoutChapterInput
    connect?: MangaWhereUniqueInput
  }

  export type BookmarkCreateNestedManyWithoutLastReadInput = {
    create?: XOR<BookmarkCreateWithoutLastReadInput, BookmarkUncheckedCreateWithoutLastReadInput> | BookmarkCreateWithoutLastReadInput[] | BookmarkUncheckedCreateWithoutLastReadInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutLastReadInput | BookmarkCreateOrConnectWithoutLastReadInput[]
    createMany?: BookmarkCreateManyLastReadInputEnvelope
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
  }

  export type MangaPageUncheckedCreateNestedManyWithoutChapterInput = {
    create?: XOR<MangaPageCreateWithoutChapterInput, MangaPageUncheckedCreateWithoutChapterInput> | MangaPageCreateWithoutChapterInput[] | MangaPageUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: MangaPageCreateOrConnectWithoutChapterInput | MangaPageCreateOrConnectWithoutChapterInput[]
    createMany?: MangaPageCreateManyChapterInputEnvelope
    connect?: MangaPageWhereUniqueInput | MangaPageWhereUniqueInput[]
  }

  export type BookmarkUncheckedCreateNestedManyWithoutLastReadInput = {
    create?: XOR<BookmarkCreateWithoutLastReadInput, BookmarkUncheckedCreateWithoutLastReadInput> | BookmarkCreateWithoutLastReadInput[] | BookmarkUncheckedCreateWithoutLastReadInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutLastReadInput | BookmarkCreateOrConnectWithoutLastReadInput[]
    createMany?: BookmarkCreateManyLastReadInputEnvelope
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MangaPageUpdateManyWithoutChapterNestedInput = {
    create?: XOR<MangaPageCreateWithoutChapterInput, MangaPageUncheckedCreateWithoutChapterInput> | MangaPageCreateWithoutChapterInput[] | MangaPageUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: MangaPageCreateOrConnectWithoutChapterInput | MangaPageCreateOrConnectWithoutChapterInput[]
    upsert?: MangaPageUpsertWithWhereUniqueWithoutChapterInput | MangaPageUpsertWithWhereUniqueWithoutChapterInput[]
    createMany?: MangaPageCreateManyChapterInputEnvelope
    set?: MangaPageWhereUniqueInput | MangaPageWhereUniqueInput[]
    disconnect?: MangaPageWhereUniqueInput | MangaPageWhereUniqueInput[]
    delete?: MangaPageWhereUniqueInput | MangaPageWhereUniqueInput[]
    connect?: MangaPageWhereUniqueInput | MangaPageWhereUniqueInput[]
    update?: MangaPageUpdateWithWhereUniqueWithoutChapterInput | MangaPageUpdateWithWhereUniqueWithoutChapterInput[]
    updateMany?: MangaPageUpdateManyWithWhereWithoutChapterInput | MangaPageUpdateManyWithWhereWithoutChapterInput[]
    deleteMany?: MangaPageScalarWhereInput | MangaPageScalarWhereInput[]
  }

  export type MangaUpdateOneRequiredWithoutChapterNestedInput = {
    create?: XOR<MangaCreateWithoutChapterInput, MangaUncheckedCreateWithoutChapterInput>
    connectOrCreate?: MangaCreateOrConnectWithoutChapterInput
    upsert?: MangaUpsertWithoutChapterInput
    connect?: MangaWhereUniqueInput
    update?: XOR<XOR<MangaUpdateToOneWithWhereWithoutChapterInput, MangaUpdateWithoutChapterInput>, MangaUncheckedUpdateWithoutChapterInput>
  }

  export type BookmarkUpdateManyWithoutLastReadNestedInput = {
    create?: XOR<BookmarkCreateWithoutLastReadInput, BookmarkUncheckedCreateWithoutLastReadInput> | BookmarkCreateWithoutLastReadInput[] | BookmarkUncheckedCreateWithoutLastReadInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutLastReadInput | BookmarkCreateOrConnectWithoutLastReadInput[]
    upsert?: BookmarkUpsertWithWhereUniqueWithoutLastReadInput | BookmarkUpsertWithWhereUniqueWithoutLastReadInput[]
    createMany?: BookmarkCreateManyLastReadInputEnvelope
    set?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    disconnect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    delete?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    update?: BookmarkUpdateWithWhereUniqueWithoutLastReadInput | BookmarkUpdateWithWhereUniqueWithoutLastReadInput[]
    updateMany?: BookmarkUpdateManyWithWhereWithoutLastReadInput | BookmarkUpdateManyWithWhereWithoutLastReadInput[]
    deleteMany?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
  }

  export type MangaPageUncheckedUpdateManyWithoutChapterNestedInput = {
    create?: XOR<MangaPageCreateWithoutChapterInput, MangaPageUncheckedCreateWithoutChapterInput> | MangaPageCreateWithoutChapterInput[] | MangaPageUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: MangaPageCreateOrConnectWithoutChapterInput | MangaPageCreateOrConnectWithoutChapterInput[]
    upsert?: MangaPageUpsertWithWhereUniqueWithoutChapterInput | MangaPageUpsertWithWhereUniqueWithoutChapterInput[]
    createMany?: MangaPageCreateManyChapterInputEnvelope
    set?: MangaPageWhereUniqueInput | MangaPageWhereUniqueInput[]
    disconnect?: MangaPageWhereUniqueInput | MangaPageWhereUniqueInput[]
    delete?: MangaPageWhereUniqueInput | MangaPageWhereUniqueInput[]
    connect?: MangaPageWhereUniqueInput | MangaPageWhereUniqueInput[]
    update?: MangaPageUpdateWithWhereUniqueWithoutChapterInput | MangaPageUpdateWithWhereUniqueWithoutChapterInput[]
    updateMany?: MangaPageUpdateManyWithWhereWithoutChapterInput | MangaPageUpdateManyWithWhereWithoutChapterInput[]
    deleteMany?: MangaPageScalarWhereInput | MangaPageScalarWhereInput[]
  }

  export type BookmarkUncheckedUpdateManyWithoutLastReadNestedInput = {
    create?: XOR<BookmarkCreateWithoutLastReadInput, BookmarkUncheckedCreateWithoutLastReadInput> | BookmarkCreateWithoutLastReadInput[] | BookmarkUncheckedCreateWithoutLastReadInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutLastReadInput | BookmarkCreateOrConnectWithoutLastReadInput[]
    upsert?: BookmarkUpsertWithWhereUniqueWithoutLastReadInput | BookmarkUpsertWithWhereUniqueWithoutLastReadInput[]
    createMany?: BookmarkCreateManyLastReadInputEnvelope
    set?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    disconnect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    delete?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    update?: BookmarkUpdateWithWhereUniqueWithoutLastReadInput | BookmarkUpdateWithWhereUniqueWithoutLastReadInput[]
    updateMany?: BookmarkUpdateManyWithWhereWithoutLastReadInput | BookmarkUpdateManyWithWhereWithoutLastReadInput[]
    deleteMany?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
  }

  export type ChapterCreateNestedOneWithoutPagesInput = {
    create?: XOR<ChapterCreateWithoutPagesInput, ChapterUncheckedCreateWithoutPagesInput>
    connectOrCreate?: ChapterCreateOrConnectWithoutPagesInput
    connect?: ChapterWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ChapterUpdateOneRequiredWithoutPagesNestedInput = {
    create?: XOR<ChapterCreateWithoutPagesInput, ChapterUncheckedCreateWithoutPagesInput>
    connectOrCreate?: ChapterCreateOrConnectWithoutPagesInput
    upsert?: ChapterUpsertWithoutPagesInput
    connect?: ChapterWhereUniqueInput
    update?: XOR<XOR<ChapterUpdateToOneWithWhereWithoutPagesInput, ChapterUpdateWithoutPagesInput>, ChapterUncheckedUpdateWithoutPagesInput>
  }

  export type ChapterCreateNestedOneWithoutBookmarkInput = {
    create?: XOR<ChapterCreateWithoutBookmarkInput, ChapterUncheckedCreateWithoutBookmarkInput>
    connectOrCreate?: ChapterCreateOrConnectWithoutBookmarkInput
    connect?: ChapterWhereUniqueInput
  }

  export type EpisodeCreateNestedOneWithoutBookmarkInput = {
    create?: XOR<EpisodeCreateWithoutBookmarkInput, EpisodeUncheckedCreateWithoutBookmarkInput>
    connectOrCreate?: EpisodeCreateOrConnectWithoutBookmarkInput
    connect?: EpisodeWhereUniqueInput
  }

  export type AnimeCreateNestedOneWithoutBookmarkInput = {
    create?: XOR<AnimeCreateWithoutBookmarkInput, AnimeUncheckedCreateWithoutBookmarkInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutBookmarkInput
    connect?: AnimeWhereUniqueInput
  }

  export type MangaCreateNestedOneWithoutBookmarkInput = {
    create?: XOR<MangaCreateWithoutBookmarkInput, MangaUncheckedCreateWithoutBookmarkInput>
    connectOrCreate?: MangaCreateOrConnectWithoutBookmarkInput
    connect?: MangaWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBookmarkInput = {
    create?: XOR<UserCreateWithoutBookmarkInput, UserUncheckedCreateWithoutBookmarkInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookmarkInput
    connect?: UserWhereUniqueInput
  }

  export type EnumBookmarkNameFieldUpdateOperationsInput = {
    set?: $Enums.BookmarkName
  }

  export type ChapterUpdateOneWithoutBookmarkNestedInput = {
    create?: XOR<ChapterCreateWithoutBookmarkInput, ChapterUncheckedCreateWithoutBookmarkInput>
    connectOrCreate?: ChapterCreateOrConnectWithoutBookmarkInput
    upsert?: ChapterUpsertWithoutBookmarkInput
    disconnect?: ChapterWhereInput | boolean
    delete?: ChapterWhereInput | boolean
    connect?: ChapterWhereUniqueInput
    update?: XOR<XOR<ChapterUpdateToOneWithWhereWithoutBookmarkInput, ChapterUpdateWithoutBookmarkInput>, ChapterUncheckedUpdateWithoutBookmarkInput>
  }

  export type EpisodeUpdateOneWithoutBookmarkNestedInput = {
    create?: XOR<EpisodeCreateWithoutBookmarkInput, EpisodeUncheckedCreateWithoutBookmarkInput>
    connectOrCreate?: EpisodeCreateOrConnectWithoutBookmarkInput
    upsert?: EpisodeUpsertWithoutBookmarkInput
    disconnect?: EpisodeWhereInput | boolean
    delete?: EpisodeWhereInput | boolean
    connect?: EpisodeWhereUniqueInput
    update?: XOR<XOR<EpisodeUpdateToOneWithWhereWithoutBookmarkInput, EpisodeUpdateWithoutBookmarkInput>, EpisodeUncheckedUpdateWithoutBookmarkInput>
  }

  export type AnimeUpdateOneWithoutBookmarkNestedInput = {
    create?: XOR<AnimeCreateWithoutBookmarkInput, AnimeUncheckedCreateWithoutBookmarkInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutBookmarkInput
    upsert?: AnimeUpsertWithoutBookmarkInput
    disconnect?: AnimeWhereInput | boolean
    delete?: AnimeWhereInput | boolean
    connect?: AnimeWhereUniqueInput
    update?: XOR<XOR<AnimeUpdateToOneWithWhereWithoutBookmarkInput, AnimeUpdateWithoutBookmarkInput>, AnimeUncheckedUpdateWithoutBookmarkInput>
  }

  export type MangaUpdateOneWithoutBookmarkNestedInput = {
    create?: XOR<MangaCreateWithoutBookmarkInput, MangaUncheckedCreateWithoutBookmarkInput>
    connectOrCreate?: MangaCreateOrConnectWithoutBookmarkInput
    upsert?: MangaUpsertWithoutBookmarkInput
    disconnect?: MangaWhereInput | boolean
    delete?: MangaWhereInput | boolean
    connect?: MangaWhereUniqueInput
    update?: XOR<XOR<MangaUpdateToOneWithWhereWithoutBookmarkInput, MangaUpdateWithoutBookmarkInput>, MangaUncheckedUpdateWithoutBookmarkInput>
  }

  export type UserUpdateOneRequiredWithoutBookmarkNestedInput = {
    create?: XOR<UserCreateWithoutBookmarkInput, UserUncheckedCreateWithoutBookmarkInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookmarkInput
    upsert?: UserUpsertWithoutBookmarkInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBookmarkInput, UserUpdateWithoutBookmarkInput>, UserUncheckedUpdateWithoutBookmarkInput>
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type BookmarkCreateNestedManyWithoutUserInput = {
    create?: XOR<BookmarkCreateWithoutUserInput, BookmarkUncheckedCreateWithoutUserInput> | BookmarkCreateWithoutUserInput[] | BookmarkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutUserInput | BookmarkCreateOrConnectWithoutUserInput[]
    createMany?: BookmarkCreateManyUserInputEnvelope
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type BookmarkUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BookmarkCreateWithoutUserInput, BookmarkUncheckedCreateWithoutUserInput> | BookmarkCreateWithoutUserInput[] | BookmarkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutUserInput | BookmarkCreateOrConnectWithoutUserInput[]
    createMany?: BookmarkCreateManyUserInputEnvelope
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type BookmarkUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookmarkCreateWithoutUserInput, BookmarkUncheckedCreateWithoutUserInput> | BookmarkCreateWithoutUserInput[] | BookmarkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutUserInput | BookmarkCreateOrConnectWithoutUserInput[]
    upsert?: BookmarkUpsertWithWhereUniqueWithoutUserInput | BookmarkUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookmarkCreateManyUserInputEnvelope
    set?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    disconnect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    delete?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    update?: BookmarkUpdateWithWhereUniqueWithoutUserInput | BookmarkUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookmarkUpdateManyWithWhereWithoutUserInput | BookmarkUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type BookmarkUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookmarkCreateWithoutUserInput, BookmarkUncheckedCreateWithoutUserInput> | BookmarkCreateWithoutUserInput[] | BookmarkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutUserInput | BookmarkCreateOrConnectWithoutUserInput[]
    upsert?: BookmarkUpsertWithWhereUniqueWithoutUserInput | BookmarkUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookmarkCreateManyUserInputEnvelope
    set?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    disconnect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    delete?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    update?: BookmarkUpdateWithWhereUniqueWithoutUserInput | BookmarkUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookmarkUpdateManyWithWhereWithoutUserInput | BookmarkUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumRelatedReasonFilter<$PrismaModel = never> = {
    equals?: $Enums.RelatedReason | EnumRelatedReasonFieldRefInput<$PrismaModel>
    in?: $Enums.RelatedReason[] | ListEnumRelatedReasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.RelatedReason[] | ListEnumRelatedReasonFieldRefInput<$PrismaModel>
    not?: NestedEnumRelatedReasonFilter<$PrismaModel> | $Enums.RelatedReason
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumRelatedReasonWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RelatedReason | EnumRelatedReasonFieldRefInput<$PrismaModel>
    in?: $Enums.RelatedReason[] | ListEnumRelatedReasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.RelatedReason[] | ListEnumRelatedReasonFieldRefInput<$PrismaModel>
    not?: NestedEnumRelatedReasonWithAggregatesFilter<$PrismaModel> | $Enums.RelatedReason
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRelatedReasonFilter<$PrismaModel>
    _max?: NestedEnumRelatedReasonFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumModelNameFilter<$PrismaModel = never> = {
    equals?: $Enums.ModelName | EnumModelNameFieldRefInput<$PrismaModel>
    in?: $Enums.ModelName[] | ListEnumModelNameFieldRefInput<$PrismaModel>
    notIn?: $Enums.ModelName[] | ListEnumModelNameFieldRefInput<$PrismaModel>
    not?: NestedEnumModelNameFilter<$PrismaModel> | $Enums.ModelName
  }

  export type NestedEnumModelNameWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ModelName | EnumModelNameFieldRefInput<$PrismaModel>
    in?: $Enums.ModelName[] | ListEnumModelNameFieldRefInput<$PrismaModel>
    notIn?: $Enums.ModelName[] | ListEnumModelNameFieldRefInput<$PrismaModel>
    not?: NestedEnumModelNameWithAggregatesFilter<$PrismaModel> | $Enums.ModelName
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumModelNameFilter<$PrismaModel>
    _max?: NestedEnumModelNameFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumBookmarkNameFilter<$PrismaModel = never> = {
    equals?: $Enums.BookmarkName | EnumBookmarkNameFieldRefInput<$PrismaModel>
    in?: $Enums.BookmarkName[] | ListEnumBookmarkNameFieldRefInput<$PrismaModel>
    notIn?: $Enums.BookmarkName[] | ListEnumBookmarkNameFieldRefInput<$PrismaModel>
    not?: NestedEnumBookmarkNameFilter<$PrismaModel> | $Enums.BookmarkName
  }

  export type NestedEnumBookmarkNameWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BookmarkName | EnumBookmarkNameFieldRefInput<$PrismaModel>
    in?: $Enums.BookmarkName[] | ListEnumBookmarkNameFieldRefInput<$PrismaModel>
    notIn?: $Enums.BookmarkName[] | ListEnumBookmarkNameFieldRefInput<$PrismaModel>
    not?: NestedEnumBookmarkNameWithAggregatesFilter<$PrismaModel> | $Enums.BookmarkName
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBookmarkNameFilter<$PrismaModel>
    _max?: NestedEnumBookmarkNameFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type MangaCreateWithoutCoverInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    ageRestriction: AgeRestrictionCreateNestedOneWithoutMangaInput
    items_count: ItemsCountCreateNestedOneWithoutMangaInput
    genres?: GenreCreateNestedManyWithoutMangaInput
    background: BackgroundCreateNestedOneWithoutMangaInput
    Chapter?: ChapterCreateNestedManyWithoutMangaInput
    relatedFrom?: RelatedCreateNestedManyWithoutMangaInput
    relatedTo?: RelatedCreateNestedManyWithoutRelatedMangaInput
    Bookmark?: BookmarkCreateNestedManyWithoutMangaInput
  }

  export type MangaUncheckedCreateWithoutCoverInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    ageRestrictionId: number
    itemsCountId: number
    backgroundId: number
    genres?: GenreUncheckedCreateNestedManyWithoutMangaInput
    Chapter?: ChapterUncheckedCreateNestedManyWithoutMangaInput
    relatedFrom?: RelatedUncheckedCreateNestedManyWithoutMangaInput
    relatedTo?: RelatedUncheckedCreateNestedManyWithoutRelatedMangaInput
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutMangaInput
  }

  export type MangaCreateOrConnectWithoutCoverInput = {
    where: MangaWhereUniqueInput
    create: XOR<MangaCreateWithoutCoverInput, MangaUncheckedCreateWithoutCoverInput>
  }

  export type MangaCreateManyCoverInputEnvelope = {
    data: MangaCreateManyCoverInput | MangaCreateManyCoverInput[]
    skipDuplicates?: boolean
  }

  export type AnimeCreateWithoutCoverInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: AnimeCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    ageRestriction: AgeRestrictionCreateNestedOneWithoutAnimeInput
    genres?: GenreCreateNestedManyWithoutAnimeInput
    background: BackgroundCreateNestedOneWithoutAnimeInput
    Episode?: EpisodeCreateNestedManyWithoutAnimeInput
    relatedFrom?: RelatedCreateNestedManyWithoutAnimeInput
    relatedTo?: RelatedCreateNestedManyWithoutRelatedAnimeInput
    Bookmark?: BookmarkCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateWithoutCoverInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: AnimeCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    ageRestrictionId: number
    backgroundId: number
    genres?: GenreUncheckedCreateNestedManyWithoutAnimeInput
    Episode?: EpisodeUncheckedCreateNestedManyWithoutAnimeInput
    relatedFrom?: RelatedUncheckedCreateNestedManyWithoutAnimeInput
    relatedTo?: RelatedUncheckedCreateNestedManyWithoutRelatedAnimeInput
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeCreateOrConnectWithoutCoverInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutCoverInput, AnimeUncheckedCreateWithoutCoverInput>
  }

  export type AnimeCreateManyCoverInputEnvelope = {
    data: AnimeCreateManyCoverInput | AnimeCreateManyCoverInput[]
    skipDuplicates?: boolean
  }

  export type MangaUpsertWithWhereUniqueWithoutCoverInput = {
    where: MangaWhereUniqueInput
    update: XOR<MangaUpdateWithoutCoverInput, MangaUncheckedUpdateWithoutCoverInput>
    create: XOR<MangaCreateWithoutCoverInput, MangaUncheckedCreateWithoutCoverInput>
  }

  export type MangaUpdateWithWhereUniqueWithoutCoverInput = {
    where: MangaWhereUniqueInput
    data: XOR<MangaUpdateWithoutCoverInput, MangaUncheckedUpdateWithoutCoverInput>
  }

  export type MangaUpdateManyWithWhereWithoutCoverInput = {
    where: MangaScalarWhereInput
    data: XOR<MangaUpdateManyMutationInput, MangaUncheckedUpdateManyWithoutCoverInput>
  }

  export type MangaScalarWhereInput = {
    AND?: MangaScalarWhereInput | MangaScalarWhereInput[]
    OR?: MangaScalarWhereInput[]
    NOT?: MangaScalarWhereInput | MangaScalarWhereInput[]
    id?: IntFilter<"Manga"> | number
    name?: StringFilter<"Manga"> | string
    eng_name?: StringFilter<"Manga"> | string
    slug_url?: StringFilter<"Manga"> | string
    otherNames?: StringNullableListFilter<"Manga">
    summary?: StringNullableFilter<"Manga"> | string | null
    model?: EnumModelNameFilter<"Manga"> | $Enums.ModelName
    site?: IntFilter<"Manga"> | number
    isLicensed?: BoolFilter<"Manga"> | boolean
    coverId?: IntFilter<"Manga"> | number
    ageRestrictionId?: IntFilter<"Manga"> | number
    itemsCountId?: IntFilter<"Manga"> | number
    backgroundId?: IntFilter<"Manga"> | number
  }

  export type AnimeUpsertWithWhereUniqueWithoutCoverInput = {
    where: AnimeWhereUniqueInput
    update: XOR<AnimeUpdateWithoutCoverInput, AnimeUncheckedUpdateWithoutCoverInput>
    create: XOR<AnimeCreateWithoutCoverInput, AnimeUncheckedCreateWithoutCoverInput>
  }

  export type AnimeUpdateWithWhereUniqueWithoutCoverInput = {
    where: AnimeWhereUniqueInput
    data: XOR<AnimeUpdateWithoutCoverInput, AnimeUncheckedUpdateWithoutCoverInput>
  }

  export type AnimeUpdateManyWithWhereWithoutCoverInput = {
    where: AnimeScalarWhereInput
    data: XOR<AnimeUpdateManyMutationInput, AnimeUncheckedUpdateManyWithoutCoverInput>
  }

  export type AnimeScalarWhereInput = {
    AND?: AnimeScalarWhereInput | AnimeScalarWhereInput[]
    OR?: AnimeScalarWhereInput[]
    NOT?: AnimeScalarWhereInput | AnimeScalarWhereInput[]
    id?: IntFilter<"Anime"> | number
    name?: StringFilter<"Anime"> | string
    eng_name?: StringFilter<"Anime"> | string
    slug_url?: StringFilter<"Anime"> | string
    otherNames?: StringNullableListFilter<"Anime">
    summary?: StringNullableFilter<"Anime"> | string | null
    model?: EnumModelNameFilter<"Anime"> | $Enums.ModelName
    site?: IntFilter<"Anime"> | number
    coverId?: IntFilter<"Anime"> | number
    ageRestrictionId?: IntFilter<"Anime"> | number
    backgroundId?: IntFilter<"Anime"> | number
  }

  export type MangaCreateWithoutAgeRestrictionInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    cover: CoverCreateNestedOneWithoutMangaInput
    items_count: ItemsCountCreateNestedOneWithoutMangaInput
    genres?: GenreCreateNestedManyWithoutMangaInput
    background: BackgroundCreateNestedOneWithoutMangaInput
    Chapter?: ChapterCreateNestedManyWithoutMangaInput
    relatedFrom?: RelatedCreateNestedManyWithoutMangaInput
    relatedTo?: RelatedCreateNestedManyWithoutRelatedMangaInput
    Bookmark?: BookmarkCreateNestedManyWithoutMangaInput
  }

  export type MangaUncheckedCreateWithoutAgeRestrictionInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    coverId: number
    itemsCountId: number
    backgroundId: number
    genres?: GenreUncheckedCreateNestedManyWithoutMangaInput
    Chapter?: ChapterUncheckedCreateNestedManyWithoutMangaInput
    relatedFrom?: RelatedUncheckedCreateNestedManyWithoutMangaInput
    relatedTo?: RelatedUncheckedCreateNestedManyWithoutRelatedMangaInput
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutMangaInput
  }

  export type MangaCreateOrConnectWithoutAgeRestrictionInput = {
    where: MangaWhereUniqueInput
    create: XOR<MangaCreateWithoutAgeRestrictionInput, MangaUncheckedCreateWithoutAgeRestrictionInput>
  }

  export type MangaCreateManyAgeRestrictionInputEnvelope = {
    data: MangaCreateManyAgeRestrictionInput | MangaCreateManyAgeRestrictionInput[]
    skipDuplicates?: boolean
  }

  export type AnimeCreateWithoutAgeRestrictionInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: AnimeCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    cover: CoverCreateNestedOneWithoutAnimeInput
    genres?: GenreCreateNestedManyWithoutAnimeInput
    background: BackgroundCreateNestedOneWithoutAnimeInput
    Episode?: EpisodeCreateNestedManyWithoutAnimeInput
    relatedFrom?: RelatedCreateNestedManyWithoutAnimeInput
    relatedTo?: RelatedCreateNestedManyWithoutRelatedAnimeInput
    Bookmark?: BookmarkCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateWithoutAgeRestrictionInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: AnimeCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    coverId: number
    backgroundId: number
    genres?: GenreUncheckedCreateNestedManyWithoutAnimeInput
    Episode?: EpisodeUncheckedCreateNestedManyWithoutAnimeInput
    relatedFrom?: RelatedUncheckedCreateNestedManyWithoutAnimeInput
    relatedTo?: RelatedUncheckedCreateNestedManyWithoutRelatedAnimeInput
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeCreateOrConnectWithoutAgeRestrictionInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutAgeRestrictionInput, AnimeUncheckedCreateWithoutAgeRestrictionInput>
  }

  export type AnimeCreateManyAgeRestrictionInputEnvelope = {
    data: AnimeCreateManyAgeRestrictionInput | AnimeCreateManyAgeRestrictionInput[]
    skipDuplicates?: boolean
  }

  export type MangaUpsertWithWhereUniqueWithoutAgeRestrictionInput = {
    where: MangaWhereUniqueInput
    update: XOR<MangaUpdateWithoutAgeRestrictionInput, MangaUncheckedUpdateWithoutAgeRestrictionInput>
    create: XOR<MangaCreateWithoutAgeRestrictionInput, MangaUncheckedCreateWithoutAgeRestrictionInput>
  }

  export type MangaUpdateWithWhereUniqueWithoutAgeRestrictionInput = {
    where: MangaWhereUniqueInput
    data: XOR<MangaUpdateWithoutAgeRestrictionInput, MangaUncheckedUpdateWithoutAgeRestrictionInput>
  }

  export type MangaUpdateManyWithWhereWithoutAgeRestrictionInput = {
    where: MangaScalarWhereInput
    data: XOR<MangaUpdateManyMutationInput, MangaUncheckedUpdateManyWithoutAgeRestrictionInput>
  }

  export type AnimeUpsertWithWhereUniqueWithoutAgeRestrictionInput = {
    where: AnimeWhereUniqueInput
    update: XOR<AnimeUpdateWithoutAgeRestrictionInput, AnimeUncheckedUpdateWithoutAgeRestrictionInput>
    create: XOR<AnimeCreateWithoutAgeRestrictionInput, AnimeUncheckedCreateWithoutAgeRestrictionInput>
  }

  export type AnimeUpdateWithWhereUniqueWithoutAgeRestrictionInput = {
    where: AnimeWhereUniqueInput
    data: XOR<AnimeUpdateWithoutAgeRestrictionInput, AnimeUncheckedUpdateWithoutAgeRestrictionInput>
  }

  export type AnimeUpdateManyWithWhereWithoutAgeRestrictionInput = {
    where: AnimeScalarWhereInput
    data: XOR<AnimeUpdateManyMutationInput, AnimeUncheckedUpdateManyWithoutAgeRestrictionInput>
  }

  export type MangaCreateWithoutGenresInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    cover: CoverCreateNestedOneWithoutMangaInput
    ageRestriction: AgeRestrictionCreateNestedOneWithoutMangaInput
    items_count: ItemsCountCreateNestedOneWithoutMangaInput
    background: BackgroundCreateNestedOneWithoutMangaInput
    Chapter?: ChapterCreateNestedManyWithoutMangaInput
    relatedFrom?: RelatedCreateNestedManyWithoutMangaInput
    relatedTo?: RelatedCreateNestedManyWithoutRelatedMangaInput
    Bookmark?: BookmarkCreateNestedManyWithoutMangaInput
  }

  export type MangaUncheckedCreateWithoutGenresInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    coverId: number
    ageRestrictionId: number
    itemsCountId: number
    backgroundId: number
    Chapter?: ChapterUncheckedCreateNestedManyWithoutMangaInput
    relatedFrom?: RelatedUncheckedCreateNestedManyWithoutMangaInput
    relatedTo?: RelatedUncheckedCreateNestedManyWithoutRelatedMangaInput
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutMangaInput
  }

  export type MangaCreateOrConnectWithoutGenresInput = {
    where: MangaWhereUniqueInput
    create: XOR<MangaCreateWithoutGenresInput, MangaUncheckedCreateWithoutGenresInput>
  }

  export type AnimeCreateWithoutGenresInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: AnimeCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    cover: CoverCreateNestedOneWithoutAnimeInput
    ageRestriction: AgeRestrictionCreateNestedOneWithoutAnimeInput
    background: BackgroundCreateNestedOneWithoutAnimeInput
    Episode?: EpisodeCreateNestedManyWithoutAnimeInput
    relatedFrom?: RelatedCreateNestedManyWithoutAnimeInput
    relatedTo?: RelatedCreateNestedManyWithoutRelatedAnimeInput
    Bookmark?: BookmarkCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateWithoutGenresInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: AnimeCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    coverId: number
    ageRestrictionId: number
    backgroundId: number
    Episode?: EpisodeUncheckedCreateNestedManyWithoutAnimeInput
    relatedFrom?: RelatedUncheckedCreateNestedManyWithoutAnimeInput
    relatedTo?: RelatedUncheckedCreateNestedManyWithoutRelatedAnimeInput
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeCreateOrConnectWithoutGenresInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutGenresInput, AnimeUncheckedCreateWithoutGenresInput>
  }

  export type MangaUpsertWithWhereUniqueWithoutGenresInput = {
    where: MangaWhereUniqueInput
    update: XOR<MangaUpdateWithoutGenresInput, MangaUncheckedUpdateWithoutGenresInput>
    create: XOR<MangaCreateWithoutGenresInput, MangaUncheckedCreateWithoutGenresInput>
  }

  export type MangaUpdateWithWhereUniqueWithoutGenresInput = {
    where: MangaWhereUniqueInput
    data: XOR<MangaUpdateWithoutGenresInput, MangaUncheckedUpdateWithoutGenresInput>
  }

  export type MangaUpdateManyWithWhereWithoutGenresInput = {
    where: MangaScalarWhereInput
    data: XOR<MangaUpdateManyMutationInput, MangaUncheckedUpdateManyWithoutGenresInput>
  }

  export type AnimeUpsertWithWhereUniqueWithoutGenresInput = {
    where: AnimeWhereUniqueInput
    update: XOR<AnimeUpdateWithoutGenresInput, AnimeUncheckedUpdateWithoutGenresInput>
    create: XOR<AnimeCreateWithoutGenresInput, AnimeUncheckedCreateWithoutGenresInput>
  }

  export type AnimeUpdateWithWhereUniqueWithoutGenresInput = {
    where: AnimeWhereUniqueInput
    data: XOR<AnimeUpdateWithoutGenresInput, AnimeUncheckedUpdateWithoutGenresInput>
  }

  export type AnimeUpdateManyWithWhereWithoutGenresInput = {
    where: AnimeScalarWhereInput
    data: XOR<AnimeUpdateManyMutationInput, AnimeUncheckedUpdateManyWithoutGenresInput>
  }

  export type AnimeCreateWithoutRelatedFromInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: AnimeCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    cover: CoverCreateNestedOneWithoutAnimeInput
    ageRestriction: AgeRestrictionCreateNestedOneWithoutAnimeInput
    genres?: GenreCreateNestedManyWithoutAnimeInput
    background: BackgroundCreateNestedOneWithoutAnimeInput
    Episode?: EpisodeCreateNestedManyWithoutAnimeInput
    relatedTo?: RelatedCreateNestedManyWithoutRelatedAnimeInput
    Bookmark?: BookmarkCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateWithoutRelatedFromInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: AnimeCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    coverId: number
    ageRestrictionId: number
    backgroundId: number
    genres?: GenreUncheckedCreateNestedManyWithoutAnimeInput
    Episode?: EpisodeUncheckedCreateNestedManyWithoutAnimeInput
    relatedTo?: RelatedUncheckedCreateNestedManyWithoutRelatedAnimeInput
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeCreateOrConnectWithoutRelatedFromInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutRelatedFromInput, AnimeUncheckedCreateWithoutRelatedFromInput>
  }

  export type MangaCreateWithoutRelatedFromInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    cover: CoverCreateNestedOneWithoutMangaInput
    ageRestriction: AgeRestrictionCreateNestedOneWithoutMangaInput
    items_count: ItemsCountCreateNestedOneWithoutMangaInput
    genres?: GenreCreateNestedManyWithoutMangaInput
    background: BackgroundCreateNestedOneWithoutMangaInput
    Chapter?: ChapterCreateNestedManyWithoutMangaInput
    relatedTo?: RelatedCreateNestedManyWithoutRelatedMangaInput
    Bookmark?: BookmarkCreateNestedManyWithoutMangaInput
  }

  export type MangaUncheckedCreateWithoutRelatedFromInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    coverId: number
    ageRestrictionId: number
    itemsCountId: number
    backgroundId: number
    genres?: GenreUncheckedCreateNestedManyWithoutMangaInput
    Chapter?: ChapterUncheckedCreateNestedManyWithoutMangaInput
    relatedTo?: RelatedUncheckedCreateNestedManyWithoutRelatedMangaInput
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutMangaInput
  }

  export type MangaCreateOrConnectWithoutRelatedFromInput = {
    where: MangaWhereUniqueInput
    create: XOR<MangaCreateWithoutRelatedFromInput, MangaUncheckedCreateWithoutRelatedFromInput>
  }

  export type AnimeCreateWithoutRelatedToInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: AnimeCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    cover: CoverCreateNestedOneWithoutAnimeInput
    ageRestriction: AgeRestrictionCreateNestedOneWithoutAnimeInput
    genres?: GenreCreateNestedManyWithoutAnimeInput
    background: BackgroundCreateNestedOneWithoutAnimeInput
    Episode?: EpisodeCreateNestedManyWithoutAnimeInput
    relatedFrom?: RelatedCreateNestedManyWithoutAnimeInput
    Bookmark?: BookmarkCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateWithoutRelatedToInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: AnimeCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    coverId: number
    ageRestrictionId: number
    backgroundId: number
    genres?: GenreUncheckedCreateNestedManyWithoutAnimeInput
    Episode?: EpisodeUncheckedCreateNestedManyWithoutAnimeInput
    relatedFrom?: RelatedUncheckedCreateNestedManyWithoutAnimeInput
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeCreateOrConnectWithoutRelatedToInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutRelatedToInput, AnimeUncheckedCreateWithoutRelatedToInput>
  }

  export type MangaCreateWithoutRelatedToInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    cover: CoverCreateNestedOneWithoutMangaInput
    ageRestriction: AgeRestrictionCreateNestedOneWithoutMangaInput
    items_count: ItemsCountCreateNestedOneWithoutMangaInput
    genres?: GenreCreateNestedManyWithoutMangaInput
    background: BackgroundCreateNestedOneWithoutMangaInput
    Chapter?: ChapterCreateNestedManyWithoutMangaInput
    relatedFrom?: RelatedCreateNestedManyWithoutMangaInput
    Bookmark?: BookmarkCreateNestedManyWithoutMangaInput
  }

  export type MangaUncheckedCreateWithoutRelatedToInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    coverId: number
    ageRestrictionId: number
    itemsCountId: number
    backgroundId: number
    genres?: GenreUncheckedCreateNestedManyWithoutMangaInput
    Chapter?: ChapterUncheckedCreateNestedManyWithoutMangaInput
    relatedFrom?: RelatedUncheckedCreateNestedManyWithoutMangaInput
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutMangaInput
  }

  export type MangaCreateOrConnectWithoutRelatedToInput = {
    where: MangaWhereUniqueInput
    create: XOR<MangaCreateWithoutRelatedToInput, MangaUncheckedCreateWithoutRelatedToInput>
  }

  export type AnimeUpsertWithoutRelatedFromInput = {
    update: XOR<AnimeUpdateWithoutRelatedFromInput, AnimeUncheckedUpdateWithoutRelatedFromInput>
    create: XOR<AnimeCreateWithoutRelatedFromInput, AnimeUncheckedCreateWithoutRelatedFromInput>
    where?: AnimeWhereInput
  }

  export type AnimeUpdateToOneWithWhereWithoutRelatedFromInput = {
    where?: AnimeWhereInput
    data: XOR<AnimeUpdateWithoutRelatedFromInput, AnimeUncheckedUpdateWithoutRelatedFromInput>
  }

  export type AnimeUpdateWithoutRelatedFromInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    cover?: CoverUpdateOneRequiredWithoutAnimeNestedInput
    ageRestriction?: AgeRestrictionUpdateOneRequiredWithoutAnimeNestedInput
    genres?: GenreUpdateManyWithoutAnimeNestedInput
    background?: BackgroundUpdateOneRequiredWithoutAnimeNestedInput
    Episode?: EpisodeUpdateManyWithoutAnimeNestedInput
    relatedTo?: RelatedUpdateManyWithoutRelatedAnimeNestedInput
    Bookmark?: BookmarkUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutRelatedFromInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    coverId?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
    genres?: GenreUncheckedUpdateManyWithoutAnimeNestedInput
    Episode?: EpisodeUncheckedUpdateManyWithoutAnimeNestedInput
    relatedTo?: RelatedUncheckedUpdateManyWithoutRelatedAnimeNestedInput
    Bookmark?: BookmarkUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type MangaUpsertWithoutRelatedFromInput = {
    update: XOR<MangaUpdateWithoutRelatedFromInput, MangaUncheckedUpdateWithoutRelatedFromInput>
    create: XOR<MangaCreateWithoutRelatedFromInput, MangaUncheckedCreateWithoutRelatedFromInput>
    where?: MangaWhereInput
  }

  export type MangaUpdateToOneWithWhereWithoutRelatedFromInput = {
    where?: MangaWhereInput
    data: XOR<MangaUpdateWithoutRelatedFromInput, MangaUncheckedUpdateWithoutRelatedFromInput>
  }

  export type MangaUpdateWithoutRelatedFromInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    cover?: CoverUpdateOneRequiredWithoutMangaNestedInput
    ageRestriction?: AgeRestrictionUpdateOneRequiredWithoutMangaNestedInput
    items_count?: ItemsCountUpdateOneRequiredWithoutMangaNestedInput
    genres?: GenreUpdateManyWithoutMangaNestedInput
    background?: BackgroundUpdateOneRequiredWithoutMangaNestedInput
    Chapter?: ChapterUpdateManyWithoutMangaNestedInput
    relatedTo?: RelatedUpdateManyWithoutRelatedMangaNestedInput
    Bookmark?: BookmarkUpdateManyWithoutMangaNestedInput
  }

  export type MangaUncheckedUpdateWithoutRelatedFromInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    coverId?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    itemsCountId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
    genres?: GenreUncheckedUpdateManyWithoutMangaNestedInput
    Chapter?: ChapterUncheckedUpdateManyWithoutMangaNestedInput
    relatedTo?: RelatedUncheckedUpdateManyWithoutRelatedMangaNestedInput
    Bookmark?: BookmarkUncheckedUpdateManyWithoutMangaNestedInput
  }

  export type AnimeUpsertWithoutRelatedToInput = {
    update: XOR<AnimeUpdateWithoutRelatedToInput, AnimeUncheckedUpdateWithoutRelatedToInput>
    create: XOR<AnimeCreateWithoutRelatedToInput, AnimeUncheckedCreateWithoutRelatedToInput>
    where?: AnimeWhereInput
  }

  export type AnimeUpdateToOneWithWhereWithoutRelatedToInput = {
    where?: AnimeWhereInput
    data: XOR<AnimeUpdateWithoutRelatedToInput, AnimeUncheckedUpdateWithoutRelatedToInput>
  }

  export type AnimeUpdateWithoutRelatedToInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    cover?: CoverUpdateOneRequiredWithoutAnimeNestedInput
    ageRestriction?: AgeRestrictionUpdateOneRequiredWithoutAnimeNestedInput
    genres?: GenreUpdateManyWithoutAnimeNestedInput
    background?: BackgroundUpdateOneRequiredWithoutAnimeNestedInput
    Episode?: EpisodeUpdateManyWithoutAnimeNestedInput
    relatedFrom?: RelatedUpdateManyWithoutAnimeNestedInput
    Bookmark?: BookmarkUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutRelatedToInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    coverId?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
    genres?: GenreUncheckedUpdateManyWithoutAnimeNestedInput
    Episode?: EpisodeUncheckedUpdateManyWithoutAnimeNestedInput
    relatedFrom?: RelatedUncheckedUpdateManyWithoutAnimeNestedInput
    Bookmark?: BookmarkUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type MangaUpsertWithoutRelatedToInput = {
    update: XOR<MangaUpdateWithoutRelatedToInput, MangaUncheckedUpdateWithoutRelatedToInput>
    create: XOR<MangaCreateWithoutRelatedToInput, MangaUncheckedCreateWithoutRelatedToInput>
    where?: MangaWhereInput
  }

  export type MangaUpdateToOneWithWhereWithoutRelatedToInput = {
    where?: MangaWhereInput
    data: XOR<MangaUpdateWithoutRelatedToInput, MangaUncheckedUpdateWithoutRelatedToInput>
  }

  export type MangaUpdateWithoutRelatedToInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    cover?: CoverUpdateOneRequiredWithoutMangaNestedInput
    ageRestriction?: AgeRestrictionUpdateOneRequiredWithoutMangaNestedInput
    items_count?: ItemsCountUpdateOneRequiredWithoutMangaNestedInput
    genres?: GenreUpdateManyWithoutMangaNestedInput
    background?: BackgroundUpdateOneRequiredWithoutMangaNestedInput
    Chapter?: ChapterUpdateManyWithoutMangaNestedInput
    relatedFrom?: RelatedUpdateManyWithoutMangaNestedInput
    Bookmark?: BookmarkUpdateManyWithoutMangaNestedInput
  }

  export type MangaUncheckedUpdateWithoutRelatedToInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    coverId?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    itemsCountId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
    genres?: GenreUncheckedUpdateManyWithoutMangaNestedInput
    Chapter?: ChapterUncheckedUpdateManyWithoutMangaNestedInput
    relatedFrom?: RelatedUncheckedUpdateManyWithoutMangaNestedInput
    Bookmark?: BookmarkUncheckedUpdateManyWithoutMangaNestedInput
  }

  export type MangaCreateWithoutBackgroundInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    cover: CoverCreateNestedOneWithoutMangaInput
    ageRestriction: AgeRestrictionCreateNestedOneWithoutMangaInput
    items_count: ItemsCountCreateNestedOneWithoutMangaInput
    genres?: GenreCreateNestedManyWithoutMangaInput
    Chapter?: ChapterCreateNestedManyWithoutMangaInput
    relatedFrom?: RelatedCreateNestedManyWithoutMangaInput
    relatedTo?: RelatedCreateNestedManyWithoutRelatedMangaInput
    Bookmark?: BookmarkCreateNestedManyWithoutMangaInput
  }

  export type MangaUncheckedCreateWithoutBackgroundInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    coverId: number
    ageRestrictionId: number
    itemsCountId: number
    genres?: GenreUncheckedCreateNestedManyWithoutMangaInput
    Chapter?: ChapterUncheckedCreateNestedManyWithoutMangaInput
    relatedFrom?: RelatedUncheckedCreateNestedManyWithoutMangaInput
    relatedTo?: RelatedUncheckedCreateNestedManyWithoutRelatedMangaInput
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutMangaInput
  }

  export type MangaCreateOrConnectWithoutBackgroundInput = {
    where: MangaWhereUniqueInput
    create: XOR<MangaCreateWithoutBackgroundInput, MangaUncheckedCreateWithoutBackgroundInput>
  }

  export type MangaCreateManyBackgroundInputEnvelope = {
    data: MangaCreateManyBackgroundInput | MangaCreateManyBackgroundInput[]
    skipDuplicates?: boolean
  }

  export type AnimeCreateWithoutBackgroundInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: AnimeCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    cover: CoverCreateNestedOneWithoutAnimeInput
    ageRestriction: AgeRestrictionCreateNestedOneWithoutAnimeInput
    genres?: GenreCreateNestedManyWithoutAnimeInput
    Episode?: EpisodeCreateNestedManyWithoutAnimeInput
    relatedFrom?: RelatedCreateNestedManyWithoutAnimeInput
    relatedTo?: RelatedCreateNestedManyWithoutRelatedAnimeInput
    Bookmark?: BookmarkCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateWithoutBackgroundInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: AnimeCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    coverId: number
    ageRestrictionId: number
    genres?: GenreUncheckedCreateNestedManyWithoutAnimeInput
    Episode?: EpisodeUncheckedCreateNestedManyWithoutAnimeInput
    relatedFrom?: RelatedUncheckedCreateNestedManyWithoutAnimeInput
    relatedTo?: RelatedUncheckedCreateNestedManyWithoutRelatedAnimeInput
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeCreateOrConnectWithoutBackgroundInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutBackgroundInput, AnimeUncheckedCreateWithoutBackgroundInput>
  }

  export type AnimeCreateManyBackgroundInputEnvelope = {
    data: AnimeCreateManyBackgroundInput | AnimeCreateManyBackgroundInput[]
    skipDuplicates?: boolean
  }

  export type MangaUpsertWithWhereUniqueWithoutBackgroundInput = {
    where: MangaWhereUniqueInput
    update: XOR<MangaUpdateWithoutBackgroundInput, MangaUncheckedUpdateWithoutBackgroundInput>
    create: XOR<MangaCreateWithoutBackgroundInput, MangaUncheckedCreateWithoutBackgroundInput>
  }

  export type MangaUpdateWithWhereUniqueWithoutBackgroundInput = {
    where: MangaWhereUniqueInput
    data: XOR<MangaUpdateWithoutBackgroundInput, MangaUncheckedUpdateWithoutBackgroundInput>
  }

  export type MangaUpdateManyWithWhereWithoutBackgroundInput = {
    where: MangaScalarWhereInput
    data: XOR<MangaUpdateManyMutationInput, MangaUncheckedUpdateManyWithoutBackgroundInput>
  }

  export type AnimeUpsertWithWhereUniqueWithoutBackgroundInput = {
    where: AnimeWhereUniqueInput
    update: XOR<AnimeUpdateWithoutBackgroundInput, AnimeUncheckedUpdateWithoutBackgroundInput>
    create: XOR<AnimeCreateWithoutBackgroundInput, AnimeUncheckedCreateWithoutBackgroundInput>
  }

  export type AnimeUpdateWithWhereUniqueWithoutBackgroundInput = {
    where: AnimeWhereUniqueInput
    data: XOR<AnimeUpdateWithoutBackgroundInput, AnimeUncheckedUpdateWithoutBackgroundInput>
  }

  export type AnimeUpdateManyWithWhereWithoutBackgroundInput = {
    where: AnimeScalarWhereInput
    data: XOR<AnimeUpdateManyMutationInput, AnimeUncheckedUpdateManyWithoutBackgroundInput>
  }

  export type CoverCreateWithoutAnimeInput = {
    thumbnail: string
    default: string
    Manga?: MangaCreateNestedManyWithoutCoverInput
  }

  export type CoverUncheckedCreateWithoutAnimeInput = {
    id?: number
    thumbnail: string
    default: string
    Manga?: MangaUncheckedCreateNestedManyWithoutCoverInput
  }

  export type CoverCreateOrConnectWithoutAnimeInput = {
    where: CoverWhereUniqueInput
    create: XOR<CoverCreateWithoutAnimeInput, CoverUncheckedCreateWithoutAnimeInput>
  }

  export type AgeRestrictionCreateWithoutAnimeInput = {
    id: number
    label: string
    site_ids?: AgeRestrictionCreatesite_idsInput | number[]
    Manga?: MangaCreateNestedManyWithoutAgeRestrictionInput
  }

  export type AgeRestrictionUncheckedCreateWithoutAnimeInput = {
    id: number
    label: string
    site_ids?: AgeRestrictionCreatesite_idsInput | number[]
    Manga?: MangaUncheckedCreateNestedManyWithoutAgeRestrictionInput
  }

  export type AgeRestrictionCreateOrConnectWithoutAnimeInput = {
    where: AgeRestrictionWhereUniqueInput
    create: XOR<AgeRestrictionCreateWithoutAnimeInput, AgeRestrictionUncheckedCreateWithoutAnimeInput>
  }

  export type GenreCreateWithoutAnimeInput = {
    id: number
    adult?: boolean
    name: string
    site_ids?: GenreCreatesite_idsInput | number[]
    Manga?: MangaCreateNestedManyWithoutGenresInput
  }

  export type GenreUncheckedCreateWithoutAnimeInput = {
    id: number
    adult?: boolean
    name: string
    site_ids?: GenreCreatesite_idsInput | number[]
    Manga?: MangaUncheckedCreateNestedManyWithoutGenresInput
  }

  export type GenreCreateOrConnectWithoutAnimeInput = {
    where: GenreWhereUniqueInput
    create: XOR<GenreCreateWithoutAnimeInput, GenreUncheckedCreateWithoutAnimeInput>
  }

  export type BackgroundCreateWithoutAnimeInput = {
    url: string
    Manga?: MangaCreateNestedManyWithoutBackgroundInput
  }

  export type BackgroundUncheckedCreateWithoutAnimeInput = {
    id?: number
    url: string
    Manga?: MangaUncheckedCreateNestedManyWithoutBackgroundInput
  }

  export type BackgroundCreateOrConnectWithoutAnimeInput = {
    where: BackgroundWhereUniqueInput
    create: XOR<BackgroundCreateWithoutAnimeInput, BackgroundUncheckedCreateWithoutAnimeInput>
  }

  export type EpisodeCreateWithoutAnimeInput = {
    id: number
    name?: string | null
    number: string
    number_secondary: string
    item_number: number
    source?: string | null
    endingLength?: number | null
    Bookmark?: BookmarkCreateNestedManyWithoutLastWatchInput
  }

  export type EpisodeUncheckedCreateWithoutAnimeInput = {
    id: number
    name?: string | null
    number: string
    number_secondary: string
    item_number: number
    source?: string | null
    endingLength?: number | null
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutLastWatchInput
  }

  export type EpisodeCreateOrConnectWithoutAnimeInput = {
    where: EpisodeWhereUniqueInput
    create: XOR<EpisodeCreateWithoutAnimeInput, EpisodeUncheckedCreateWithoutAnimeInput>
  }

  export type EpisodeCreateManyAnimeInputEnvelope = {
    data: EpisodeCreateManyAnimeInput | EpisodeCreateManyAnimeInput[]
    skipDuplicates?: boolean
  }

  export type RelatedCreateWithoutAnimeInput = {
    reason: $Enums.RelatedReason
    manga?: MangaCreateNestedOneWithoutRelatedFromInput
    relatedAnime?: AnimeCreateNestedOneWithoutRelatedToInput
    relatedManga?: MangaCreateNestedOneWithoutRelatedToInput
  }

  export type RelatedUncheckedCreateWithoutAnimeInput = {
    id?: number
    reason: $Enums.RelatedReason
    manga_slug?: string | null
    relatedAnimeSlug?: string | null
    relatedMangaSlug?: string | null
  }

  export type RelatedCreateOrConnectWithoutAnimeInput = {
    where: RelatedWhereUniqueInput
    create: XOR<RelatedCreateWithoutAnimeInput, RelatedUncheckedCreateWithoutAnimeInput>
  }

  export type RelatedCreateManyAnimeInputEnvelope = {
    data: RelatedCreateManyAnimeInput | RelatedCreateManyAnimeInput[]
    skipDuplicates?: boolean
  }

  export type RelatedCreateWithoutRelatedAnimeInput = {
    reason: $Enums.RelatedReason
    anime?: AnimeCreateNestedOneWithoutRelatedFromInput
    manga?: MangaCreateNestedOneWithoutRelatedFromInput
    relatedManga?: MangaCreateNestedOneWithoutRelatedToInput
  }

  export type RelatedUncheckedCreateWithoutRelatedAnimeInput = {
    id?: number
    reason: $Enums.RelatedReason
    anime_slug?: string | null
    manga_slug?: string | null
    relatedMangaSlug?: string | null
  }

  export type RelatedCreateOrConnectWithoutRelatedAnimeInput = {
    where: RelatedWhereUniqueInput
    create: XOR<RelatedCreateWithoutRelatedAnimeInput, RelatedUncheckedCreateWithoutRelatedAnimeInput>
  }

  export type RelatedCreateManyRelatedAnimeInputEnvelope = {
    data: RelatedCreateManyRelatedAnimeInput | RelatedCreateManyRelatedAnimeInput[]
    skipDuplicates?: boolean
  }

  export type BookmarkCreateWithoutAnimeInput = {
    mark: $Enums.BookmarkName
    type: $Enums.ModelName
    addedAt?: Date | string
    updatedAt?: Date | string
    lastRead?: ChapterCreateNestedOneWithoutBookmarkInput
    lastWatch?: EpisodeCreateNestedOneWithoutBookmarkInput
    manga?: MangaCreateNestedOneWithoutBookmarkInput
    user: UserCreateNestedOneWithoutBookmarkInput
  }

  export type BookmarkUncheckedCreateWithoutAnimeInput = {
    id?: number
    userId: string
    mark: $Enums.BookmarkName
    type: $Enums.ModelName
    addedAt?: Date | string
    updatedAt?: Date | string
    mangaSlug_url?: string | null
    chapterId?: number | null
    episodeId?: number | null
  }

  export type BookmarkCreateOrConnectWithoutAnimeInput = {
    where: BookmarkWhereUniqueInput
    create: XOR<BookmarkCreateWithoutAnimeInput, BookmarkUncheckedCreateWithoutAnimeInput>
  }

  export type BookmarkCreateManyAnimeInputEnvelope = {
    data: BookmarkCreateManyAnimeInput | BookmarkCreateManyAnimeInput[]
    skipDuplicates?: boolean
  }

  export type CoverUpsertWithoutAnimeInput = {
    update: XOR<CoverUpdateWithoutAnimeInput, CoverUncheckedUpdateWithoutAnimeInput>
    create: XOR<CoverCreateWithoutAnimeInput, CoverUncheckedCreateWithoutAnimeInput>
    where?: CoverWhereInput
  }

  export type CoverUpdateToOneWithWhereWithoutAnimeInput = {
    where?: CoverWhereInput
    data: XOR<CoverUpdateWithoutAnimeInput, CoverUncheckedUpdateWithoutAnimeInput>
  }

  export type CoverUpdateWithoutAnimeInput = {
    thumbnail?: StringFieldUpdateOperationsInput | string
    default?: StringFieldUpdateOperationsInput | string
    Manga?: MangaUpdateManyWithoutCoverNestedInput
  }

  export type CoverUncheckedUpdateWithoutAnimeInput = {
    id?: IntFieldUpdateOperationsInput | number
    thumbnail?: StringFieldUpdateOperationsInput | string
    default?: StringFieldUpdateOperationsInput | string
    Manga?: MangaUncheckedUpdateManyWithoutCoverNestedInput
  }

  export type AgeRestrictionUpsertWithoutAnimeInput = {
    update: XOR<AgeRestrictionUpdateWithoutAnimeInput, AgeRestrictionUncheckedUpdateWithoutAnimeInput>
    create: XOR<AgeRestrictionCreateWithoutAnimeInput, AgeRestrictionUncheckedCreateWithoutAnimeInput>
    where?: AgeRestrictionWhereInput
  }

  export type AgeRestrictionUpdateToOneWithWhereWithoutAnimeInput = {
    where?: AgeRestrictionWhereInput
    data: XOR<AgeRestrictionUpdateWithoutAnimeInput, AgeRestrictionUncheckedUpdateWithoutAnimeInput>
  }

  export type AgeRestrictionUpdateWithoutAnimeInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    site_ids?: AgeRestrictionUpdatesite_idsInput | number[]
    Manga?: MangaUpdateManyWithoutAgeRestrictionNestedInput
  }

  export type AgeRestrictionUncheckedUpdateWithoutAnimeInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    site_ids?: AgeRestrictionUpdatesite_idsInput | number[]
    Manga?: MangaUncheckedUpdateManyWithoutAgeRestrictionNestedInput
  }

  export type GenreUpsertWithWhereUniqueWithoutAnimeInput = {
    where: GenreWhereUniqueInput
    update: XOR<GenreUpdateWithoutAnimeInput, GenreUncheckedUpdateWithoutAnimeInput>
    create: XOR<GenreCreateWithoutAnimeInput, GenreUncheckedCreateWithoutAnimeInput>
  }

  export type GenreUpdateWithWhereUniqueWithoutAnimeInput = {
    where: GenreWhereUniqueInput
    data: XOR<GenreUpdateWithoutAnimeInput, GenreUncheckedUpdateWithoutAnimeInput>
  }

  export type GenreUpdateManyWithWhereWithoutAnimeInput = {
    where: GenreScalarWhereInput
    data: XOR<GenreUpdateManyMutationInput, GenreUncheckedUpdateManyWithoutAnimeInput>
  }

  export type GenreScalarWhereInput = {
    AND?: GenreScalarWhereInput | GenreScalarWhereInput[]
    OR?: GenreScalarWhereInput[]
    NOT?: GenreScalarWhereInput | GenreScalarWhereInput[]
    id?: IntFilter<"Genre"> | number
    adult?: BoolFilter<"Genre"> | boolean
    name?: StringFilter<"Genre"> | string
    site_ids?: IntNullableListFilter<"Genre">
  }

  export type BackgroundUpsertWithoutAnimeInput = {
    update: XOR<BackgroundUpdateWithoutAnimeInput, BackgroundUncheckedUpdateWithoutAnimeInput>
    create: XOR<BackgroundCreateWithoutAnimeInput, BackgroundUncheckedCreateWithoutAnimeInput>
    where?: BackgroundWhereInput
  }

  export type BackgroundUpdateToOneWithWhereWithoutAnimeInput = {
    where?: BackgroundWhereInput
    data: XOR<BackgroundUpdateWithoutAnimeInput, BackgroundUncheckedUpdateWithoutAnimeInput>
  }

  export type BackgroundUpdateWithoutAnimeInput = {
    url?: StringFieldUpdateOperationsInput | string
    Manga?: MangaUpdateManyWithoutBackgroundNestedInput
  }

  export type BackgroundUncheckedUpdateWithoutAnimeInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    Manga?: MangaUncheckedUpdateManyWithoutBackgroundNestedInput
  }

  export type EpisodeUpsertWithWhereUniqueWithoutAnimeInput = {
    where: EpisodeWhereUniqueInput
    update: XOR<EpisodeUpdateWithoutAnimeInput, EpisodeUncheckedUpdateWithoutAnimeInput>
    create: XOR<EpisodeCreateWithoutAnimeInput, EpisodeUncheckedCreateWithoutAnimeInput>
  }

  export type EpisodeUpdateWithWhereUniqueWithoutAnimeInput = {
    where: EpisodeWhereUniqueInput
    data: XOR<EpisodeUpdateWithoutAnimeInput, EpisodeUncheckedUpdateWithoutAnimeInput>
  }

  export type EpisodeUpdateManyWithWhereWithoutAnimeInput = {
    where: EpisodeScalarWhereInput
    data: XOR<EpisodeUpdateManyMutationInput, EpisodeUncheckedUpdateManyWithoutAnimeInput>
  }

  export type EpisodeScalarWhereInput = {
    AND?: EpisodeScalarWhereInput | EpisodeScalarWhereInput[]
    OR?: EpisodeScalarWhereInput[]
    NOT?: EpisodeScalarWhereInput | EpisodeScalarWhereInput[]
    id?: IntFilter<"Episode"> | number
    name?: StringNullableFilter<"Episode"> | string | null
    number?: StringFilter<"Episode"> | string
    number_secondary?: StringFilter<"Episode"> | string
    slug_url?: StringFilter<"Episode"> | string
    item_number?: IntFilter<"Episode"> | number
    source?: StringNullableFilter<"Episode"> | string | null
    endingLength?: IntNullableFilter<"Episode"> | number | null
  }

  export type RelatedUpsertWithWhereUniqueWithoutAnimeInput = {
    where: RelatedWhereUniqueInput
    update: XOR<RelatedUpdateWithoutAnimeInput, RelatedUncheckedUpdateWithoutAnimeInput>
    create: XOR<RelatedCreateWithoutAnimeInput, RelatedUncheckedCreateWithoutAnimeInput>
  }

  export type RelatedUpdateWithWhereUniqueWithoutAnimeInput = {
    where: RelatedWhereUniqueInput
    data: XOR<RelatedUpdateWithoutAnimeInput, RelatedUncheckedUpdateWithoutAnimeInput>
  }

  export type RelatedUpdateManyWithWhereWithoutAnimeInput = {
    where: RelatedScalarWhereInput
    data: XOR<RelatedUpdateManyMutationInput, RelatedUncheckedUpdateManyWithoutAnimeInput>
  }

  export type RelatedScalarWhereInput = {
    AND?: RelatedScalarWhereInput | RelatedScalarWhereInput[]
    OR?: RelatedScalarWhereInput[]
    NOT?: RelatedScalarWhereInput | RelatedScalarWhereInput[]
    id?: IntFilter<"Related"> | number
    reason?: EnumRelatedReasonFilter<"Related"> | $Enums.RelatedReason
    anime_slug?: StringNullableFilter<"Related"> | string | null
    manga_slug?: StringNullableFilter<"Related"> | string | null
    relatedAnimeSlug?: StringNullableFilter<"Related"> | string | null
    relatedMangaSlug?: StringNullableFilter<"Related"> | string | null
  }

  export type RelatedUpsertWithWhereUniqueWithoutRelatedAnimeInput = {
    where: RelatedWhereUniqueInput
    update: XOR<RelatedUpdateWithoutRelatedAnimeInput, RelatedUncheckedUpdateWithoutRelatedAnimeInput>
    create: XOR<RelatedCreateWithoutRelatedAnimeInput, RelatedUncheckedCreateWithoutRelatedAnimeInput>
  }

  export type RelatedUpdateWithWhereUniqueWithoutRelatedAnimeInput = {
    where: RelatedWhereUniqueInput
    data: XOR<RelatedUpdateWithoutRelatedAnimeInput, RelatedUncheckedUpdateWithoutRelatedAnimeInput>
  }

  export type RelatedUpdateManyWithWhereWithoutRelatedAnimeInput = {
    where: RelatedScalarWhereInput
    data: XOR<RelatedUpdateManyMutationInput, RelatedUncheckedUpdateManyWithoutRelatedAnimeInput>
  }

  export type BookmarkUpsertWithWhereUniqueWithoutAnimeInput = {
    where: BookmarkWhereUniqueInput
    update: XOR<BookmarkUpdateWithoutAnimeInput, BookmarkUncheckedUpdateWithoutAnimeInput>
    create: XOR<BookmarkCreateWithoutAnimeInput, BookmarkUncheckedCreateWithoutAnimeInput>
  }

  export type BookmarkUpdateWithWhereUniqueWithoutAnimeInput = {
    where: BookmarkWhereUniqueInput
    data: XOR<BookmarkUpdateWithoutAnimeInput, BookmarkUncheckedUpdateWithoutAnimeInput>
  }

  export type BookmarkUpdateManyWithWhereWithoutAnimeInput = {
    where: BookmarkScalarWhereInput
    data: XOR<BookmarkUpdateManyMutationInput, BookmarkUncheckedUpdateManyWithoutAnimeInput>
  }

  export type BookmarkScalarWhereInput = {
    AND?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
    OR?: BookmarkScalarWhereInput[]
    NOT?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
    id?: IntFilter<"Bookmark"> | number
    userId?: StringFilter<"Bookmark"> | string
    mark?: EnumBookmarkNameFilter<"Bookmark"> | $Enums.BookmarkName
    type?: EnumModelNameFilter<"Bookmark"> | $Enums.ModelName
    addedAt?: DateTimeFilter<"Bookmark"> | Date | string
    updatedAt?: DateTimeFilter<"Bookmark"> | Date | string
    mangaSlug_url?: StringNullableFilter<"Bookmark"> | string | null
    animeSlug_url?: StringNullableFilter<"Bookmark"> | string | null
    chapterId?: IntNullableFilter<"Bookmark"> | number | null
    episodeId?: IntNullableFilter<"Bookmark"> | number | null
  }

  export type AnimeCreateWithoutEpisodeInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: AnimeCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    cover: CoverCreateNestedOneWithoutAnimeInput
    ageRestriction: AgeRestrictionCreateNestedOneWithoutAnimeInput
    genres?: GenreCreateNestedManyWithoutAnimeInput
    background: BackgroundCreateNestedOneWithoutAnimeInput
    relatedFrom?: RelatedCreateNestedManyWithoutAnimeInput
    relatedTo?: RelatedCreateNestedManyWithoutRelatedAnimeInput
    Bookmark?: BookmarkCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateWithoutEpisodeInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: AnimeCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    coverId: number
    ageRestrictionId: number
    backgroundId: number
    genres?: GenreUncheckedCreateNestedManyWithoutAnimeInput
    relatedFrom?: RelatedUncheckedCreateNestedManyWithoutAnimeInput
    relatedTo?: RelatedUncheckedCreateNestedManyWithoutRelatedAnimeInput
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeCreateOrConnectWithoutEpisodeInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutEpisodeInput, AnimeUncheckedCreateWithoutEpisodeInput>
  }

  export type BookmarkCreateWithoutLastWatchInput = {
    mark: $Enums.BookmarkName
    type: $Enums.ModelName
    addedAt?: Date | string
    updatedAt?: Date | string
    lastRead?: ChapterCreateNestedOneWithoutBookmarkInput
    anime?: AnimeCreateNestedOneWithoutBookmarkInput
    manga?: MangaCreateNestedOneWithoutBookmarkInput
    user: UserCreateNestedOneWithoutBookmarkInput
  }

  export type BookmarkUncheckedCreateWithoutLastWatchInput = {
    id?: number
    userId: string
    mark: $Enums.BookmarkName
    type: $Enums.ModelName
    addedAt?: Date | string
    updatedAt?: Date | string
    mangaSlug_url?: string | null
    animeSlug_url?: string | null
    chapterId?: number | null
  }

  export type BookmarkCreateOrConnectWithoutLastWatchInput = {
    where: BookmarkWhereUniqueInput
    create: XOR<BookmarkCreateWithoutLastWatchInput, BookmarkUncheckedCreateWithoutLastWatchInput>
  }

  export type BookmarkCreateManyLastWatchInputEnvelope = {
    data: BookmarkCreateManyLastWatchInput | BookmarkCreateManyLastWatchInput[]
    skipDuplicates?: boolean
  }

  export type AnimeUpsertWithoutEpisodeInput = {
    update: XOR<AnimeUpdateWithoutEpisodeInput, AnimeUncheckedUpdateWithoutEpisodeInput>
    create: XOR<AnimeCreateWithoutEpisodeInput, AnimeUncheckedCreateWithoutEpisodeInput>
    where?: AnimeWhereInput
  }

  export type AnimeUpdateToOneWithWhereWithoutEpisodeInput = {
    where?: AnimeWhereInput
    data: XOR<AnimeUpdateWithoutEpisodeInput, AnimeUncheckedUpdateWithoutEpisodeInput>
  }

  export type AnimeUpdateWithoutEpisodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    cover?: CoverUpdateOneRequiredWithoutAnimeNestedInput
    ageRestriction?: AgeRestrictionUpdateOneRequiredWithoutAnimeNestedInput
    genres?: GenreUpdateManyWithoutAnimeNestedInput
    background?: BackgroundUpdateOneRequiredWithoutAnimeNestedInput
    relatedFrom?: RelatedUpdateManyWithoutAnimeNestedInput
    relatedTo?: RelatedUpdateManyWithoutRelatedAnimeNestedInput
    Bookmark?: BookmarkUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutEpisodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    coverId?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
    genres?: GenreUncheckedUpdateManyWithoutAnimeNestedInput
    relatedFrom?: RelatedUncheckedUpdateManyWithoutAnimeNestedInput
    relatedTo?: RelatedUncheckedUpdateManyWithoutRelatedAnimeNestedInput
    Bookmark?: BookmarkUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type BookmarkUpsertWithWhereUniqueWithoutLastWatchInput = {
    where: BookmarkWhereUniqueInput
    update: XOR<BookmarkUpdateWithoutLastWatchInput, BookmarkUncheckedUpdateWithoutLastWatchInput>
    create: XOR<BookmarkCreateWithoutLastWatchInput, BookmarkUncheckedCreateWithoutLastWatchInput>
  }

  export type BookmarkUpdateWithWhereUniqueWithoutLastWatchInput = {
    where: BookmarkWhereUniqueInput
    data: XOR<BookmarkUpdateWithoutLastWatchInput, BookmarkUncheckedUpdateWithoutLastWatchInput>
  }

  export type BookmarkUpdateManyWithWhereWithoutLastWatchInput = {
    where: BookmarkScalarWhereInput
    data: XOR<BookmarkUpdateManyMutationInput, BookmarkUncheckedUpdateManyWithoutLastWatchInput>
  }

  export type CoverCreateWithoutMangaInput = {
    thumbnail: string
    default: string
    Anime?: AnimeCreateNestedManyWithoutCoverInput
  }

  export type CoverUncheckedCreateWithoutMangaInput = {
    id?: number
    thumbnail: string
    default: string
    Anime?: AnimeUncheckedCreateNestedManyWithoutCoverInput
  }

  export type CoverCreateOrConnectWithoutMangaInput = {
    where: CoverWhereUniqueInput
    create: XOR<CoverCreateWithoutMangaInput, CoverUncheckedCreateWithoutMangaInput>
  }

  export type AgeRestrictionCreateWithoutMangaInput = {
    id: number
    label: string
    site_ids?: AgeRestrictionCreatesite_idsInput | number[]
    Anime?: AnimeCreateNestedManyWithoutAgeRestrictionInput
  }

  export type AgeRestrictionUncheckedCreateWithoutMangaInput = {
    id: number
    label: string
    site_ids?: AgeRestrictionCreatesite_idsInput | number[]
    Anime?: AnimeUncheckedCreateNestedManyWithoutAgeRestrictionInput
  }

  export type AgeRestrictionCreateOrConnectWithoutMangaInput = {
    where: AgeRestrictionWhereUniqueInput
    create: XOR<AgeRestrictionCreateWithoutMangaInput, AgeRestrictionUncheckedCreateWithoutMangaInput>
  }

  export type ItemsCountCreateWithoutMangaInput = {
    uploaded: number
  }

  export type ItemsCountUncheckedCreateWithoutMangaInput = {
    id?: number
    uploaded: number
  }

  export type ItemsCountCreateOrConnectWithoutMangaInput = {
    where: ItemsCountWhereUniqueInput
    create: XOR<ItemsCountCreateWithoutMangaInput, ItemsCountUncheckedCreateWithoutMangaInput>
  }

  export type GenreCreateWithoutMangaInput = {
    id: number
    adult?: boolean
    name: string
    site_ids?: GenreCreatesite_idsInput | number[]
    Anime?: AnimeCreateNestedManyWithoutGenresInput
  }

  export type GenreUncheckedCreateWithoutMangaInput = {
    id: number
    adult?: boolean
    name: string
    site_ids?: GenreCreatesite_idsInput | number[]
    Anime?: AnimeUncheckedCreateNestedManyWithoutGenresInput
  }

  export type GenreCreateOrConnectWithoutMangaInput = {
    where: GenreWhereUniqueInput
    create: XOR<GenreCreateWithoutMangaInput, GenreUncheckedCreateWithoutMangaInput>
  }

  export type BackgroundCreateWithoutMangaInput = {
    url: string
    Anime?: AnimeCreateNestedManyWithoutBackgroundInput
  }

  export type BackgroundUncheckedCreateWithoutMangaInput = {
    id?: number
    url: string
    Anime?: AnimeUncheckedCreateNestedManyWithoutBackgroundInput
  }

  export type BackgroundCreateOrConnectWithoutMangaInput = {
    where: BackgroundWhereUniqueInput
    create: XOR<BackgroundCreateWithoutMangaInput, BackgroundUncheckedCreateWithoutMangaInput>
  }

  export type ChapterCreateWithoutMangaInput = {
    id: number
    created_at?: Date | string
    likes_count?: number
    name?: string | null
    number?: string
    item_number: number
    number_secondary: string
    slug: string
    volume?: string
    count?: number
    pages?: MangaPageCreateNestedManyWithoutChapterInput
    Bookmark?: BookmarkCreateNestedManyWithoutLastReadInput
  }

  export type ChapterUncheckedCreateWithoutMangaInput = {
    id: number
    created_at?: Date | string
    likes_count?: number
    name?: string | null
    number?: string
    item_number: number
    number_secondary: string
    slug: string
    volume?: string
    count?: number
    pages?: MangaPageUncheckedCreateNestedManyWithoutChapterInput
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutLastReadInput
  }

  export type ChapterCreateOrConnectWithoutMangaInput = {
    where: ChapterWhereUniqueInput
    create: XOR<ChapterCreateWithoutMangaInput, ChapterUncheckedCreateWithoutMangaInput>
  }

  export type ChapterCreateManyMangaInputEnvelope = {
    data: ChapterCreateManyMangaInput | ChapterCreateManyMangaInput[]
    skipDuplicates?: boolean
  }

  export type RelatedCreateWithoutMangaInput = {
    reason: $Enums.RelatedReason
    anime?: AnimeCreateNestedOneWithoutRelatedFromInput
    relatedAnime?: AnimeCreateNestedOneWithoutRelatedToInput
    relatedManga?: MangaCreateNestedOneWithoutRelatedToInput
  }

  export type RelatedUncheckedCreateWithoutMangaInput = {
    id?: number
    reason: $Enums.RelatedReason
    anime_slug?: string | null
    relatedAnimeSlug?: string | null
    relatedMangaSlug?: string | null
  }

  export type RelatedCreateOrConnectWithoutMangaInput = {
    where: RelatedWhereUniqueInput
    create: XOR<RelatedCreateWithoutMangaInput, RelatedUncheckedCreateWithoutMangaInput>
  }

  export type RelatedCreateManyMangaInputEnvelope = {
    data: RelatedCreateManyMangaInput | RelatedCreateManyMangaInput[]
    skipDuplicates?: boolean
  }

  export type RelatedCreateWithoutRelatedMangaInput = {
    reason: $Enums.RelatedReason
    anime?: AnimeCreateNestedOneWithoutRelatedFromInput
    manga?: MangaCreateNestedOneWithoutRelatedFromInput
    relatedAnime?: AnimeCreateNestedOneWithoutRelatedToInput
  }

  export type RelatedUncheckedCreateWithoutRelatedMangaInput = {
    id?: number
    reason: $Enums.RelatedReason
    anime_slug?: string | null
    manga_slug?: string | null
    relatedAnimeSlug?: string | null
  }

  export type RelatedCreateOrConnectWithoutRelatedMangaInput = {
    where: RelatedWhereUniqueInput
    create: XOR<RelatedCreateWithoutRelatedMangaInput, RelatedUncheckedCreateWithoutRelatedMangaInput>
  }

  export type RelatedCreateManyRelatedMangaInputEnvelope = {
    data: RelatedCreateManyRelatedMangaInput | RelatedCreateManyRelatedMangaInput[]
    skipDuplicates?: boolean
  }

  export type BookmarkCreateWithoutMangaInput = {
    mark: $Enums.BookmarkName
    type: $Enums.ModelName
    addedAt?: Date | string
    updatedAt?: Date | string
    lastRead?: ChapterCreateNestedOneWithoutBookmarkInput
    lastWatch?: EpisodeCreateNestedOneWithoutBookmarkInput
    anime?: AnimeCreateNestedOneWithoutBookmarkInput
    user: UserCreateNestedOneWithoutBookmarkInput
  }

  export type BookmarkUncheckedCreateWithoutMangaInput = {
    id?: number
    userId: string
    mark: $Enums.BookmarkName
    type: $Enums.ModelName
    addedAt?: Date | string
    updatedAt?: Date | string
    animeSlug_url?: string | null
    chapterId?: number | null
    episodeId?: number | null
  }

  export type BookmarkCreateOrConnectWithoutMangaInput = {
    where: BookmarkWhereUniqueInput
    create: XOR<BookmarkCreateWithoutMangaInput, BookmarkUncheckedCreateWithoutMangaInput>
  }

  export type BookmarkCreateManyMangaInputEnvelope = {
    data: BookmarkCreateManyMangaInput | BookmarkCreateManyMangaInput[]
    skipDuplicates?: boolean
  }

  export type CoverUpsertWithoutMangaInput = {
    update: XOR<CoverUpdateWithoutMangaInput, CoverUncheckedUpdateWithoutMangaInput>
    create: XOR<CoverCreateWithoutMangaInput, CoverUncheckedCreateWithoutMangaInput>
    where?: CoverWhereInput
  }

  export type CoverUpdateToOneWithWhereWithoutMangaInput = {
    where?: CoverWhereInput
    data: XOR<CoverUpdateWithoutMangaInput, CoverUncheckedUpdateWithoutMangaInput>
  }

  export type CoverUpdateWithoutMangaInput = {
    thumbnail?: StringFieldUpdateOperationsInput | string
    default?: StringFieldUpdateOperationsInput | string
    Anime?: AnimeUpdateManyWithoutCoverNestedInput
  }

  export type CoverUncheckedUpdateWithoutMangaInput = {
    id?: IntFieldUpdateOperationsInput | number
    thumbnail?: StringFieldUpdateOperationsInput | string
    default?: StringFieldUpdateOperationsInput | string
    Anime?: AnimeUncheckedUpdateManyWithoutCoverNestedInput
  }

  export type AgeRestrictionUpsertWithoutMangaInput = {
    update: XOR<AgeRestrictionUpdateWithoutMangaInput, AgeRestrictionUncheckedUpdateWithoutMangaInput>
    create: XOR<AgeRestrictionCreateWithoutMangaInput, AgeRestrictionUncheckedCreateWithoutMangaInput>
    where?: AgeRestrictionWhereInput
  }

  export type AgeRestrictionUpdateToOneWithWhereWithoutMangaInput = {
    where?: AgeRestrictionWhereInput
    data: XOR<AgeRestrictionUpdateWithoutMangaInput, AgeRestrictionUncheckedUpdateWithoutMangaInput>
  }

  export type AgeRestrictionUpdateWithoutMangaInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    site_ids?: AgeRestrictionUpdatesite_idsInput | number[]
    Anime?: AnimeUpdateManyWithoutAgeRestrictionNestedInput
  }

  export type AgeRestrictionUncheckedUpdateWithoutMangaInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    site_ids?: AgeRestrictionUpdatesite_idsInput | number[]
    Anime?: AnimeUncheckedUpdateManyWithoutAgeRestrictionNestedInput
  }

  export type ItemsCountUpsertWithoutMangaInput = {
    update: XOR<ItemsCountUpdateWithoutMangaInput, ItemsCountUncheckedUpdateWithoutMangaInput>
    create: XOR<ItemsCountCreateWithoutMangaInput, ItemsCountUncheckedCreateWithoutMangaInput>
    where?: ItemsCountWhereInput
  }

  export type ItemsCountUpdateToOneWithWhereWithoutMangaInput = {
    where?: ItemsCountWhereInput
    data: XOR<ItemsCountUpdateWithoutMangaInput, ItemsCountUncheckedUpdateWithoutMangaInput>
  }

  export type ItemsCountUpdateWithoutMangaInput = {
    uploaded?: IntFieldUpdateOperationsInput | number
  }

  export type ItemsCountUncheckedUpdateWithoutMangaInput = {
    id?: IntFieldUpdateOperationsInput | number
    uploaded?: IntFieldUpdateOperationsInput | number
  }

  export type GenreUpsertWithWhereUniqueWithoutMangaInput = {
    where: GenreWhereUniqueInput
    update: XOR<GenreUpdateWithoutMangaInput, GenreUncheckedUpdateWithoutMangaInput>
    create: XOR<GenreCreateWithoutMangaInput, GenreUncheckedCreateWithoutMangaInput>
  }

  export type GenreUpdateWithWhereUniqueWithoutMangaInput = {
    where: GenreWhereUniqueInput
    data: XOR<GenreUpdateWithoutMangaInput, GenreUncheckedUpdateWithoutMangaInput>
  }

  export type GenreUpdateManyWithWhereWithoutMangaInput = {
    where: GenreScalarWhereInput
    data: XOR<GenreUpdateManyMutationInput, GenreUncheckedUpdateManyWithoutMangaInput>
  }

  export type BackgroundUpsertWithoutMangaInput = {
    update: XOR<BackgroundUpdateWithoutMangaInput, BackgroundUncheckedUpdateWithoutMangaInput>
    create: XOR<BackgroundCreateWithoutMangaInput, BackgroundUncheckedCreateWithoutMangaInput>
    where?: BackgroundWhereInput
  }

  export type BackgroundUpdateToOneWithWhereWithoutMangaInput = {
    where?: BackgroundWhereInput
    data: XOR<BackgroundUpdateWithoutMangaInput, BackgroundUncheckedUpdateWithoutMangaInput>
  }

  export type BackgroundUpdateWithoutMangaInput = {
    url?: StringFieldUpdateOperationsInput | string
    Anime?: AnimeUpdateManyWithoutBackgroundNestedInput
  }

  export type BackgroundUncheckedUpdateWithoutMangaInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    Anime?: AnimeUncheckedUpdateManyWithoutBackgroundNestedInput
  }

  export type ChapterUpsertWithWhereUniqueWithoutMangaInput = {
    where: ChapterWhereUniqueInput
    update: XOR<ChapterUpdateWithoutMangaInput, ChapterUncheckedUpdateWithoutMangaInput>
    create: XOR<ChapterCreateWithoutMangaInput, ChapterUncheckedCreateWithoutMangaInput>
  }

  export type ChapterUpdateWithWhereUniqueWithoutMangaInput = {
    where: ChapterWhereUniqueInput
    data: XOR<ChapterUpdateWithoutMangaInput, ChapterUncheckedUpdateWithoutMangaInput>
  }

  export type ChapterUpdateManyWithWhereWithoutMangaInput = {
    where: ChapterScalarWhereInput
    data: XOR<ChapterUpdateManyMutationInput, ChapterUncheckedUpdateManyWithoutMangaInput>
  }

  export type ChapterScalarWhereInput = {
    AND?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
    OR?: ChapterScalarWhereInput[]
    NOT?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
    id?: IntFilter<"Chapter"> | number
    created_at?: DateTimeFilter<"Chapter"> | Date | string
    likes_count?: IntFilter<"Chapter"> | number
    manga_id?: IntFilter<"Chapter"> | number
    name?: StringNullableFilter<"Chapter"> | string | null
    number?: StringFilter<"Chapter"> | string
    item_number?: IntFilter<"Chapter"> | number
    number_secondary?: StringFilter<"Chapter"> | string
    slug?: StringFilter<"Chapter"> | string
    volume?: StringFilter<"Chapter"> | string
    count?: IntFilter<"Chapter"> | number
  }

  export type RelatedUpsertWithWhereUniqueWithoutMangaInput = {
    where: RelatedWhereUniqueInput
    update: XOR<RelatedUpdateWithoutMangaInput, RelatedUncheckedUpdateWithoutMangaInput>
    create: XOR<RelatedCreateWithoutMangaInput, RelatedUncheckedCreateWithoutMangaInput>
  }

  export type RelatedUpdateWithWhereUniqueWithoutMangaInput = {
    where: RelatedWhereUniqueInput
    data: XOR<RelatedUpdateWithoutMangaInput, RelatedUncheckedUpdateWithoutMangaInput>
  }

  export type RelatedUpdateManyWithWhereWithoutMangaInput = {
    where: RelatedScalarWhereInput
    data: XOR<RelatedUpdateManyMutationInput, RelatedUncheckedUpdateManyWithoutMangaInput>
  }

  export type RelatedUpsertWithWhereUniqueWithoutRelatedMangaInput = {
    where: RelatedWhereUniqueInput
    update: XOR<RelatedUpdateWithoutRelatedMangaInput, RelatedUncheckedUpdateWithoutRelatedMangaInput>
    create: XOR<RelatedCreateWithoutRelatedMangaInput, RelatedUncheckedCreateWithoutRelatedMangaInput>
  }

  export type RelatedUpdateWithWhereUniqueWithoutRelatedMangaInput = {
    where: RelatedWhereUniqueInput
    data: XOR<RelatedUpdateWithoutRelatedMangaInput, RelatedUncheckedUpdateWithoutRelatedMangaInput>
  }

  export type RelatedUpdateManyWithWhereWithoutRelatedMangaInput = {
    where: RelatedScalarWhereInput
    data: XOR<RelatedUpdateManyMutationInput, RelatedUncheckedUpdateManyWithoutRelatedMangaInput>
  }

  export type BookmarkUpsertWithWhereUniqueWithoutMangaInput = {
    where: BookmarkWhereUniqueInput
    update: XOR<BookmarkUpdateWithoutMangaInput, BookmarkUncheckedUpdateWithoutMangaInput>
    create: XOR<BookmarkCreateWithoutMangaInput, BookmarkUncheckedCreateWithoutMangaInput>
  }

  export type BookmarkUpdateWithWhereUniqueWithoutMangaInput = {
    where: BookmarkWhereUniqueInput
    data: XOR<BookmarkUpdateWithoutMangaInput, BookmarkUncheckedUpdateWithoutMangaInput>
  }

  export type BookmarkUpdateManyWithWhereWithoutMangaInput = {
    where: BookmarkScalarWhereInput
    data: XOR<BookmarkUpdateManyMutationInput, BookmarkUncheckedUpdateManyWithoutMangaInput>
  }

  export type MangaCreateWithoutItems_countInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    cover: CoverCreateNestedOneWithoutMangaInput
    ageRestriction: AgeRestrictionCreateNestedOneWithoutMangaInput
    genres?: GenreCreateNestedManyWithoutMangaInput
    background: BackgroundCreateNestedOneWithoutMangaInput
    Chapter?: ChapterCreateNestedManyWithoutMangaInput
    relatedFrom?: RelatedCreateNestedManyWithoutMangaInput
    relatedTo?: RelatedCreateNestedManyWithoutRelatedMangaInput
    Bookmark?: BookmarkCreateNestedManyWithoutMangaInput
  }

  export type MangaUncheckedCreateWithoutItems_countInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    coverId: number
    ageRestrictionId: number
    backgroundId: number
    genres?: GenreUncheckedCreateNestedManyWithoutMangaInput
    Chapter?: ChapterUncheckedCreateNestedManyWithoutMangaInput
    relatedFrom?: RelatedUncheckedCreateNestedManyWithoutMangaInput
    relatedTo?: RelatedUncheckedCreateNestedManyWithoutRelatedMangaInput
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutMangaInput
  }

  export type MangaCreateOrConnectWithoutItems_countInput = {
    where: MangaWhereUniqueInput
    create: XOR<MangaCreateWithoutItems_countInput, MangaUncheckedCreateWithoutItems_countInput>
  }

  export type MangaCreateManyItems_countInputEnvelope = {
    data: MangaCreateManyItems_countInput | MangaCreateManyItems_countInput[]
    skipDuplicates?: boolean
  }

  export type MangaUpsertWithWhereUniqueWithoutItems_countInput = {
    where: MangaWhereUniqueInput
    update: XOR<MangaUpdateWithoutItems_countInput, MangaUncheckedUpdateWithoutItems_countInput>
    create: XOR<MangaCreateWithoutItems_countInput, MangaUncheckedCreateWithoutItems_countInput>
  }

  export type MangaUpdateWithWhereUniqueWithoutItems_countInput = {
    where: MangaWhereUniqueInput
    data: XOR<MangaUpdateWithoutItems_countInput, MangaUncheckedUpdateWithoutItems_countInput>
  }

  export type MangaUpdateManyWithWhereWithoutItems_countInput = {
    where: MangaScalarWhereInput
    data: XOR<MangaUpdateManyMutationInput, MangaUncheckedUpdateManyWithoutItems_countInput>
  }

  export type MangaPageCreateWithoutChapterInput = {
    created_at?: Date | string
    image: string
    url: string
    ratio: number
  }

  export type MangaPageUncheckedCreateWithoutChapterInput = {
    id?: number
    created_at?: Date | string
    image: string
    url: string
    ratio: number
  }

  export type MangaPageCreateOrConnectWithoutChapterInput = {
    where: MangaPageWhereUniqueInput
    create: XOR<MangaPageCreateWithoutChapterInput, MangaPageUncheckedCreateWithoutChapterInput>
  }

  export type MangaPageCreateManyChapterInputEnvelope = {
    data: MangaPageCreateManyChapterInput | MangaPageCreateManyChapterInput[]
    skipDuplicates?: boolean
  }

  export type MangaCreateWithoutChapterInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    cover: CoverCreateNestedOneWithoutMangaInput
    ageRestriction: AgeRestrictionCreateNestedOneWithoutMangaInput
    items_count: ItemsCountCreateNestedOneWithoutMangaInput
    genres?: GenreCreateNestedManyWithoutMangaInput
    background: BackgroundCreateNestedOneWithoutMangaInput
    relatedFrom?: RelatedCreateNestedManyWithoutMangaInput
    relatedTo?: RelatedCreateNestedManyWithoutRelatedMangaInput
    Bookmark?: BookmarkCreateNestedManyWithoutMangaInput
  }

  export type MangaUncheckedCreateWithoutChapterInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    coverId: number
    ageRestrictionId: number
    itemsCountId: number
    backgroundId: number
    genres?: GenreUncheckedCreateNestedManyWithoutMangaInput
    relatedFrom?: RelatedUncheckedCreateNestedManyWithoutMangaInput
    relatedTo?: RelatedUncheckedCreateNestedManyWithoutRelatedMangaInput
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutMangaInput
  }

  export type MangaCreateOrConnectWithoutChapterInput = {
    where: MangaWhereUniqueInput
    create: XOR<MangaCreateWithoutChapterInput, MangaUncheckedCreateWithoutChapterInput>
  }

  export type BookmarkCreateWithoutLastReadInput = {
    mark: $Enums.BookmarkName
    type: $Enums.ModelName
    addedAt?: Date | string
    updatedAt?: Date | string
    lastWatch?: EpisodeCreateNestedOneWithoutBookmarkInput
    anime?: AnimeCreateNestedOneWithoutBookmarkInput
    manga?: MangaCreateNestedOneWithoutBookmarkInput
    user: UserCreateNestedOneWithoutBookmarkInput
  }

  export type BookmarkUncheckedCreateWithoutLastReadInput = {
    id?: number
    userId: string
    mark: $Enums.BookmarkName
    type: $Enums.ModelName
    addedAt?: Date | string
    updatedAt?: Date | string
    mangaSlug_url?: string | null
    animeSlug_url?: string | null
    episodeId?: number | null
  }

  export type BookmarkCreateOrConnectWithoutLastReadInput = {
    where: BookmarkWhereUniqueInput
    create: XOR<BookmarkCreateWithoutLastReadInput, BookmarkUncheckedCreateWithoutLastReadInput>
  }

  export type BookmarkCreateManyLastReadInputEnvelope = {
    data: BookmarkCreateManyLastReadInput | BookmarkCreateManyLastReadInput[]
    skipDuplicates?: boolean
  }

  export type MangaPageUpsertWithWhereUniqueWithoutChapterInput = {
    where: MangaPageWhereUniqueInput
    update: XOR<MangaPageUpdateWithoutChapterInput, MangaPageUncheckedUpdateWithoutChapterInput>
    create: XOR<MangaPageCreateWithoutChapterInput, MangaPageUncheckedCreateWithoutChapterInput>
  }

  export type MangaPageUpdateWithWhereUniqueWithoutChapterInput = {
    where: MangaPageWhereUniqueInput
    data: XOR<MangaPageUpdateWithoutChapterInput, MangaPageUncheckedUpdateWithoutChapterInput>
  }

  export type MangaPageUpdateManyWithWhereWithoutChapterInput = {
    where: MangaPageScalarWhereInput
    data: XOR<MangaPageUpdateManyMutationInput, MangaPageUncheckedUpdateManyWithoutChapterInput>
  }

  export type MangaPageScalarWhereInput = {
    AND?: MangaPageScalarWhereInput | MangaPageScalarWhereInput[]
    OR?: MangaPageScalarWhereInput[]
    NOT?: MangaPageScalarWhereInput | MangaPageScalarWhereInput[]
    id?: IntFilter<"MangaPage"> | number
    created_at?: DateTimeFilter<"MangaPage"> | Date | string
    image?: StringFilter<"MangaPage"> | string
    url?: StringFilter<"MangaPage"> | string
    ratio?: FloatFilter<"MangaPage"> | number
    chapterId?: IntFilter<"MangaPage"> | number
  }

  export type MangaUpsertWithoutChapterInput = {
    update: XOR<MangaUpdateWithoutChapterInput, MangaUncheckedUpdateWithoutChapterInput>
    create: XOR<MangaCreateWithoutChapterInput, MangaUncheckedCreateWithoutChapterInput>
    where?: MangaWhereInput
  }

  export type MangaUpdateToOneWithWhereWithoutChapterInput = {
    where?: MangaWhereInput
    data: XOR<MangaUpdateWithoutChapterInput, MangaUncheckedUpdateWithoutChapterInput>
  }

  export type MangaUpdateWithoutChapterInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    cover?: CoverUpdateOneRequiredWithoutMangaNestedInput
    ageRestriction?: AgeRestrictionUpdateOneRequiredWithoutMangaNestedInput
    items_count?: ItemsCountUpdateOneRequiredWithoutMangaNestedInput
    genres?: GenreUpdateManyWithoutMangaNestedInput
    background?: BackgroundUpdateOneRequiredWithoutMangaNestedInput
    relatedFrom?: RelatedUpdateManyWithoutMangaNestedInput
    relatedTo?: RelatedUpdateManyWithoutRelatedMangaNestedInput
    Bookmark?: BookmarkUpdateManyWithoutMangaNestedInput
  }

  export type MangaUncheckedUpdateWithoutChapterInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    coverId?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    itemsCountId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
    genres?: GenreUncheckedUpdateManyWithoutMangaNestedInput
    relatedFrom?: RelatedUncheckedUpdateManyWithoutMangaNestedInput
    relatedTo?: RelatedUncheckedUpdateManyWithoutRelatedMangaNestedInput
    Bookmark?: BookmarkUncheckedUpdateManyWithoutMangaNestedInput
  }

  export type BookmarkUpsertWithWhereUniqueWithoutLastReadInput = {
    where: BookmarkWhereUniqueInput
    update: XOR<BookmarkUpdateWithoutLastReadInput, BookmarkUncheckedUpdateWithoutLastReadInput>
    create: XOR<BookmarkCreateWithoutLastReadInput, BookmarkUncheckedCreateWithoutLastReadInput>
  }

  export type BookmarkUpdateWithWhereUniqueWithoutLastReadInput = {
    where: BookmarkWhereUniqueInput
    data: XOR<BookmarkUpdateWithoutLastReadInput, BookmarkUncheckedUpdateWithoutLastReadInput>
  }

  export type BookmarkUpdateManyWithWhereWithoutLastReadInput = {
    where: BookmarkScalarWhereInput
    data: XOR<BookmarkUpdateManyMutationInput, BookmarkUncheckedUpdateManyWithoutLastReadInput>
  }

  export type ChapterCreateWithoutPagesInput = {
    id: number
    created_at?: Date | string
    likes_count?: number
    name?: string | null
    number?: string
    item_number: number
    number_secondary: string
    slug: string
    volume?: string
    count?: number
    manga: MangaCreateNestedOneWithoutChapterInput
    Bookmark?: BookmarkCreateNestedManyWithoutLastReadInput
  }

  export type ChapterUncheckedCreateWithoutPagesInput = {
    id: number
    created_at?: Date | string
    likes_count?: number
    manga_id: number
    name?: string | null
    number?: string
    item_number: number
    number_secondary: string
    slug: string
    volume?: string
    count?: number
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutLastReadInput
  }

  export type ChapterCreateOrConnectWithoutPagesInput = {
    where: ChapterWhereUniqueInput
    create: XOR<ChapterCreateWithoutPagesInput, ChapterUncheckedCreateWithoutPagesInput>
  }

  export type ChapterUpsertWithoutPagesInput = {
    update: XOR<ChapterUpdateWithoutPagesInput, ChapterUncheckedUpdateWithoutPagesInput>
    create: XOR<ChapterCreateWithoutPagesInput, ChapterUncheckedCreateWithoutPagesInput>
    where?: ChapterWhereInput
  }

  export type ChapterUpdateToOneWithWhereWithoutPagesInput = {
    where?: ChapterWhereInput
    data: XOR<ChapterUpdateWithoutPagesInput, ChapterUncheckedUpdateWithoutPagesInput>
  }

  export type ChapterUpdateWithoutPagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    likes_count?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    number?: StringFieldUpdateOperationsInput | string
    item_number?: IntFieldUpdateOperationsInput | number
    number_secondary?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    volume?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    manga?: MangaUpdateOneRequiredWithoutChapterNestedInput
    Bookmark?: BookmarkUpdateManyWithoutLastReadNestedInput
  }

  export type ChapterUncheckedUpdateWithoutPagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    likes_count?: IntFieldUpdateOperationsInput | number
    manga_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    number?: StringFieldUpdateOperationsInput | string
    item_number?: IntFieldUpdateOperationsInput | number
    number_secondary?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    volume?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    Bookmark?: BookmarkUncheckedUpdateManyWithoutLastReadNestedInput
  }

  export type ChapterCreateWithoutBookmarkInput = {
    id: number
    created_at?: Date | string
    likes_count?: number
    name?: string | null
    number?: string
    item_number: number
    number_secondary: string
    slug: string
    volume?: string
    count?: number
    pages?: MangaPageCreateNestedManyWithoutChapterInput
    manga: MangaCreateNestedOneWithoutChapterInput
  }

  export type ChapterUncheckedCreateWithoutBookmarkInput = {
    id: number
    created_at?: Date | string
    likes_count?: number
    manga_id: number
    name?: string | null
    number?: string
    item_number: number
    number_secondary: string
    slug: string
    volume?: string
    count?: number
    pages?: MangaPageUncheckedCreateNestedManyWithoutChapterInput
  }

  export type ChapterCreateOrConnectWithoutBookmarkInput = {
    where: ChapterWhereUniqueInput
    create: XOR<ChapterCreateWithoutBookmarkInput, ChapterUncheckedCreateWithoutBookmarkInput>
  }

  export type EpisodeCreateWithoutBookmarkInput = {
    id: number
    name?: string | null
    number: string
    number_secondary: string
    item_number: number
    source?: string | null
    endingLength?: number | null
    anime: AnimeCreateNestedOneWithoutEpisodeInput
  }

  export type EpisodeUncheckedCreateWithoutBookmarkInput = {
    id: number
    name?: string | null
    number: string
    number_secondary: string
    slug_url: string
    item_number: number
    source?: string | null
    endingLength?: number | null
  }

  export type EpisodeCreateOrConnectWithoutBookmarkInput = {
    where: EpisodeWhereUniqueInput
    create: XOR<EpisodeCreateWithoutBookmarkInput, EpisodeUncheckedCreateWithoutBookmarkInput>
  }

  export type AnimeCreateWithoutBookmarkInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: AnimeCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    cover: CoverCreateNestedOneWithoutAnimeInput
    ageRestriction: AgeRestrictionCreateNestedOneWithoutAnimeInput
    genres?: GenreCreateNestedManyWithoutAnimeInput
    background: BackgroundCreateNestedOneWithoutAnimeInput
    Episode?: EpisodeCreateNestedManyWithoutAnimeInput
    relatedFrom?: RelatedCreateNestedManyWithoutAnimeInput
    relatedTo?: RelatedCreateNestedManyWithoutRelatedAnimeInput
  }

  export type AnimeUncheckedCreateWithoutBookmarkInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: AnimeCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    coverId: number
    ageRestrictionId: number
    backgroundId: number
    genres?: GenreUncheckedCreateNestedManyWithoutAnimeInput
    Episode?: EpisodeUncheckedCreateNestedManyWithoutAnimeInput
    relatedFrom?: RelatedUncheckedCreateNestedManyWithoutAnimeInput
    relatedTo?: RelatedUncheckedCreateNestedManyWithoutRelatedAnimeInput
  }

  export type AnimeCreateOrConnectWithoutBookmarkInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutBookmarkInput, AnimeUncheckedCreateWithoutBookmarkInput>
  }

  export type MangaCreateWithoutBookmarkInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    cover: CoverCreateNestedOneWithoutMangaInput
    ageRestriction: AgeRestrictionCreateNestedOneWithoutMangaInput
    items_count: ItemsCountCreateNestedOneWithoutMangaInput
    genres?: GenreCreateNestedManyWithoutMangaInput
    background: BackgroundCreateNestedOneWithoutMangaInput
    Chapter?: ChapterCreateNestedManyWithoutMangaInput
    relatedFrom?: RelatedCreateNestedManyWithoutMangaInput
    relatedTo?: RelatedCreateNestedManyWithoutRelatedMangaInput
  }

  export type MangaUncheckedCreateWithoutBookmarkInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    coverId: number
    ageRestrictionId: number
    itemsCountId: number
    backgroundId: number
    genres?: GenreUncheckedCreateNestedManyWithoutMangaInput
    Chapter?: ChapterUncheckedCreateNestedManyWithoutMangaInput
    relatedFrom?: RelatedUncheckedCreateNestedManyWithoutMangaInput
    relatedTo?: RelatedUncheckedCreateNestedManyWithoutRelatedMangaInput
  }

  export type MangaCreateOrConnectWithoutBookmarkInput = {
    where: MangaWhereUniqueInput
    create: XOR<MangaCreateWithoutBookmarkInput, MangaUncheckedCreateWithoutBookmarkInput>
  }

  export type UserCreateWithoutBookmarkInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: boolean | null
    image?: string | null
    isAnonymous?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBookmarkInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: boolean | null
    image?: string | null
    isAnonymous?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBookmarkInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBookmarkInput, UserUncheckedCreateWithoutBookmarkInput>
  }

  export type ChapterUpsertWithoutBookmarkInput = {
    update: XOR<ChapterUpdateWithoutBookmarkInput, ChapterUncheckedUpdateWithoutBookmarkInput>
    create: XOR<ChapterCreateWithoutBookmarkInput, ChapterUncheckedCreateWithoutBookmarkInput>
    where?: ChapterWhereInput
  }

  export type ChapterUpdateToOneWithWhereWithoutBookmarkInput = {
    where?: ChapterWhereInput
    data: XOR<ChapterUpdateWithoutBookmarkInput, ChapterUncheckedUpdateWithoutBookmarkInput>
  }

  export type ChapterUpdateWithoutBookmarkInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    likes_count?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    number?: StringFieldUpdateOperationsInput | string
    item_number?: IntFieldUpdateOperationsInput | number
    number_secondary?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    volume?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    pages?: MangaPageUpdateManyWithoutChapterNestedInput
    manga?: MangaUpdateOneRequiredWithoutChapterNestedInput
  }

  export type ChapterUncheckedUpdateWithoutBookmarkInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    likes_count?: IntFieldUpdateOperationsInput | number
    manga_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    number?: StringFieldUpdateOperationsInput | string
    item_number?: IntFieldUpdateOperationsInput | number
    number_secondary?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    volume?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    pages?: MangaPageUncheckedUpdateManyWithoutChapterNestedInput
  }

  export type EpisodeUpsertWithoutBookmarkInput = {
    update: XOR<EpisodeUpdateWithoutBookmarkInput, EpisodeUncheckedUpdateWithoutBookmarkInput>
    create: XOR<EpisodeCreateWithoutBookmarkInput, EpisodeUncheckedCreateWithoutBookmarkInput>
    where?: EpisodeWhereInput
  }

  export type EpisodeUpdateToOneWithWhereWithoutBookmarkInput = {
    where?: EpisodeWhereInput
    data: XOR<EpisodeUpdateWithoutBookmarkInput, EpisodeUncheckedUpdateWithoutBookmarkInput>
  }

  export type EpisodeUpdateWithoutBookmarkInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    number?: StringFieldUpdateOperationsInput | string
    number_secondary?: StringFieldUpdateOperationsInput | string
    item_number?: IntFieldUpdateOperationsInput | number
    source?: NullableStringFieldUpdateOperationsInput | string | null
    endingLength?: NullableIntFieldUpdateOperationsInput | number | null
    anime?: AnimeUpdateOneRequiredWithoutEpisodeNestedInput
  }

  export type EpisodeUncheckedUpdateWithoutBookmarkInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    number?: StringFieldUpdateOperationsInput | string
    number_secondary?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    item_number?: IntFieldUpdateOperationsInput | number
    source?: NullableStringFieldUpdateOperationsInput | string | null
    endingLength?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AnimeUpsertWithoutBookmarkInput = {
    update: XOR<AnimeUpdateWithoutBookmarkInput, AnimeUncheckedUpdateWithoutBookmarkInput>
    create: XOR<AnimeCreateWithoutBookmarkInput, AnimeUncheckedCreateWithoutBookmarkInput>
    where?: AnimeWhereInput
  }

  export type AnimeUpdateToOneWithWhereWithoutBookmarkInput = {
    where?: AnimeWhereInput
    data: XOR<AnimeUpdateWithoutBookmarkInput, AnimeUncheckedUpdateWithoutBookmarkInput>
  }

  export type AnimeUpdateWithoutBookmarkInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    cover?: CoverUpdateOneRequiredWithoutAnimeNestedInput
    ageRestriction?: AgeRestrictionUpdateOneRequiredWithoutAnimeNestedInput
    genres?: GenreUpdateManyWithoutAnimeNestedInput
    background?: BackgroundUpdateOneRequiredWithoutAnimeNestedInput
    Episode?: EpisodeUpdateManyWithoutAnimeNestedInput
    relatedFrom?: RelatedUpdateManyWithoutAnimeNestedInput
    relatedTo?: RelatedUpdateManyWithoutRelatedAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutBookmarkInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    coverId?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
    genres?: GenreUncheckedUpdateManyWithoutAnimeNestedInput
    Episode?: EpisodeUncheckedUpdateManyWithoutAnimeNestedInput
    relatedFrom?: RelatedUncheckedUpdateManyWithoutAnimeNestedInput
    relatedTo?: RelatedUncheckedUpdateManyWithoutRelatedAnimeNestedInput
  }

  export type MangaUpsertWithoutBookmarkInput = {
    update: XOR<MangaUpdateWithoutBookmarkInput, MangaUncheckedUpdateWithoutBookmarkInput>
    create: XOR<MangaCreateWithoutBookmarkInput, MangaUncheckedCreateWithoutBookmarkInput>
    where?: MangaWhereInput
  }

  export type MangaUpdateToOneWithWhereWithoutBookmarkInput = {
    where?: MangaWhereInput
    data: XOR<MangaUpdateWithoutBookmarkInput, MangaUncheckedUpdateWithoutBookmarkInput>
  }

  export type MangaUpdateWithoutBookmarkInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    cover?: CoverUpdateOneRequiredWithoutMangaNestedInput
    ageRestriction?: AgeRestrictionUpdateOneRequiredWithoutMangaNestedInput
    items_count?: ItemsCountUpdateOneRequiredWithoutMangaNestedInput
    genres?: GenreUpdateManyWithoutMangaNestedInput
    background?: BackgroundUpdateOneRequiredWithoutMangaNestedInput
    Chapter?: ChapterUpdateManyWithoutMangaNestedInput
    relatedFrom?: RelatedUpdateManyWithoutMangaNestedInput
    relatedTo?: RelatedUpdateManyWithoutRelatedMangaNestedInput
  }

  export type MangaUncheckedUpdateWithoutBookmarkInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    coverId?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    itemsCountId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
    genres?: GenreUncheckedUpdateManyWithoutMangaNestedInput
    Chapter?: ChapterUncheckedUpdateManyWithoutMangaNestedInput
    relatedFrom?: RelatedUncheckedUpdateManyWithoutMangaNestedInput
    relatedTo?: RelatedUncheckedUpdateManyWithoutRelatedMangaNestedInput
  }

  export type UserUpsertWithoutBookmarkInput = {
    update: XOR<UserUpdateWithoutBookmarkInput, UserUncheckedUpdateWithoutBookmarkInput>
    create: XOR<UserCreateWithoutBookmarkInput, UserUncheckedCreateWithoutBookmarkInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBookmarkInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBookmarkInput, UserUncheckedUpdateWithoutBookmarkInput>
  }

  export type UserUpdateWithoutBookmarkInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    isAnonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBookmarkInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    isAnonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SessionCreateWithoutUserInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountCreateWithoutUserInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BookmarkCreateWithoutUserInput = {
    mark: $Enums.BookmarkName
    type: $Enums.ModelName
    addedAt?: Date | string
    updatedAt?: Date | string
    lastRead?: ChapterCreateNestedOneWithoutBookmarkInput
    lastWatch?: EpisodeCreateNestedOneWithoutBookmarkInput
    anime?: AnimeCreateNestedOneWithoutBookmarkInput
    manga?: MangaCreateNestedOneWithoutBookmarkInput
  }

  export type BookmarkUncheckedCreateWithoutUserInput = {
    id?: number
    mark: $Enums.BookmarkName
    type: $Enums.ModelName
    addedAt?: Date | string
    updatedAt?: Date | string
    mangaSlug_url?: string | null
    animeSlug_url?: string | null
    chapterId?: number | null
    episodeId?: number | null
  }

  export type BookmarkCreateOrConnectWithoutUserInput = {
    where: BookmarkWhereUniqueInput
    create: XOR<BookmarkCreateWithoutUserInput, BookmarkUncheckedCreateWithoutUserInput>
  }

  export type BookmarkCreateManyUserInputEnvelope = {
    data: BookmarkCreateManyUserInput | BookmarkCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    token?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
  }

  export type BookmarkUpsertWithWhereUniqueWithoutUserInput = {
    where: BookmarkWhereUniqueInput
    update: XOR<BookmarkUpdateWithoutUserInput, BookmarkUncheckedUpdateWithoutUserInput>
    create: XOR<BookmarkCreateWithoutUserInput, BookmarkUncheckedCreateWithoutUserInput>
  }

  export type BookmarkUpdateWithWhereUniqueWithoutUserInput = {
    where: BookmarkWhereUniqueInput
    data: XOR<BookmarkUpdateWithoutUserInput, BookmarkUncheckedUpdateWithoutUserInput>
  }

  export type BookmarkUpdateManyWithWhereWithoutUserInput = {
    where: BookmarkScalarWhereInput
    data: XOR<BookmarkUpdateManyMutationInput, BookmarkUncheckedUpdateManyWithoutUserInput>
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: boolean | null
    image?: string | null
    isAnonymous?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    Bookmark?: BookmarkCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: boolean | null
    image?: string | null
    isAnonymous?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    isAnonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    Bookmark?: BookmarkUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    isAnonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Bookmark?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: boolean | null
    image?: string | null
    isAnonymous?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    Bookmark?: BookmarkCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: boolean | null
    image?: string | null
    isAnonymous?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Bookmark?: BookmarkUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    isAnonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Bookmark?: BookmarkUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    isAnonymous?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Bookmark?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MangaCreateManyCoverInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    ageRestrictionId: number
    itemsCountId: number
    backgroundId: number
  }

  export type AnimeCreateManyCoverInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: AnimeCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    ageRestrictionId: number
    backgroundId: number
  }

  export type MangaUpdateWithoutCoverInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    ageRestriction?: AgeRestrictionUpdateOneRequiredWithoutMangaNestedInput
    items_count?: ItemsCountUpdateOneRequiredWithoutMangaNestedInput
    genres?: GenreUpdateManyWithoutMangaNestedInput
    background?: BackgroundUpdateOneRequiredWithoutMangaNestedInput
    Chapter?: ChapterUpdateManyWithoutMangaNestedInput
    relatedFrom?: RelatedUpdateManyWithoutMangaNestedInput
    relatedTo?: RelatedUpdateManyWithoutRelatedMangaNestedInput
    Bookmark?: BookmarkUpdateManyWithoutMangaNestedInput
  }

  export type MangaUncheckedUpdateWithoutCoverInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    itemsCountId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
    genres?: GenreUncheckedUpdateManyWithoutMangaNestedInput
    Chapter?: ChapterUncheckedUpdateManyWithoutMangaNestedInput
    relatedFrom?: RelatedUncheckedUpdateManyWithoutMangaNestedInput
    relatedTo?: RelatedUncheckedUpdateManyWithoutRelatedMangaNestedInput
    Bookmark?: BookmarkUncheckedUpdateManyWithoutMangaNestedInput
  }

  export type MangaUncheckedUpdateManyWithoutCoverInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    itemsCountId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
  }

  export type AnimeUpdateWithoutCoverInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    ageRestriction?: AgeRestrictionUpdateOneRequiredWithoutAnimeNestedInput
    genres?: GenreUpdateManyWithoutAnimeNestedInput
    background?: BackgroundUpdateOneRequiredWithoutAnimeNestedInput
    Episode?: EpisodeUpdateManyWithoutAnimeNestedInput
    relatedFrom?: RelatedUpdateManyWithoutAnimeNestedInput
    relatedTo?: RelatedUpdateManyWithoutRelatedAnimeNestedInput
    Bookmark?: BookmarkUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutCoverInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
    genres?: GenreUncheckedUpdateManyWithoutAnimeNestedInput
    Episode?: EpisodeUncheckedUpdateManyWithoutAnimeNestedInput
    relatedFrom?: RelatedUncheckedUpdateManyWithoutAnimeNestedInput
    relatedTo?: RelatedUncheckedUpdateManyWithoutRelatedAnimeNestedInput
    Bookmark?: BookmarkUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateManyWithoutCoverInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
  }

  export type MangaCreateManyAgeRestrictionInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    coverId: number
    itemsCountId: number
    backgroundId: number
  }

  export type AnimeCreateManyAgeRestrictionInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: AnimeCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    coverId: number
    backgroundId: number
  }

  export type MangaUpdateWithoutAgeRestrictionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    cover?: CoverUpdateOneRequiredWithoutMangaNestedInput
    items_count?: ItemsCountUpdateOneRequiredWithoutMangaNestedInput
    genres?: GenreUpdateManyWithoutMangaNestedInput
    background?: BackgroundUpdateOneRequiredWithoutMangaNestedInput
    Chapter?: ChapterUpdateManyWithoutMangaNestedInput
    relatedFrom?: RelatedUpdateManyWithoutMangaNestedInput
    relatedTo?: RelatedUpdateManyWithoutRelatedMangaNestedInput
    Bookmark?: BookmarkUpdateManyWithoutMangaNestedInput
  }

  export type MangaUncheckedUpdateWithoutAgeRestrictionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    coverId?: IntFieldUpdateOperationsInput | number
    itemsCountId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
    genres?: GenreUncheckedUpdateManyWithoutMangaNestedInput
    Chapter?: ChapterUncheckedUpdateManyWithoutMangaNestedInput
    relatedFrom?: RelatedUncheckedUpdateManyWithoutMangaNestedInput
    relatedTo?: RelatedUncheckedUpdateManyWithoutRelatedMangaNestedInput
    Bookmark?: BookmarkUncheckedUpdateManyWithoutMangaNestedInput
  }

  export type MangaUncheckedUpdateManyWithoutAgeRestrictionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    coverId?: IntFieldUpdateOperationsInput | number
    itemsCountId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
  }

  export type AnimeUpdateWithoutAgeRestrictionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    cover?: CoverUpdateOneRequiredWithoutAnimeNestedInput
    genres?: GenreUpdateManyWithoutAnimeNestedInput
    background?: BackgroundUpdateOneRequiredWithoutAnimeNestedInput
    Episode?: EpisodeUpdateManyWithoutAnimeNestedInput
    relatedFrom?: RelatedUpdateManyWithoutAnimeNestedInput
    relatedTo?: RelatedUpdateManyWithoutRelatedAnimeNestedInput
    Bookmark?: BookmarkUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutAgeRestrictionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    coverId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
    genres?: GenreUncheckedUpdateManyWithoutAnimeNestedInput
    Episode?: EpisodeUncheckedUpdateManyWithoutAnimeNestedInput
    relatedFrom?: RelatedUncheckedUpdateManyWithoutAnimeNestedInput
    relatedTo?: RelatedUncheckedUpdateManyWithoutRelatedAnimeNestedInput
    Bookmark?: BookmarkUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateManyWithoutAgeRestrictionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    coverId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
  }

  export type MangaUpdateWithoutGenresInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    cover?: CoverUpdateOneRequiredWithoutMangaNestedInput
    ageRestriction?: AgeRestrictionUpdateOneRequiredWithoutMangaNestedInput
    items_count?: ItemsCountUpdateOneRequiredWithoutMangaNestedInput
    background?: BackgroundUpdateOneRequiredWithoutMangaNestedInput
    Chapter?: ChapterUpdateManyWithoutMangaNestedInput
    relatedFrom?: RelatedUpdateManyWithoutMangaNestedInput
    relatedTo?: RelatedUpdateManyWithoutRelatedMangaNestedInput
    Bookmark?: BookmarkUpdateManyWithoutMangaNestedInput
  }

  export type MangaUncheckedUpdateWithoutGenresInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    coverId?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    itemsCountId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
    Chapter?: ChapterUncheckedUpdateManyWithoutMangaNestedInput
    relatedFrom?: RelatedUncheckedUpdateManyWithoutMangaNestedInput
    relatedTo?: RelatedUncheckedUpdateManyWithoutRelatedMangaNestedInput
    Bookmark?: BookmarkUncheckedUpdateManyWithoutMangaNestedInput
  }

  export type MangaUncheckedUpdateManyWithoutGenresInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    coverId?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    itemsCountId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
  }

  export type AnimeUpdateWithoutGenresInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    cover?: CoverUpdateOneRequiredWithoutAnimeNestedInput
    ageRestriction?: AgeRestrictionUpdateOneRequiredWithoutAnimeNestedInput
    background?: BackgroundUpdateOneRequiredWithoutAnimeNestedInput
    Episode?: EpisodeUpdateManyWithoutAnimeNestedInput
    relatedFrom?: RelatedUpdateManyWithoutAnimeNestedInput
    relatedTo?: RelatedUpdateManyWithoutRelatedAnimeNestedInput
    Bookmark?: BookmarkUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutGenresInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    coverId?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
    Episode?: EpisodeUncheckedUpdateManyWithoutAnimeNestedInput
    relatedFrom?: RelatedUncheckedUpdateManyWithoutAnimeNestedInput
    relatedTo?: RelatedUncheckedUpdateManyWithoutRelatedAnimeNestedInput
    Bookmark?: BookmarkUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateManyWithoutGenresInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    coverId?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
  }

  export type MangaCreateManyBackgroundInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    coverId: number
    ageRestrictionId: number
    itemsCountId: number
  }

  export type AnimeCreateManyBackgroundInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: AnimeCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    coverId: number
    ageRestrictionId: number
  }

  export type MangaUpdateWithoutBackgroundInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    cover?: CoverUpdateOneRequiredWithoutMangaNestedInput
    ageRestriction?: AgeRestrictionUpdateOneRequiredWithoutMangaNestedInput
    items_count?: ItemsCountUpdateOneRequiredWithoutMangaNestedInput
    genres?: GenreUpdateManyWithoutMangaNestedInput
    Chapter?: ChapterUpdateManyWithoutMangaNestedInput
    relatedFrom?: RelatedUpdateManyWithoutMangaNestedInput
    relatedTo?: RelatedUpdateManyWithoutRelatedMangaNestedInput
    Bookmark?: BookmarkUpdateManyWithoutMangaNestedInput
  }

  export type MangaUncheckedUpdateWithoutBackgroundInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    coverId?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    itemsCountId?: IntFieldUpdateOperationsInput | number
    genres?: GenreUncheckedUpdateManyWithoutMangaNestedInput
    Chapter?: ChapterUncheckedUpdateManyWithoutMangaNestedInput
    relatedFrom?: RelatedUncheckedUpdateManyWithoutMangaNestedInput
    relatedTo?: RelatedUncheckedUpdateManyWithoutRelatedMangaNestedInput
    Bookmark?: BookmarkUncheckedUpdateManyWithoutMangaNestedInput
  }

  export type MangaUncheckedUpdateManyWithoutBackgroundInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    coverId?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    itemsCountId?: IntFieldUpdateOperationsInput | number
  }

  export type AnimeUpdateWithoutBackgroundInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    cover?: CoverUpdateOneRequiredWithoutAnimeNestedInput
    ageRestriction?: AgeRestrictionUpdateOneRequiredWithoutAnimeNestedInput
    genres?: GenreUpdateManyWithoutAnimeNestedInput
    Episode?: EpisodeUpdateManyWithoutAnimeNestedInput
    relatedFrom?: RelatedUpdateManyWithoutAnimeNestedInput
    relatedTo?: RelatedUpdateManyWithoutRelatedAnimeNestedInput
    Bookmark?: BookmarkUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutBackgroundInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    coverId?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    genres?: GenreUncheckedUpdateManyWithoutAnimeNestedInput
    Episode?: EpisodeUncheckedUpdateManyWithoutAnimeNestedInput
    relatedFrom?: RelatedUncheckedUpdateManyWithoutAnimeNestedInput
    relatedTo?: RelatedUncheckedUpdateManyWithoutRelatedAnimeNestedInput
    Bookmark?: BookmarkUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateManyWithoutBackgroundInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: AnimeUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    coverId?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
  }

  export type EpisodeCreateManyAnimeInput = {
    id: number
    name?: string | null
    number: string
    number_secondary: string
    item_number: number
    source?: string | null
    endingLength?: number | null
  }

  export type RelatedCreateManyAnimeInput = {
    id?: number
    reason: $Enums.RelatedReason
    manga_slug?: string | null
    relatedAnimeSlug?: string | null
    relatedMangaSlug?: string | null
  }

  export type RelatedCreateManyRelatedAnimeInput = {
    id?: number
    reason: $Enums.RelatedReason
    anime_slug?: string | null
    manga_slug?: string | null
    relatedMangaSlug?: string | null
  }

  export type BookmarkCreateManyAnimeInput = {
    id?: number
    userId: string
    mark: $Enums.BookmarkName
    type: $Enums.ModelName
    addedAt?: Date | string
    updatedAt?: Date | string
    mangaSlug_url?: string | null
    chapterId?: number | null
    episodeId?: number | null
  }

  export type GenreUpdateWithoutAnimeInput = {
    id?: IntFieldUpdateOperationsInput | number
    adult?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    site_ids?: GenreUpdatesite_idsInput | number[]
    Manga?: MangaUpdateManyWithoutGenresNestedInput
  }

  export type GenreUncheckedUpdateWithoutAnimeInput = {
    id?: IntFieldUpdateOperationsInput | number
    adult?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    site_ids?: GenreUpdatesite_idsInput | number[]
    Manga?: MangaUncheckedUpdateManyWithoutGenresNestedInput
  }

  export type GenreUncheckedUpdateManyWithoutAnimeInput = {
    id?: IntFieldUpdateOperationsInput | number
    adult?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    site_ids?: GenreUpdatesite_idsInput | number[]
  }

  export type EpisodeUpdateWithoutAnimeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    number?: StringFieldUpdateOperationsInput | string
    number_secondary?: StringFieldUpdateOperationsInput | string
    item_number?: IntFieldUpdateOperationsInput | number
    source?: NullableStringFieldUpdateOperationsInput | string | null
    endingLength?: NullableIntFieldUpdateOperationsInput | number | null
    Bookmark?: BookmarkUpdateManyWithoutLastWatchNestedInput
  }

  export type EpisodeUncheckedUpdateWithoutAnimeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    number?: StringFieldUpdateOperationsInput | string
    number_secondary?: StringFieldUpdateOperationsInput | string
    item_number?: IntFieldUpdateOperationsInput | number
    source?: NullableStringFieldUpdateOperationsInput | string | null
    endingLength?: NullableIntFieldUpdateOperationsInput | number | null
    Bookmark?: BookmarkUncheckedUpdateManyWithoutLastWatchNestedInput
  }

  export type EpisodeUncheckedUpdateManyWithoutAnimeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    number?: StringFieldUpdateOperationsInput | string
    number_secondary?: StringFieldUpdateOperationsInput | string
    item_number?: IntFieldUpdateOperationsInput | number
    source?: NullableStringFieldUpdateOperationsInput | string | null
    endingLength?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RelatedUpdateWithoutAnimeInput = {
    reason?: EnumRelatedReasonFieldUpdateOperationsInput | $Enums.RelatedReason
    manga?: MangaUpdateOneWithoutRelatedFromNestedInput
    relatedAnime?: AnimeUpdateOneWithoutRelatedToNestedInput
    relatedManga?: MangaUpdateOneWithoutRelatedToNestedInput
  }

  export type RelatedUncheckedUpdateWithoutAnimeInput = {
    id?: IntFieldUpdateOperationsInput | number
    reason?: EnumRelatedReasonFieldUpdateOperationsInput | $Enums.RelatedReason
    manga_slug?: NullableStringFieldUpdateOperationsInput | string | null
    relatedAnimeSlug?: NullableStringFieldUpdateOperationsInput | string | null
    relatedMangaSlug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RelatedUncheckedUpdateManyWithoutAnimeInput = {
    id?: IntFieldUpdateOperationsInput | number
    reason?: EnumRelatedReasonFieldUpdateOperationsInput | $Enums.RelatedReason
    manga_slug?: NullableStringFieldUpdateOperationsInput | string | null
    relatedAnimeSlug?: NullableStringFieldUpdateOperationsInput | string | null
    relatedMangaSlug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RelatedUpdateWithoutRelatedAnimeInput = {
    reason?: EnumRelatedReasonFieldUpdateOperationsInput | $Enums.RelatedReason
    anime?: AnimeUpdateOneWithoutRelatedFromNestedInput
    manga?: MangaUpdateOneWithoutRelatedFromNestedInput
    relatedManga?: MangaUpdateOneWithoutRelatedToNestedInput
  }

  export type RelatedUncheckedUpdateWithoutRelatedAnimeInput = {
    id?: IntFieldUpdateOperationsInput | number
    reason?: EnumRelatedReasonFieldUpdateOperationsInput | $Enums.RelatedReason
    anime_slug?: NullableStringFieldUpdateOperationsInput | string | null
    manga_slug?: NullableStringFieldUpdateOperationsInput | string | null
    relatedMangaSlug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RelatedUncheckedUpdateManyWithoutRelatedAnimeInput = {
    id?: IntFieldUpdateOperationsInput | number
    reason?: EnumRelatedReasonFieldUpdateOperationsInput | $Enums.RelatedReason
    anime_slug?: NullableStringFieldUpdateOperationsInput | string | null
    manga_slug?: NullableStringFieldUpdateOperationsInput | string | null
    relatedMangaSlug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BookmarkUpdateWithoutAnimeInput = {
    mark?: EnumBookmarkNameFieldUpdateOperationsInput | $Enums.BookmarkName
    type?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastRead?: ChapterUpdateOneWithoutBookmarkNestedInput
    lastWatch?: EpisodeUpdateOneWithoutBookmarkNestedInput
    manga?: MangaUpdateOneWithoutBookmarkNestedInput
    user?: UserUpdateOneRequiredWithoutBookmarkNestedInput
  }

  export type BookmarkUncheckedUpdateWithoutAnimeInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    mark?: EnumBookmarkNameFieldUpdateOperationsInput | $Enums.BookmarkName
    type?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mangaSlug_url?: NullableStringFieldUpdateOperationsInput | string | null
    chapterId?: NullableIntFieldUpdateOperationsInput | number | null
    episodeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BookmarkUncheckedUpdateManyWithoutAnimeInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    mark?: EnumBookmarkNameFieldUpdateOperationsInput | $Enums.BookmarkName
    type?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mangaSlug_url?: NullableStringFieldUpdateOperationsInput | string | null
    chapterId?: NullableIntFieldUpdateOperationsInput | number | null
    episodeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BookmarkCreateManyLastWatchInput = {
    id?: number
    userId: string
    mark: $Enums.BookmarkName
    type: $Enums.ModelName
    addedAt?: Date | string
    updatedAt?: Date | string
    mangaSlug_url?: string | null
    animeSlug_url?: string | null
    chapterId?: number | null
  }

  export type BookmarkUpdateWithoutLastWatchInput = {
    mark?: EnumBookmarkNameFieldUpdateOperationsInput | $Enums.BookmarkName
    type?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastRead?: ChapterUpdateOneWithoutBookmarkNestedInput
    anime?: AnimeUpdateOneWithoutBookmarkNestedInput
    manga?: MangaUpdateOneWithoutBookmarkNestedInput
    user?: UserUpdateOneRequiredWithoutBookmarkNestedInput
  }

  export type BookmarkUncheckedUpdateWithoutLastWatchInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    mark?: EnumBookmarkNameFieldUpdateOperationsInput | $Enums.BookmarkName
    type?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mangaSlug_url?: NullableStringFieldUpdateOperationsInput | string | null
    animeSlug_url?: NullableStringFieldUpdateOperationsInput | string | null
    chapterId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BookmarkUncheckedUpdateManyWithoutLastWatchInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    mark?: EnumBookmarkNameFieldUpdateOperationsInput | $Enums.BookmarkName
    type?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mangaSlug_url?: NullableStringFieldUpdateOperationsInput | string | null
    animeSlug_url?: NullableStringFieldUpdateOperationsInput | string | null
    chapterId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ChapterCreateManyMangaInput = {
    id: number
    created_at?: Date | string
    likes_count?: number
    name?: string | null
    number?: string
    item_number: number
    number_secondary: string
    slug: string
    volume?: string
    count?: number
  }

  export type RelatedCreateManyMangaInput = {
    id?: number
    reason: $Enums.RelatedReason
    anime_slug?: string | null
    relatedAnimeSlug?: string | null
    relatedMangaSlug?: string | null
  }

  export type RelatedCreateManyRelatedMangaInput = {
    id?: number
    reason: $Enums.RelatedReason
    anime_slug?: string | null
    manga_slug?: string | null
    relatedAnimeSlug?: string | null
  }

  export type BookmarkCreateManyMangaInput = {
    id?: number
    userId: string
    mark: $Enums.BookmarkName
    type: $Enums.ModelName
    addedAt?: Date | string
    updatedAt?: Date | string
    animeSlug_url?: string | null
    chapterId?: number | null
    episodeId?: number | null
  }

  export type GenreUpdateWithoutMangaInput = {
    id?: IntFieldUpdateOperationsInput | number
    adult?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    site_ids?: GenreUpdatesite_idsInput | number[]
    Anime?: AnimeUpdateManyWithoutGenresNestedInput
  }

  export type GenreUncheckedUpdateWithoutMangaInput = {
    id?: IntFieldUpdateOperationsInput | number
    adult?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    site_ids?: GenreUpdatesite_idsInput | number[]
    Anime?: AnimeUncheckedUpdateManyWithoutGenresNestedInput
  }

  export type GenreUncheckedUpdateManyWithoutMangaInput = {
    id?: IntFieldUpdateOperationsInput | number
    adult?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    site_ids?: GenreUpdatesite_idsInput | number[]
  }

  export type ChapterUpdateWithoutMangaInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    likes_count?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    number?: StringFieldUpdateOperationsInput | string
    item_number?: IntFieldUpdateOperationsInput | number
    number_secondary?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    volume?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    pages?: MangaPageUpdateManyWithoutChapterNestedInput
    Bookmark?: BookmarkUpdateManyWithoutLastReadNestedInput
  }

  export type ChapterUncheckedUpdateWithoutMangaInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    likes_count?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    number?: StringFieldUpdateOperationsInput | string
    item_number?: IntFieldUpdateOperationsInput | number
    number_secondary?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    volume?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    pages?: MangaPageUncheckedUpdateManyWithoutChapterNestedInput
    Bookmark?: BookmarkUncheckedUpdateManyWithoutLastReadNestedInput
  }

  export type ChapterUncheckedUpdateManyWithoutMangaInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    likes_count?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    number?: StringFieldUpdateOperationsInput | string
    item_number?: IntFieldUpdateOperationsInput | number
    number_secondary?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    volume?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
  }

  export type RelatedUpdateWithoutMangaInput = {
    reason?: EnumRelatedReasonFieldUpdateOperationsInput | $Enums.RelatedReason
    anime?: AnimeUpdateOneWithoutRelatedFromNestedInput
    relatedAnime?: AnimeUpdateOneWithoutRelatedToNestedInput
    relatedManga?: MangaUpdateOneWithoutRelatedToNestedInput
  }

  export type RelatedUncheckedUpdateWithoutMangaInput = {
    id?: IntFieldUpdateOperationsInput | number
    reason?: EnumRelatedReasonFieldUpdateOperationsInput | $Enums.RelatedReason
    anime_slug?: NullableStringFieldUpdateOperationsInput | string | null
    relatedAnimeSlug?: NullableStringFieldUpdateOperationsInput | string | null
    relatedMangaSlug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RelatedUncheckedUpdateManyWithoutMangaInput = {
    id?: IntFieldUpdateOperationsInput | number
    reason?: EnumRelatedReasonFieldUpdateOperationsInput | $Enums.RelatedReason
    anime_slug?: NullableStringFieldUpdateOperationsInput | string | null
    relatedAnimeSlug?: NullableStringFieldUpdateOperationsInput | string | null
    relatedMangaSlug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RelatedUpdateWithoutRelatedMangaInput = {
    reason?: EnumRelatedReasonFieldUpdateOperationsInput | $Enums.RelatedReason
    anime?: AnimeUpdateOneWithoutRelatedFromNestedInput
    manga?: MangaUpdateOneWithoutRelatedFromNestedInput
    relatedAnime?: AnimeUpdateOneWithoutRelatedToNestedInput
  }

  export type RelatedUncheckedUpdateWithoutRelatedMangaInput = {
    id?: IntFieldUpdateOperationsInput | number
    reason?: EnumRelatedReasonFieldUpdateOperationsInput | $Enums.RelatedReason
    anime_slug?: NullableStringFieldUpdateOperationsInput | string | null
    manga_slug?: NullableStringFieldUpdateOperationsInput | string | null
    relatedAnimeSlug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RelatedUncheckedUpdateManyWithoutRelatedMangaInput = {
    id?: IntFieldUpdateOperationsInput | number
    reason?: EnumRelatedReasonFieldUpdateOperationsInput | $Enums.RelatedReason
    anime_slug?: NullableStringFieldUpdateOperationsInput | string | null
    manga_slug?: NullableStringFieldUpdateOperationsInput | string | null
    relatedAnimeSlug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BookmarkUpdateWithoutMangaInput = {
    mark?: EnumBookmarkNameFieldUpdateOperationsInput | $Enums.BookmarkName
    type?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastRead?: ChapterUpdateOneWithoutBookmarkNestedInput
    lastWatch?: EpisodeUpdateOneWithoutBookmarkNestedInput
    anime?: AnimeUpdateOneWithoutBookmarkNestedInput
    user?: UserUpdateOneRequiredWithoutBookmarkNestedInput
  }

  export type BookmarkUncheckedUpdateWithoutMangaInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    mark?: EnumBookmarkNameFieldUpdateOperationsInput | $Enums.BookmarkName
    type?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    animeSlug_url?: NullableStringFieldUpdateOperationsInput | string | null
    chapterId?: NullableIntFieldUpdateOperationsInput | number | null
    episodeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BookmarkUncheckedUpdateManyWithoutMangaInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    mark?: EnumBookmarkNameFieldUpdateOperationsInput | $Enums.BookmarkName
    type?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    animeSlug_url?: NullableStringFieldUpdateOperationsInput | string | null
    chapterId?: NullableIntFieldUpdateOperationsInput | number | null
    episodeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MangaCreateManyItems_countInput = {
    id: number
    name: string
    eng_name: string
    slug_url: string
    otherNames?: MangaCreateotherNamesInput | string[]
    summary?: string | null
    model: $Enums.ModelName
    site: number
    isLicensed?: boolean
    coverId: number
    ageRestrictionId: number
    backgroundId: number
  }

  export type MangaUpdateWithoutItems_countInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    cover?: CoverUpdateOneRequiredWithoutMangaNestedInput
    ageRestriction?: AgeRestrictionUpdateOneRequiredWithoutMangaNestedInput
    genres?: GenreUpdateManyWithoutMangaNestedInput
    background?: BackgroundUpdateOneRequiredWithoutMangaNestedInput
    Chapter?: ChapterUpdateManyWithoutMangaNestedInput
    relatedFrom?: RelatedUpdateManyWithoutMangaNestedInput
    relatedTo?: RelatedUpdateManyWithoutRelatedMangaNestedInput
    Bookmark?: BookmarkUpdateManyWithoutMangaNestedInput
  }

  export type MangaUncheckedUpdateWithoutItems_countInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    coverId?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
    genres?: GenreUncheckedUpdateManyWithoutMangaNestedInput
    Chapter?: ChapterUncheckedUpdateManyWithoutMangaNestedInput
    relatedFrom?: RelatedUncheckedUpdateManyWithoutMangaNestedInput
    relatedTo?: RelatedUncheckedUpdateManyWithoutRelatedMangaNestedInput
    Bookmark?: BookmarkUncheckedUpdateManyWithoutMangaNestedInput
  }

  export type MangaUncheckedUpdateManyWithoutItems_countInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eng_name?: StringFieldUpdateOperationsInput | string
    slug_url?: StringFieldUpdateOperationsInput | string
    otherNames?: MangaUpdateotherNamesInput | string[]
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    model?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    site?: IntFieldUpdateOperationsInput | number
    isLicensed?: BoolFieldUpdateOperationsInput | boolean
    coverId?: IntFieldUpdateOperationsInput | number
    ageRestrictionId?: IntFieldUpdateOperationsInput | number
    backgroundId?: IntFieldUpdateOperationsInput | number
  }

  export type MangaPageCreateManyChapterInput = {
    id?: number
    created_at?: Date | string
    image: string
    url: string
    ratio: number
  }

  export type BookmarkCreateManyLastReadInput = {
    id?: number
    userId: string
    mark: $Enums.BookmarkName
    type: $Enums.ModelName
    addedAt?: Date | string
    updatedAt?: Date | string
    mangaSlug_url?: string | null
    animeSlug_url?: string | null
    episodeId?: number | null
  }

  export type MangaPageUpdateWithoutChapterInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    ratio?: FloatFieldUpdateOperationsInput | number
  }

  export type MangaPageUncheckedUpdateWithoutChapterInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    ratio?: FloatFieldUpdateOperationsInput | number
  }

  export type MangaPageUncheckedUpdateManyWithoutChapterInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    ratio?: FloatFieldUpdateOperationsInput | number
  }

  export type BookmarkUpdateWithoutLastReadInput = {
    mark?: EnumBookmarkNameFieldUpdateOperationsInput | $Enums.BookmarkName
    type?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastWatch?: EpisodeUpdateOneWithoutBookmarkNestedInput
    anime?: AnimeUpdateOneWithoutBookmarkNestedInput
    manga?: MangaUpdateOneWithoutBookmarkNestedInput
    user?: UserUpdateOneRequiredWithoutBookmarkNestedInput
  }

  export type BookmarkUncheckedUpdateWithoutLastReadInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    mark?: EnumBookmarkNameFieldUpdateOperationsInput | $Enums.BookmarkName
    type?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mangaSlug_url?: NullableStringFieldUpdateOperationsInput | string | null
    animeSlug_url?: NullableStringFieldUpdateOperationsInput | string | null
    episodeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BookmarkUncheckedUpdateManyWithoutLastReadInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    mark?: EnumBookmarkNameFieldUpdateOperationsInput | $Enums.BookmarkName
    type?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mangaSlug_url?: NullableStringFieldUpdateOperationsInput | string | null
    animeSlug_url?: NullableStringFieldUpdateOperationsInput | string | null
    episodeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SessionCreateManyUserInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt: Date | string
    updatedAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type AccountCreateManyUserInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type BookmarkCreateManyUserInput = {
    id?: number
    mark: $Enums.BookmarkName
    type: $Enums.ModelName
    addedAt?: Date | string
    updatedAt?: Date | string
    mangaSlug_url?: string | null
    animeSlug_url?: string | null
    chapterId?: number | null
    episodeId?: number | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkUpdateWithoutUserInput = {
    mark?: EnumBookmarkNameFieldUpdateOperationsInput | $Enums.BookmarkName
    type?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastRead?: ChapterUpdateOneWithoutBookmarkNestedInput
    lastWatch?: EpisodeUpdateOneWithoutBookmarkNestedInput
    anime?: AnimeUpdateOneWithoutBookmarkNestedInput
    manga?: MangaUpdateOneWithoutBookmarkNestedInput
  }

  export type BookmarkUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    mark?: EnumBookmarkNameFieldUpdateOperationsInput | $Enums.BookmarkName
    type?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mangaSlug_url?: NullableStringFieldUpdateOperationsInput | string | null
    animeSlug_url?: NullableStringFieldUpdateOperationsInput | string | null
    chapterId?: NullableIntFieldUpdateOperationsInput | number | null
    episodeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BookmarkUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    mark?: EnumBookmarkNameFieldUpdateOperationsInput | $Enums.BookmarkName
    type?: EnumModelNameFieldUpdateOperationsInput | $Enums.ModelName
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mangaSlug_url?: NullableStringFieldUpdateOperationsInput | string | null
    animeSlug_url?: NullableStringFieldUpdateOperationsInput | string | null
    chapterId?: NullableIntFieldUpdateOperationsInput | number | null
    episodeId?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}