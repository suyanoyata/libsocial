
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CoverScalarFieldEnum = {
  id: 'id',
  thumbnail: 'thumbnail',
  default: 'default'
};

exports.Prisma.AgeRestrictionScalarFieldEnum = {
  id: 'id',
  label: 'label',
  site_ids: 'site_ids'
};

exports.Prisma.GenreScalarFieldEnum = {
  id: 'id',
  adult: 'adult',
  name: 'name',
  site_ids: 'site_ids'
};

exports.Prisma.RelatedScalarFieldEnum = {
  id: 'id',
  reason: 'reason',
  anime_slug: 'anime_slug',
  manga_slug: 'manga_slug',
  relatedAnimeSlug: 'relatedAnimeSlug',
  relatedMangaSlug: 'relatedMangaSlug'
};

exports.Prisma.BackgroundScalarFieldEnum = {
  id: 'id',
  url: 'url'
};

exports.Prisma.AnimeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  eng_name: 'eng_name',
  slug_url: 'slug_url',
  otherNames: 'otherNames',
  summary: 'summary',
  model: 'model',
  site: 'site',
  coverId: 'coverId',
  ageRestrictionId: 'ageRestrictionId',
  backgroundId: 'backgroundId'
};

exports.Prisma.EpisodeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  number: 'number',
  number_secondary: 'number_secondary',
  slug_url: 'slug_url',
  item_number: 'item_number',
  source: 'source',
  endingLength: 'endingLength'
};

exports.Prisma.MangaScalarFieldEnum = {
  id: 'id',
  name: 'name',
  eng_name: 'eng_name',
  slug_url: 'slug_url',
  otherNames: 'otherNames',
  summary: 'summary',
  model: 'model',
  site: 'site',
  isLicensed: 'isLicensed',
  coverId: 'coverId',
  ageRestrictionId: 'ageRestrictionId',
  itemsCountId: 'itemsCountId',
  backgroundId: 'backgroundId'
};

exports.Prisma.ItemsCountScalarFieldEnum = {
  id: 'id',
  uploaded: 'uploaded'
};

exports.Prisma.ChapterScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  likes_count: 'likes_count',
  manga_id: 'manga_id',
  name: 'name',
  number: 'number',
  item_number: 'item_number',
  number_secondary: 'number_secondary',
  slug: 'slug',
  volume: 'volume',
  count: 'count'
};

exports.Prisma.MangaPageScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  image: 'image',
  url: 'url',
  ratio: 'ratio',
  chapterId: 'chapterId'
};

exports.Prisma.BookmarkScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  mark: 'mark',
  type: 'type',
  addedAt: 'addedAt',
  updatedAt: 'updatedAt',
  mangaSlug_url: 'mangaSlug_url',
  animeSlug_url: 'animeSlug_url',
  chapterId: 'chapterId',
  episodeId: 'episodeId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  isAnonymous: 'isAnonymous',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.RelatedReason = exports.$Enums.RelatedReason = {
  sequel: 'sequel',
  prequel: 'prequel',
  spinoff: 'spinoff'
};

exports.ModelName = exports.$Enums.ModelName = {
  manga: 'manga',
  anime: 'anime'
};

exports.BookmarkName = exports.$Enums.BookmarkName = {
  planned: 'planned',
  ongoing: 'ongoing',
  finished: 'finished',
  dropped: 'dropped',
  favorite: 'favorite'
};

exports.Prisma.ModelName = {
  Cover: 'Cover',
  AgeRestriction: 'AgeRestriction',
  Genre: 'Genre',
  Related: 'Related',
  Background: 'Background',
  Anime: 'Anime',
  Episode: 'Episode',
  Manga: 'Manga',
  ItemsCount: 'ItemsCount',
  Chapter: 'Chapter',
  MangaPage: 'MangaPage',
  Bookmark: 'Bookmark',
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
